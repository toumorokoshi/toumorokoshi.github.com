<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://y.tsutsumi.io/feed/index.xml" rel="self" type="application/atom+xml" /><link href="https://y.tsutsumi.io/" rel="alternate" type="text/html" /><updated>2024-04-30T00:29:44+00:00</updated><id>https://y.tsutsumi.io/feed/index.xml</id><title type="html">Yusuke Tsutsumi</title><subtitle>My blog on software, productivity, and obsessively optimizing. I work at Google, ex-Zillow. Thoughts my own.</subtitle><entry><title type="html">Reflecting on 2022</title><link href="https://y.tsutsumi.io/my-year/2022" rel="alternate" type="text/html" title="Reflecting on 2022" /><published>2022-12-31T07:00:00+00:00</published><updated>2022-12-31T07:00:00+00:00</updated><id>https://y.tsutsumi.io/my-year/reflecting-on-2022</id><content type="html" xml:base="https://y.tsutsumi.io/my-year/2022"><![CDATA[<p>In the vein of <a href="/my-year/2020">previous</a> <a href="/my-year/2021">years</a>, I wanted to finish up my 2022 with a blog post.</p>

<p>2022 was a largely unventful year for me professionally: my kids are going to new schools and kindergartens, so a lot of my focus was on my family, more or less as planned.</p>

<p>This was also supposed to be a year of finishing up loose ends: I think I have continued to make some progress there.</p>

<h2 id="oss-contributions-in-a-nutshell">OSS Contributions in a nutshell</h2>

<ul>
  <li>Continued to maintain
    <ul>
      <li>jsonschema-extractor</li>
    </ul>
  </li>
  <li>Finished
    <ul>
      <li>tome with a 0.9 effectively final release</li>
    </ul>
  </li>
  <li>Cleaned up the google.cloud Ansible collection.</li>
</ul>

<h2 id="finished-tome">Finished Tome</h2>

<p>I finally shipped <a href="https://github.com/toumorokoshi/tome">a version of tome that I was happy with</a>! This was a side project of mine that was mostly there, I just needed to take it over the finish line.</p>

<p>I’m happy to have done so! Tome helps me in my daily tasks, and maybe it’ll help you too.</p>

<h2 id="updating-cloudgoogles-collection-for-ansible">Updating cloud.google’s collection for Ansible</h2>

<p>Professional needs aligned with my love for Open Source, and I ended up working on the <a href="https://github.com/ansible-collections/google.cloud">cloud.google Ansible provider</a>, bringing it back up to snuff as an Ansible collection certified for ansible-core 2.13 and above.</p>

<p>I’m pretty proud of my work here, totalling <a href="https://github.com/ansible-collections/google.cloud/graphs/contributors">50 commits in 2022Q4</a>:</p>

<ul>
  <li>Proposing the split from the magic-modules repository from which it was based, enabling a handful of PRs and bugfixes to get merged.</li>
  <li>Added continuous integration for integration and sanity tests.</li>
  <li>Fixed the 80+ integration tests that existed.</li>
</ul>

<p>Culminating in the release of <a href="https://galaxy.ansible.com/google/cloud">1.1.2</a>, the first release in almost a year and a half.</p>

<p>Unfortunately my time allotments don’t let me spend that much time on the project, but my intention is to keep it healthy and accept PRs with the new <a href="https://github.com/ansible-collections/google.cloud/blob/master/CONTRIBUTING.md">contribution process documented</a>.</p>

<h2 id="continuing-japanese">Continuing Japanese</h2>

<p>I continue to work on my Japanese, but I think I’ve hit a hard plateau there: I have hundreds of words I still need to learn, and I’m not really remembering any of them with my flash card system.</p>

<p>For next steps, I think I’m going to just continue to grow my Japanese with continued weekly italki classes for speech and reading to try to get to the point where there’s almost no words I don’t know.</p>

<p>I think consuming more TV / Films could be helpful: I don’t get enough exposure from a spoken perspective, to pick up on common conversationalexchanges</p>

<h2 id="continuing-farsi">Continuing Farsi</h2>

<p>My Farsi has been getting better as well: it’s been roughly a year and half since I started to learn.</p>

<p>I can’t say I’ve dedicated a lot of time here, but I’m able to:</p>

<ul>
  <li>read some simple stories by myself.</li>
  <li>understand quite a bit.</li>
  <li>have some basic conversations around family, vacations, etc.</li>
  <li>write very, very slowly.</li>
</ul>

<p>I think with the limited time I have, I won’t make much progress in 2023 either. But as my biggest stumbling block is in vocabularly, I hope to spend a lot of time fleshing that out so I can muddle through conversations.</p>

<h2 id="fitness">Fitness</h2>

<p>I made some minor, but significant strides this year health-wise:</p>

<p>I lost 4 pounds purposefully, from 188 to 184, in 2022Q4. It’s a major step forward for me since I haven’t sucessfully been able to lose weight on purpose before. Although I was down to 190 from 200 right after the pandemic started (presumably due to me eating salads for lunch daily during that time), it wasn’t a purposeful action.</p>

<p>I was able to run a 5k in a single run, and actually even started running 5k’s regularly throughout the week! 18 year old me never even completed the mile run, so to get to a 5k 16 years later is quite an improvement for me.</p>

<p>My focus on a plant-based diet is the same as 2021: I generally eat plant-based meals for most meals in a day. Near the tail end of the year I’ve been focusing on a high-protein, calorie restricted diet with the goal of getting to 15% body fat to start (I was 21% according to a Dexa scan in October).</p>

<p>My diet looks on a regular weekday looks like:</p>

<ul>
  <li>Breakfast: 150 calories, 30g protein of a vegan protein shake.</li>
  <li>Brunch: 150 calorie coffee with Soy (something I’m trying to minimize).</li>
  <li>Lunch: 400 calories, 25G protein (Huel hot and savory).</li>
  <li>Dinner: whatever is on the plate: this is highly varied.</li>
  <li>After dinner: 150 calories, 30g protein  of a vegan protein shake.</li>
</ul>

<p>My goal is to get to 1.5g / protein / KG bodyweight, and also restricting to 1700 calories a day. Generally some sweet or snack gets in the way, but that’s my target.</p>

<h2 id="random-other-things-i-did">Random other things I did</h2>

<ul>
  <li>Set up game streaming from my desktop: with Stadia shutting down, I needed a proper replacment. Turns out Moonlight, A 4 year old nvidia GPU, and a 10 year old desktop is sufficient to run the games I want to! I just stream from my desktop: even on 4G it works with imperceptible lag.</li>
  <li>I learned Shogi and Mahjong, mainly so I could get some achievements in a video game “Judgement”.</li>
</ul>

<h2 id="goals-for-2023">Goals for 2023</h2>

<p>2023 will be another year of conservative goals for me: there’s a lot of family obligations and some random personal dablings I’d like to spend my time with.</p>

<p>That said, there’s some goals I want to continue progress on. Here’s a list:</p>

<ul>
  <li>Consume 20 minutes of Japanese media a day. TV and books mostly (conversational and literacy / vocabulary).</li>
  <li>Be able to watch a Farsi movie and understand a majority of the story.</li>
  <li>Lose fat and gain muscle to get to 12% body fat, validated via a Dexa.</li>
  <li>Finish a long-standing PR to add infinite depth keychords into VSCode.</li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>2022 was again a non-transformative year for me, but making steady, principled progress on my goals has been great.</p>

<p>Happy New Year!</p>]]></content><author><name></name></author><category term="2022" /><category term="reflection" /><summary type="html"><![CDATA[In the vein of previous years, I wanted to finish up my 2022 with a blog post.]]></summary></entry><entry><title type="html">Wake-on-lan via WAN</title><link href="https://y.tsutsumi.io/wake-on-wan" rel="alternate" type="text/html" title="Wake-on-lan via WAN" /><published>2022-09-23T07:00:00+00:00</published><updated>2022-09-23T07:00:00+00:00</updated><id>https://y.tsutsumi.io/wake-on-wan</id><content type="html" xml:base="https://y.tsutsumi.io/wake-on-wan"><![CDATA[<p>I’ve been using <a href="https://moonlight-stream.org/">Moonlight</a> for game streaming, and one thing I’ve learned about recently is <a href="https://wiki.archlinux.org/title/Wake-on-LAN#Trigger_a_wake_up">wake-on-lan</a>: the ability to wake up your machine by sending a magic packet to a device.</p>

<p>I regularly use wake-on-lan on my local network to start up my gaming desktop, but I began to wonder if it’s possible to wake my machine up from the public internet (The “WAN”)? And here is how I got to successfully accomplish a wake-on-wan.</p>

<h2 id="background">Background</h2>

<p>My existing setup already enables me to stream Moonlight over wan. I accomplished that by:</p>

<ul>
  <li>Port forwarding for <a href="https://github.com/moonlight-stream/moonlight-docs/wiki/Setup-Guide#manual-port-forwarding-advanced">all of ports recommended by moonlight</a>.</li>
  <li>Using a dynamic DNS provider (I use tplink, but there’s also <a href="https://www.noip.com/">noip</a>).</li>
</ul>

<h2 id="how-wake-on-lan-works">How wake-on-lan works</h2>

<p>Wake on lan works by sending an ethernet frame with the contents of the MAC address. This is often send to the broadcast IP of a network, ensuring that all devices connected to the network will receive it.</p>

<h2 id="configuring-wake-on-wan">Configuring wake-on-wan</h2>

<p>I originally tried to do direct port forwarding of the UDP 7 through 9 ports, but I found out that my internet provider (Comcast) sometimes does not allow their modem to forward the packet.</p>

<p>As such, I ended up doing a separate port forward from an arbitrary port and mapped it to port 7. And that was it!</p>

<h2 id="troubleshooting">Troubleshooting</h2>

<p>If you have issues, try the following:</p>

<ul>
  <li>verify that the computer wakes if you send it the WOL request directly.</li>
  <li>verify that the computer wakes if you send the broadcast IP (e.g. <code class="language-plaintext highlighter-rouge">255.255.255.255</code>) the request directly.</li>
</ul>]]></content><author><name></name></author><category term="networking" /><summary type="html"><![CDATA[I’ve been using Moonlight for game streaming, and one thing I’ve learned about recently is wake-on-lan: the ability to wake up your machine by sending a magic packet to a device.]]></summary></entry><entry><title type="html">Don’t introduce a V2 API</title><link href="https://y.tsutsumi.io/no-v2-apis/" rel="alternate" type="text/html" title="Don’t introduce a V2 API" /><published>2022-05-01T07:00:00+00:00</published><updated>2022-05-01T07:00:00+00:00</updated><id>https://y.tsutsumi.io/no-v2-apis</id><content type="html" xml:base="https://y.tsutsumi.io/no-v2-apis/"><![CDATA[<p>It’s time for a blanket statement: <strong>users will prefer improving extending existing API versions over adopting a new version due to a backwards-incompatible change</strong>.</p>

<p>The reason: the cost to the user to start using the next version of the API is larger than any value they would derive from that next version alone (e.g. sans new features).</p>

<p>Let’s break this down.</p>

<h2 id="definitions">Definitions</h2>

<p>For the context of this article, I wanted to scope the conversation with the following terms:</p>

<ul>
  <li>API: I’m really talking about <strong>remote</strong> APIs: any programming interface that is performing a remote procedure call. The simplest example is HTTP + JSON, so I’ll be using that for the rest of this article.</li>
</ul>

<h2 id="what-types-of-changes-require-a-new-api-version">What types of changes require a new API version</h2>

<p>Generally speaking, a new API version should only be published in the case where the API author needs to introduce a backwards-incompatible change (e.g. a <a href="https://semver.org/">semver</a>-like convention). The scope of a backwards-incompatible change varies depending on the context, but examples include:</p>

<ul>
  <li>Renaming a field.</li>
  <li>Modifying the schema of an object.</li>
  <li>Introducing entirely new conventions and handling of values.</li>
</ul>

<p>The motivation for a new API when introducing breaking changes is reasonable: API authors should build trust with their users by providing a mechanism to notify them when there is a need for them to change their code to interface with said API. Versioning makes the choice on the user explicit to upgrade.</p>

<h2 id="but-api-migration-is-expensive-for-customers">But API migration is expensive for customers</h2>

<p>The challenge comes in the logistics of the users upgrading their clients.</p>

<p>Often API authors can find themselves sufficiently removed from the problem of dealing with the churn of API upgrades, and get an unrealistic idea of the cost of the API migration.</p>

<p>Some of the reasons upgrades can become expensive are outlined below.</p>

<h3 id="tightly-coupled-dependencies-requiring-lockstep-upgrades">Tightly coupled dependencies requiring lockstep upgrades</h3>

<p>Clients and SDKs to interface with APIs are often not written in a highly modular fashion: instead, they are whole surfaces that must be upgraded, such as with all the APIs on a cloud like AWS or GCP, or for all services offered by a platform like Stripe.</p>

<p>The breadth of this surface often means that you update your code for multiple different clients at once, often unrelated to the one service or tool that you want to use.</p>

<h3 id="upgrades-can-be-multiple-layers-deep">Upgrades can be multiple layers deep</h3>

<p>In some cases, although the upgrade of the client is trivial, it can be nested a dependency chain that makes upgrades take significantly more effort and time.</p>

<p>For example, consider the usage of a raw SDK, wrapped in a convenience wrapper like a Terraform provider. The sketch could look like:</p>

<ul>
  <li>Raw API.</li>
  <li>Go SDK.</li>
  <li>Terraform provider.</li>
</ul>

<div class="jekyll-diagrams diagrams mermaid">
  Command Not Found: mmdc
</div>

<p>In order for the user to finally get the upgraded SDK, they have to update the Go SDK version, and update the Terraform provider it is chained to. Each have their own cost associated, and an incompatible change can leak the cost of the upgrade into every downstream.</p>

<p>Not only does this make upgrades more <strong>costly</strong>, but it can make them take longer: what if the team who upgrades the provider is separate from the team who upgrades the SDK? What if one of those pieces is an open source project that is swamped and slow to respond? This can make a simple code change extend into a multi-week or sometimes multi-month endeavor, including the cost of coordination overhead.</p>

<h2 id="api-upgrades-do-not-benefit-the-end-user">API upgrades do not benefit the end user</h2>

<p>We’ve established that an API upgrade can be expensive. What about the benefits?</p>

<p>The reality is the reasons that engineers often <strong>want</strong> to introduce a new change isn’t particularly valuable for the end user. Let’s look at some of these arguments now.</p>

<h3 id="api-intuitiveness">API intuitiveness</h3>

<p>The most common example of improving usability is renaming a field in an API payload: the previous name didn’t really capture the purpose, so the field should be renamed to something that does.</p>

<p>There’s similar changes in the category as well:</p>

<ul>
  <li>Moving fields from one object to another.</li>
  <li>Gathering a set of fields and interning that into a subobject.</li>
</ul>

<p>The problem is intuitiveness of anything is highly subjective: intuition around a user interface is dependent on the experience that an individual had previously, which itself is dependent on the frequency of an accepted idiom.</p>

<p>Consider the now-famous hamburger icon (≡) or triple dots (⋮) that we see on every website: neither was “intuitive” until they become common in styles guides and applications. Someone viewing these for the first type wouldn’t immediately be able to reason what they mean: they have to be taught.</p>

<p>Therefore, one has to assume that, unless a user can somehow completely intuit the schema of an API, they will be forced to look up <strong>some</strong> form of documentation to be able to use the API.</p>

<p>Even if a user could theoretically intuit the whole API, they will <strong>still</strong> be likely to look it up, and have to verify the meaning of every field: if you had the choice of just looking up what these terms mean or a workflow of guess-and-verify-the-field-does-what-I-think-it-does, many would look up the meaning to save the time spent fiddling with the API if they’re wrong.</p>

<p>Therefore, API intuitiveness is largely irrelevant: <strong>accurate, clear documentation or examples will be more valuable every time</strong>, and comes with zero cost in end-user toil to update their API calls to new schemas or field names.</p>

<h3 id="most-api-changes-can-live-on-the-same-version">Most API changes can live on the same version</h3>

<p>Most API changes can actually live on the same version! In some of the examples above, instead of introducing a new version of an API entirely, one could instead:</p>

<ol>
  <li>Introduce a new field with the new name / schema / behavior.</li>
  <li>Accept both indefinitely, and add validation to make new fields mutually exclusively with any old conflicting fields.</li>
</ol>

<p>This is largely similar to the burden of maintaining multiple version of the API simultaneously, but comes with the benefit that the work is largely <strong>additive</strong>: the work to use a new feature is only the cost of adding support for that field in one’s SDK / library, and is not coupled with other additional burdens that don’t provide immediate value (like refactoring your integration to support some new v2 schema).</p>

<h3 id="new-features">New Features</h3>

<p>Often new APIs versions also become the only way to consume new features in the underlying service: engineers don’t want to have to maintain multiple code paths or update legacy ones to support new features, so new fields will only be introduced in the new API.</p>

<p>However, there is no technical reason why these fields cannot be introduced in the older API versions, and this in turn results additional user friction: the user is made to pay the cost of an expensive upgrade, even to get a single feature flag.</p>

<h2 id="examples-around-the-internet-of-pain-of-migration-costs">Examples around the internet of pain of migration costs</h2>

<p>I think there’s very few tangible examples of someone praising a new API, but there’s a plentiful amount of complaints around an API changing and the users being unhappy with paying the cost to upgrade:</p>

<ul>
  <li><a href="https://steve-yegge.medium.com/dear-google-cloud-your-deprecation-policy-is-killing-you-ee7525dc05dc">Steve Yegge’s blog post on rapid deprecation policies making maintaining project unsustainable.</a></li>
</ul>

<h2 id="summary">Summary</h2>

<ul>
  <li>A new version of an API is expensive for consumers to migrate to.
    <ul>
      <li>Often clients have a much wider surface area than the single API being upgraded, and therefore are that much more expensive to upgrade.</li>
      <li>Clients and SDKs tend to have a chain of dependencies (e.g. wrapped providers or CLIs wrapping SDKs), resulting in significant coordination to support new APIs.</li>
    </ul>
  </li>
  <li>Many of the percieved benefits of new APIs aren’t true in practice
    <ul>
      <li>API changes that are more “intuitive” is highly subjective, and without sufficient standardization will require the user to look up documentation. Documentation is the default fallback and the first things users look at, regardless of schema of the payload.</li>
      <li>New features and fields could be added to the old API without issue.</li>
      <li>Many desired changes can be made incrementally to existing API version, by introducing new fields with mutual exclusivity.</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="coding" /><summary type="html"><![CDATA[It’s time for a blanket statement: users will prefer improving extending existing API versions over adopting a new version due to a backwards-incompatible change.]]></summary></entry><entry><title type="html">Walking desk treadmill</title><link href="https://y.tsutsumi.io/walking-desk-treadmill/" rel="alternate" type="text/html" title="Walking desk treadmill" /><published>2022-01-19T07:00:00+00:00</published><updated>2022-01-19T07:00:00+00:00</updated><id>https://y.tsutsumi.io/walking-desk-treadmill</id><content type="html" xml:base="https://y.tsutsumi.io/walking-desk-treadmill/"><![CDATA[<p>With work from home becoming a likely permanent fixture of my life, and being in front of my computer 8 hours accompanying that, I’ve been looking at ways to try get some exercise in.</p>

<p>So I got a walking treadmill for under my desk.</p>

<p><img src="treadmill-desk.jpg" alt="picture of my treadmill desk setup" /></p>

<h2 id="background">Background</h2>

<p>I’ve been using a standing desk for about 18 months. However, it’s been very difficult to stand for the whole time. My feet would hurt, or I would get restless.</p>

<p>Eventually to help I got a tall office chair, and alternated between that and standing. However, I’d often contort myself in the office chair, and would end up sitting with poor posture for long periods of time.</p>

<p>In addition I’m often in meetings rather than doing deep work, and it’s difficult to sit through meetings for prolonged periods of time. I would get fidgity or find myself drifting to activities on my other monitor, which made me a worse participant in meetings.</p>

<p>I thought that the regular motion required with a walking treadmill would help with my concentration, and keep my body moving throughout the day.</p>

<h2 id="the-treadmill">The Treadmill</h2>

<p>I purchased the <a href="https://www.amazon.com/gp/product/B08FCFYHKL/ref=ppx_yo_dt_b_search_asin_title">Goplus 2 in 1 treadmill</a>.</p>

<h3 id="weight">Weight</h3>

<p>My original goal was to find a treadmill that was light enough that I can move in and out of my desk. the Goplus was one of the lightest I can find, but at 70 pounds, it wasn’t particularly easy to move around. I now leave it under my desk and walk or stand the whole time.</p>

<h3 id="track-area">Track Area</h3>

<p>The dimensions of the walking area is important: it’ll be your walking surface for multiple hours at a time.</p>

<p>The Goplus has an area of 40” by 16”. The 16” isn’t very wide: I’ve had to rotate my hips much more than I would normally when walking. The 40” length hasn’t really been an issue, but doesn’t leave a significant amount of slack.</p>

<h2 id="the-shoes">The Shoes</h2>

<p>When I first walked on my treadmill, I did so in socks, and my feet really started to hurt after 3-4 hours. I tried some <a href="https://www.amazon.com/gp/product/B01N4W17YA/ref=ppx_yo_dt_b_search_asin_title">slip on loafers</a> and it’s helped a lot.</p>

<h2 id="foot-pain">Foot pain</h2>

<p>Since I’ve been using the shoes, I have been able to walk for about 1.5-2 hours without much issue: during days where I’m in meetings all day I don’t really notice fatigue from walking.</p>

<p>The foot pain walking with shoes is actually must lower than standing: I think this is because walking forces you to rotate where the pressure is on your feet, which naturally prevents prolonged stress on any one part.</p>

<h2 id="impact-on-focus">Impact on focus</h2>

<p>Walking in meetings has helped me significantly with focus. The movement prevents me from fidgiting, and the constant use of my mental capacity to walk gives me no choice to focus on only one other task: the meeting itself.</p>

<h2 id="the-routine">The routine</h2>

<p>I started in December at the default pace of 0.6 miles per hour. Over the course of a month, I’ve gone up to walking 0.8 comfortably. And I think I may be able to walk faster.</p>

<p>My routine has a natural break in the middle for lunch: so I walk 2-3 hours in the morning (hopping off a couple of times for snack or bathroom breaks), take the 1 hour break for lunch, and then another 3-4 hours before signing off for the day.</p>

<p>After a couple of weeks, I can do the whole day without a break, but my legs do feel sore and I generally sit or lie down to give my legs rest after work for about an hour. After the break I sometimes hop right back on to do some personal computing tasks: the long stretches that are the most difficult.</p>

<h2 id="what-i-would-do-differently-next-time">What I would do differently next time</h2>

<ul>
  <li>16” for width on a treadmill is uncomfortable, for my 6’ frame. I would get a wider treadmill.</li>
</ul>

<h2 id="energy-after-work">Energy after work</h2>

<p>I have more energy after walking all day, and during meetings: I feel more alert since the constant exercise helps keep my blood pumping, and in the same way I feel more energetic after a hard workout, I notice I have more energy after walking.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Although I originally felt a walking treadmill was an excessive addition to my setup, it has helped alleviate a lot of the problems I faced when working in front of my desk for eight hours a day.</p>

<p>After about a month, it feels more natural to me that sitting, and it has had positive impact on my health, both physically and mentally.</p>]]></content><author><name></name></author><category term="gear" /><category term="treadmill" /><summary type="html"><![CDATA[With work from home becoming a likely permanent fixture of my life, and being in front of my computer 8 hours accompanying that, I’ve been looking at ways to try get some exercise in.]]></summary></entry></feed>