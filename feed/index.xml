<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://y.tsutsumi.io/feed/index.xml" rel="self" type="application/atom+xml" /><link href="https://y.tsutsumi.io/" rel="alternate" type="text/html" /><updated>2023-01-01T00:44:30+00:00</updated><id>https://y.tsutsumi.io/feed/index.xml</id><title type="html">Yusuke Tsutsumi</title><subtitle>My blog on software, productivity, and obsessively optimizing. I work at Google, ex-Zillow. Thoughts my own.</subtitle><entry><title type="html">Wake-on-lan via WAN</title><link href="https://y.tsutsumi.io/wake-on-wan" rel="alternate" type="text/html" title="Wake-on-lan via WAN" /><published>2022-09-23T07:00:00+00:00</published><updated>2022-09-23T07:00:00+00:00</updated><id>https://y.tsutsumi.io/wake-on-wan</id><content type="html" xml:base="https://y.tsutsumi.io/wake-on-wan"><![CDATA[<p>I’ve been using <a href="https://moonlight-stream.org/">Moonlight</a> for game streaming, and one thing I’ve learned about recently is <a href="https://wiki.archlinux.org/title/Wake-on-LAN#Trigger_a_wake_up">wake-on-lan</a>: the ability to wake up your machine by sending a magic packet to a device.</p>

<p>I regularly use wake-on-lan on my local network to start up my gaming desktop, but I began to wonder if it’s possible to wake my machine up from the public internet (The “WAN”)? And here is how I got to successfully accomplish a wake-on-wan.</p>

<h2 id="background">Background</h2>

<p>My existing setup already enables me to stream Moonlight over wan. I accomplished that by:</p>

<ul>
  <li>Port forwarding for <a href="https://github.com/moonlight-stream/moonlight-docs/wiki/Setup-Guide#manual-port-forwarding-advanced">all of ports recommended by moonlight</a>.</li>
  <li>Using a dynamic DNS provider (I use tplink, but there’s also <a href="https://www.noip.com/">noip</a>).</li>
</ul>

<h2 id="how-wake-on-lan-works">How wake-on-lan works</h2>

<p>Wake on lan works by sending an ethernet frame with the contents of the MAC address. This is often send to the broadcast IP of a network, ensuring that all devices connected to the network will receive it.</p>

<h2 id="configuring-wake-on-wan">Configuring wake-on-wan</h2>

<p>I originally tried to do direct port forwarding of the UDP 7 through 9 ports, but I found out that my internet provider (Comcast) sometimes does not allow their modem to forward the packet.</p>

<p>As such, I ended up doing a separate port forward from an arbitrary port and mapped it to port 7. And that was it!</p>

<h2 id="troubleshooting">Troubleshooting</h2>

<p>If you have issues, try the following:</p>

<ul>
  <li>verify that the computer wakes if you send it the WOL request directly.</li>
  <li>verify that the computer wakes if you send the broadcast IP (e.g. <code class="language-plaintext highlighter-rouge">255.255.255.255</code>) the request directly.</li>
</ul>]]></content><author><name></name></author><category term="networking" /><summary type="html"><![CDATA[I’ve been using Moonlight for game streaming, and one thing I’ve learned about recently is wake-on-lan: the ability to wake up your machine by sending a magic packet to a device.]]></summary></entry><entry><title type="html">Introducing Tome: convert directories of scripts to an auto-completable, single command</title><link href="https://y.tsutsumi.io/introducing-tome/" rel="alternate" type="text/html" title="Introducing Tome: convert directories of scripts to an auto-completable, single command" /><published>2022-09-22T07:00:00+00:00</published><updated>2022-09-22T07:00:00+00:00</updated><id>https://y.tsutsumi.io/introducing-tome</id><content type="html" xml:base="https://y.tsutsumi.io/introducing-tome/"><![CDATA[<p>Today I’m happy to introduce <a href="https://tome-scripts.readthedocs.org/">Tome</a>, a CLI generator that takes directories of shell scripts and bundles them under a single command, complete with auto-completion, help text, and more.</p>

<p>Here is a quick demo of creating some scripts in a directory, and a command <code class="language-plaintext highlighter-rouge">s</code> from it:</p>

<p><img src="https://github.com/toumorokoshi/tome/raw/master/demo.gif" alt="demo of Tome" /></p>

<p>You can find the <a href="https://tome-scripts.readthedocs.io/en/latest/">documentation here</a>, and the <a href="https://github.com/toumorokoshi/tome">source code</a> and <a href="https://github.com/toumorokoshi/tome/releases">releases</a> on GitHub.</p>

<p>Give it a try and please file bugs or give feedback!</p>

<p>That’s really what this post is all about, but if you want to hear more about why and the history, read on.</p>

<h2 id="the-beginning-using-sub-at-zillow">The beginning: using sub at Zillow</h2>

<p>In 2011, I worked at Zillow, as a relatively new engineer obsessed with efficiency. I loved writing little scripts that helped simplify my workflow, such as:</p>

<ul>
  <li>configuring environment variables to work with our development environment.</li>
  <li>installation of binaries that were required locally.</li>
  <li>starting up our web server monolith.</li>
</ul>

<p>At the time, there were a lot of small things that needed to be done to start developing.</p>

<p>Eventually someone posted about <a href="https://github.com/qrush/sub">sub</a> in our engineering mailing list, which was created by 37 Signals, a company also obsessed with the developer experience and had a bit of a following at Zillow.</p>

<p>Sub was a great tool: it provided the ability to bootstrap a single command from a directory of scripts, and I saw an opportunity to use this to create a community-owned pool of scripts to help Zillow developers be productive and share productivity tooling as well. I created a git repository, called it <a href="https://www.zillow.com/tech/dev-bootstrapping-zb-zillows-swiss-army-knife/">zb</a>, and shared it with the other engineers. Zillow-bootstrap did some other things too (like local environment setup with some Python scripts), but the <code class="language-plaintext highlighter-rouge">zb</code> commands were the most famous.</p>

<p>zb was used for years at Zillow after that. We even <a href="https://github.com/zillow/sub">forked the code</a> and added some features like shell script sourcing, which enables setting environment variables in the parent executing the command.</p>

<h2 id="using-sub-personally">Using sub personally</h2>

<p>On top of usage at an organization, I found sub to be very useful for my <a href="https://github.com/toumorokoshi/ytlaces/tree/master/files/cookbook">own scripts as well</a>. Single-letter directories help me quickly navigate to the commands that are the most useful, and provide some namespacing.</p>

<p>I call this <code class="language-plaintext highlighter-rouge">s</code> in my setup, short for sub.</p>

<h2 id="challenges-with-sub">Challenges with sub</h2>

<p>sub itself was fairly stable for a while, but it had some challenges.</p>

<h3 id="sub-was-designed-for-forking">Sub was designed for forking</h3>

<p>Sub’s design expects the user to fork the whole repository to generate your own command. This coupling of the <strong>user’s</strong> scripts with the scripts of the core sub command made it difficult to stay up to date, due to dealing with merge conflicts and mapping variables that were renamed to initialize the script.</p>

<h3 id="sub-was-written-in-bash">Sub was written in bash</h3>

<p>sub was written in bash, and in particular relies on commands that are generated to build functionality like completion, etc. It makes the code hard to reason about.</p>

<p>In addition, bash is not the most performant language in the world, so more complex commands can become slower. Here’s the amount of time it takes to call <code class="language-plaintext highlighter-rouge">sub</code>, which maps to <code class="language-plaintext highlighter-rouge">help</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ time sub
real    0m0.122s
user    0m0.081s
sys     0m0.053s
</code></pre></div></div>

<p>Considering I may invoke sub hundreds of times in my day, even gaining 50 milliseconds per command would save me a few minutes a day. I think in practice this doesn’t mean a lot, but to the performance-obsessed, any opportunity for optimization looks promising.</p>

<h2 id="creating-tome">Creating Tome</h2>

<p>One of the best parts of sub is its simplicity and minimal set of functionality, which made it an appealing project for a re-write! After a couple of months, <a href="https://github.com/toumorokoshi/tome">Tome</a> was born.</p>

<p>Tome addresses the challenges above :</p>

<ul>
  <li>written in Rust, enabling incredibly low overhead on top of the underlying scripts.</li>
  <li>complete separation of the commands themselves (instances) and the core functionality that drives it (added into <code class="language-plaintext highlighter-rouge">tome</code>).</li>
  <li>some other features contributed like fish support (thanks <a href="https://github.com/zph">Zander Hill</a>!).</li>
</ul>

<p>The initialization is straightforward as well: add <code class="language-plaintext highlighter-rouge">tome</code> to your path after <a href="https://github.com/toumorokoshi/tome/releases">downloading it from the releases</a>, and initialize with a one-liner in your rc file:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>eval "$(tome init my-commands ~/my-scripts zsh)"
</code></pre></div></div>

<p>where</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">my-commands</code> is the command you want to make (I recommend a short, 1-2 character acronym to not type a lot).</li>
  <li><code class="language-plaintext highlighter-rouge">~/my-scripts</code> is the directory with the scripts and directories.</li>
  <li><code class="language-plaintext highlighter-rouge">zsh</code> should be replaced with the shell you are invoking.</li>
</ul>

<p>In particular I’m very happy with the choice of Rust: it enables fairly portable static binaries, as well as a significant boost in performance:</p>

<p>Example of calling help using tome (rust):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ time s
real    0m0.003s
user    0m0.003s
sys     0m0.000s
</code></pre></div></div>

<p>Recall the 100ms+ time when using sub above.</p>

<p>One of the last things I did before I left Zillow was switch us over to use Tome, although in the 2 years since then It could very well be that Zillow-bootstrap use has decreased significantly: the Zillow tech stack was rapidly modernizing, and then eliminated the need for many of the scripts that were used to bootstrap the dev environment.</p>

<h2 id="conclusion">Conclusion</h2>

<ul>
  <li>Tome was inspired by Sub, which was heavily used at Zillow.</li>
  <li>There were some difficulties in development and shortcomings in features.
    <ul>
      <li>Using bash as the language it was written in had performance and maintenance overhead.</li>
      <li>It was built to be forked, which made it difficult to keep forked command up to date.</li>
    </ul>
  </li>
  <li>Tome was written to address those, and has much lower performance overhead as well as features like Fish completion!</li>
</ul>

<p>That’s it! Please give Tome a try.</p>]]></content><author><name></name></author><category term="coding" /><category term="my-projects" /><summary type="html"><![CDATA[Today I’m happy to introduce Tome, a CLI generator that takes directories of shell scripts and bundles them under a single command, complete with auto-completion, help text, and more.]]></summary></entry><entry><title type="html">Setting the Google Chrome file manager on Linux</title><link href="https://y.tsutsumi.io/setting-google-chrome-file-manager-linux/" rel="alternate" type="text/html" title="Setting the Google Chrome file manager on Linux" /><published>2022-08-07T07:00:00+00:00</published><updated>2022-08-07T07:00:00+00:00</updated><id>https://y.tsutsumi.io/chrome-file-manager</id><content type="html" xml:base="https://y.tsutsumi.io/setting-google-chrome-file-manager-linux/"><![CDATA[<p>I’ve recently had trouble with saving files from Google Chrome: rather than use the file manager that I had configured and installed myself (thunar), Google Chrome gave me a completely different file manager, one that would not let me type the name of the file I wanted to save, and instead
constantly brought me to a search bar.</p>

<p>In most other apps, thunar was used. That is because I have xdg-mime for <code class="language-plaintext highlighter-rouge">inode/directory</code> set to thunar:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>xdg-mime query default "inode/directory"
Thunar.desktop
</code></pre></div></div>

<p>But Chrome doesn’t seem to honor that. I came to learn that Chrome will, for GTK desktop environments, us the GTK file manager, which had the bug I mentioned above.</p>

<p>I tried a few things, which did not change the file manager from GTK:</p>

<ul>
  <li>uninstalled thunar, and installed <a href="https://apps.kde.org/dolphin/">dolphin</a> to see if it’s an issue with the file manager.</li>
  <li>use <code class="language-plaintext highlighter-rouge">XDG_CURRENT_DESKTOP=kde</code> to see if Chrome is using that setting to find dolphin.</li>
</ul>

<p>However, I eventually found out about <a href="https://www.reddit.com/r/openSUSE/comments/pjuf27/leap_fix_gtk_file_dialog_in_recent_version_of/">xdg-desktop-portal</a>, and a user bringing up that KDE no longer had the write file picker, either.</p>

<p>So it seems that Chrome somehow uses xdg-desktop-portal. Looking it up, <a href="https://github.com/flatpak/xdg-desktop-portal">xdg-desktop-portal</a> seems to be primarily used for flatpaks, but does provide a Dbus interface for which an application in a sandboxed application could communicate to applications in the host (e.g. a file manager).</p>

<p>I didn’t <a href="https://source.chromium.org/search?q=xdg-desktop-portal&amp;sq=&amp;ss=chromium%2Fchromium%2Fsrc">find any hard evidence that xdg-desktop-portal</a> was used in this fashion, but it does seem that the <a href="https://source.chromium.org/search?q=%22org.freedesktop.portal.Desktop%22&amp;ss=chromium%2Fchromium%2Fsrc">dbus interfaces exposed by the portal are used in some situations</a>.</p>

<p>The next step was to get my desktop to use one of the variants of xdg-desktop-portal. The design is a little limiting in that xdg-desktop-portal has profiles for specific desktop environments and not a per-unit customizable interface that would work better for my bespoke environment. However, since I had started installng KDE components anyway, the final step for me was to install the packages necessary to completely this KDE-like environment. On Arch Linux, that was:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pacman -S kdialog
pacman -S xdg-desktop-portal-kde
pacman -S xdg-desktop-portal
</code></pre></div></div>

<p>And that’s it! Here’s the end result:</p>

<p><img src="chrome-with-dolphin.png" alt="picture of chrome using dolphin" /></p>]]></content><author><name></name></author><category term="google-chrome" /><summary type="html"><![CDATA[I’ve recently had trouble with saving files from Google Chrome: rather than use the file manager that I had configured and installed myself (thunar), Google Chrome gave me a completely different file manager, one that would not let me type the name of the file I wanted to save, and instead constantly brought me to a search bar.]]></summary></entry><entry><title type="html">Flashing the HotDox V2</title><link href="https://y.tsutsumi.io/flashing-hotdox-v2/" rel="alternate" type="text/html" title="Flashing the HotDox V2" /><published>2022-07-19T07:00:00+00:00</published><updated>2022-07-19T07:00:00+00:00</updated><id>https://y.tsutsumi.io/flashing-hotdox-v2</id><content type="html" xml:base="https://y.tsutsumi.io/flashing-hotdox-v2/"><![CDATA[<p>I purchased a <a href="https://kono.store/products/ergodox-76-hot-dox-mechanical-keyboard-v2">HotDox V2</a>, which has been great:</p>

<ul>
  <li>The keyboard has LEDs! if that’s your thing.</li>
  <li>Left and right sides can be used independently.</li>
  <li>LCD screen show you the layer you’re in.</li>
</ul>

<p>But I accidentally flashed it with the HotDox V1 firmware, and needed to flash it back.</p>

<p>The steps are pretty simple:</p>

<ol>
  <li>Get the HotDox V2 firmware. I had to e-mail kono directly at support@kono.store.</li>
  <li>press the reset button on the side you’re flashing(different sides different firmwares)</li>
  <li>Erase the firmware with dfu-programmer:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> dfu-programmer atmega32u4 erase
</code></pre></div>    </div>
  </li>
  <li>Flash the firmware (example has the right side)
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> dfu-programmer atmega32u4 flash hotdox76v2_rightkb_via.hex
</code></pre></div>    </div>
  </li>
</ol>

<p>And that’s it!</p>]]></content><author><name></name></author><category term="keyboard" /><summary type="html"><![CDATA[I purchased a HotDox V2, which has been great:]]></summary></entry><entry><title type="html">Don’t introduce a V2 API</title><link href="https://y.tsutsumi.io/no-v2-apis/" rel="alternate" type="text/html" title="Don’t introduce a V2 API" /><published>2022-05-01T07:00:00+00:00</published><updated>2022-05-01T07:00:00+00:00</updated><id>https://y.tsutsumi.io/no-v2-apis</id><content type="html" xml:base="https://y.tsutsumi.io/no-v2-apis/"><![CDATA[<p>It’s time for a blanket statement: <strong>users will prefer improving extending existing API versions over adopting a new version due to a backwards-incompatible change</strong>.</p>

<p>The reason: the cost to the user to start using the next version of the API is larger than any value they would derive from that next version alone (e.g. sans new features).</p>

<p>Let’s break this down.</p>

<h2 id="definitions">Definitions</h2>

<p>For the context of this article, I wanted to scope the conversation with the following terms:</p>

<ul>
  <li>API: I’m really talking about <strong>remote</strong> APIs: any programming interface that is performing a remote procedure call. The simplest example is HTTP + JSON, so I’ll be using that for the rest of this article.</li>
</ul>

<h2 id="what-types-of-changes-require-a-new-api-version">What types of changes require a new API version</h2>

<p>Generally speaking, a new API version should only be published in the case where the API author needs to introduce a backwards-incompatible change (e.g. a <a href="https://semver.org/">semver</a>-like convention). The scope of a backwards-incompatible change varies depending on the context, but examples include:</p>

<ul>
  <li>Renaming a field.</li>
  <li>Modifying the schema of an object.</li>
  <li>Introducing entirely new conventions and handling of values.</li>
</ul>

<p>The motivation for a new API when introducing breaking changes is reasonable: API authors should build trust with their users by providing a mechanism to notify them when there is a need for them to change their code to interface with said API. Versioning makes the choice on the user explicit to upgrade.</p>

<h2 id="but-api-migration-is-expensive-for-customers">But API migration is expensive for customers</h2>

<p>The challenge comes in the logistics of the users upgrading their clients.</p>

<p>Often API authors can find themselves sufficiently removed from the problem of dealing with the churn of API upgrades, and get an unrealistic idea of the cost of the API migration.</p>

<p>Some of the reasons upgrades can become expensive are outlined below.</p>

<h3 id="tightly-coupled-dependencies-requiring-lockstep-upgrades">Tightly coupled dependencies requiring lockstep upgrades</h3>

<p>Clients and SDKs to interface with APIs are often not written in a highly modular fashion: instead, they are whole surfaces that must be upgraded, such as with all the APIs on a cloud like AWS or GCP, or for all services offered by a platform like Stripe.</p>

<p>The breadth of this surface often means that you update your code for multiple different clients at once, often unrelated to the one service or tool that you want to use.</p>

<h3 id="upgrades-can-be-multiple-layers-deep">Upgrades can be multiple layers deep</h3>

<p>In some cases, although the upgrade of the client is trivial, it can be nested a dependency chain that makes upgrades take significantly more effort and time.</p>

<p>For example, consider the usage of a raw SDK, wrapped in a convenience wrapper like a Terraform provider. The sketch could look like:</p>

<ul>
  <li>Raw API.</li>
  <li>Go SDK.</li>
  <li>Terraform provider.</li>
</ul>

<div class="jekyll-diagrams diagrams mermaid">
  <svg id="mermaid-1672533873074" width="100%" xmlns="http://www.w3.org/2000/svg" style="max-width: 434.140625px;" viewBox="0 0 434.140625 54"><style>#mermaid-1672533873074 .label{font-family:trebuchet ms,verdana,arial;color:#333}#mermaid-1672533873074 .node circle,#mermaid-1672533873074 .node ellipse,#mermaid-1672533873074 .node polygon,#mermaid-1672533873074 .node rect{fill:#ececff;stroke:#9370db;stroke-width:1px}#mermaid-1672533873074 .node.clickable{cursor:pointer}#mermaid-1672533873074 .arrowheadPath{fill:#333}#mermaid-1672533873074 .edgePath .path{stroke:#333;stroke-width:1.5px}#mermaid-1672533873074 .edgeLabel{background-color:#e8e8e8}#mermaid-1672533873074 .cluster rect{fill:#ffffde!important;stroke:#aa3!important;stroke-width:1px!important}#mermaid-1672533873074 .cluster text{fill:#333}#mermaid-1672533873074 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:trebuchet ms,verdana,arial;font-size:12px;background:#ffffde;border:1px solid #aa3;border-radius:2px;pointer-events:none;z-index:100}#mermaid-1672533873074 .actor{stroke:#ccf;fill:#ececff}#mermaid-1672533873074 text.actor{fill:#000;stroke:none}#mermaid-1672533873074 .actor-line{stroke:grey}#mermaid-1672533873074 .messageLine0{marker-end:"url(#arrowhead)"}#mermaid-1672533873074 .messageLine0,#mermaid-1672533873074 .messageLine1{stroke-width:1.5;stroke-dasharray:"2 2";stroke:#333}#mermaid-1672533873074 #arrowhead{fill:#333}#mermaid-1672533873074 #crosshead path{fill:#333!important;stroke:#333!important}#mermaid-1672533873074 .messageText{fill:#333;stroke:none}#mermaid-1672533873074 .labelBox{stroke:#ccf;fill:#ececff}#mermaid-1672533873074 .labelText,#mermaid-1672533873074 .loopText{fill:#000;stroke:none}#mermaid-1672533873074 .loopLine{stroke-width:2;stroke-dasharray:"2 2";marker-end:"url(#arrowhead)";stroke:#ccf}#mermaid-1672533873074 .note{stroke:#aa3;fill:#fff5ad}#mermaid-1672533873074 .noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}#mermaid-1672533873074 .section{stroke:none;opacity:.2}#mermaid-1672533873074 .section0{fill:rgba(102,102,255,.49)}#mermaid-1672533873074 .section2{fill:#fff400}#mermaid-1672533873074 .section1,#mermaid-1672533873074 .section3{fill:#fff;opacity:.2}#mermaid-1672533873074 .sectionTitle0,#mermaid-1672533873074 .sectionTitle1,#mermaid-1672533873074 .sectionTitle2,#mermaid-1672533873074 .sectionTitle3{fill:#333}#mermaid-1672533873074 .sectionTitle{text-anchor:start;font-size:11px;text-height:14px}#mermaid-1672533873074 .grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}#mermaid-1672533873074 .grid path{stroke-width:0}#mermaid-1672533873074 .today{fill:none;stroke:red;stroke-width:2px}#mermaid-1672533873074 .task{stroke-width:2}#mermaid-1672533873074 .taskText{text-anchor:middle;font-size:11px}#mermaid-1672533873074 .taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}#mermaid-1672533873074 .taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}#mermaid-1672533873074 .taskText0,#mermaid-1672533873074 .taskText1,#mermaid-1672533873074 .taskText2,#mermaid-1672533873074 .taskText3{fill:#fff}#mermaid-1672533873074 .task0,#mermaid-1672533873074 .task1,#mermaid-1672533873074 .task2,#mermaid-1672533873074 .task3{fill:#8a90dd;stroke:#534fbc}#mermaid-1672533873074 .taskTextOutside0,#mermaid-1672533873074 .taskTextOutside1,#mermaid-1672533873074 .taskTextOutside2,#mermaid-1672533873074 .taskTextOutside3{fill:#000}#mermaid-1672533873074 .active0,#mermaid-1672533873074 .active1,#mermaid-1672533873074 .active2,#mermaid-1672533873074 .active3{fill:#bfc7ff;stroke:#534fbc}#mermaid-1672533873074 .activeText0,#mermaid-1672533873074 .activeText1,#mermaid-1672533873074 .activeText2,#mermaid-1672533873074 .activeText3{fill:#000!important}#mermaid-1672533873074 .done0,#mermaid-1672533873074 .done1,#mermaid-1672533873074 .done2,#mermaid-1672533873074 .done3{stroke:grey;fill:#d3d3d3;stroke-width:2}#mermaid-1672533873074 .doneText0,#mermaid-1672533873074 .doneText1,#mermaid-1672533873074 .doneText2,#mermaid-1672533873074 .doneText3{fill:#000!important}#mermaid-1672533873074 .crit0,#mermaid-1672533873074 .crit1,#mermaid-1672533873074 .crit2,#mermaid-1672533873074 .crit3{stroke:#f88;fill:red;stroke-width:2}#mermaid-1672533873074 .activeCrit0,#mermaid-1672533873074 .activeCrit1,#mermaid-1672533873074 .activeCrit2,#mermaid-1672533873074 .activeCrit3{stroke:#f88;fill:#bfc7ff;stroke-width:2}#mermaid-1672533873074 .doneCrit0,#mermaid-1672533873074 .doneCrit1,#mermaid-1672533873074 .doneCrit2,#mermaid-1672533873074 .doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}#mermaid-1672533873074 .activeCritText0,#mermaid-1672533873074 .activeCritText1,#mermaid-1672533873074 .activeCritText2,#mermaid-1672533873074 .activeCritText3,#mermaid-1672533873074 .doneCritText0,#mermaid-1672533873074 .doneCritText1,#mermaid-1672533873074 .doneCritText2,#mermaid-1672533873074 .doneCritText3{fill:#000!important}#mermaid-1672533873074 .titleText{text-anchor:middle;font-size:18px;fill:#000}#mermaid-1672533873074 g.classGroup text{fill:#9370db;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}#mermaid-1672533873074 g.classGroup rect{fill:#ececff;stroke:#9370db}#mermaid-1672533873074 g.classGroup line{stroke:#9370db;stroke-width:1}#mermaid-1672533873074 .classLabel .box{stroke:none;stroke-width:0;fill:#ececff;opacity:.5}#mermaid-1672533873074 .classLabel .label{fill:#9370db;font-size:10px}#mermaid-1672533873074 .relation{stroke:#9370db;stroke-width:1;fill:none}#mermaid-1672533873074 #compositionEnd,#mermaid-1672533873074 #compositionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1672533873074 #aggregationEnd,#mermaid-1672533873074 #aggregationStart{fill:#ececff;stroke:#9370db;stroke-width:1}#mermaid-1672533873074 #dependencyEnd,#mermaid-1672533873074 #dependencyStart,#mermaid-1672533873074 #extensionEnd,#mermaid-1672533873074 #extensionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1672533873074 .branch-label,#mermaid-1672533873074 .commit-id,#mermaid-1672533873074 .commit-msg{fill:#d3d3d3;color:#d3d3d3}</style><style>#mermaid-1672533873074 {
    color: rgb(0, 0, 0);
    font: normal normal 400 normal 16px / normal "Times New Roman";
  }</style><g transform="translate(-12, -12)"><g class="output"><g class="clusters"></g><g class="edgePaths"><g class="edgePath" style="opacity: 1;"><path class="path" d="M106.96875,39L131.96875,39L156.96875,39" marker-end="url(#arrowhead12)" style="fill:none"></path><defs><marker id="arrowhead12" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g><g class="edgePath" style="opacity: 1;"><path class="path" d="M235.65625,39L260.65625,39L285.65625,39" marker-end="url(#arrowhead13)" style="fill:none"></path><defs><marker id="arrowhead13" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker></defs></g></g><g class="edgeLabels"><g class="edgeLabel" style="opacity: 1;" transform=""><g transform="translate(0,0)" class="label"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel"></span></div></foreignObject></g></g><g class="edgeLabel" style="opacity: 1;" transform=""><g transform="translate(0,0)" class="label"><foreignObject width="0" height="0"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;"><span class="edgeLabel"></span></div></foreignObject></g></g></g><g class="nodes"><g class="node" id="r" transform="translate(63.484375,39)" style="opacity: 1;"><rect rx="5" ry="5" x="-43.484375" y="-19" width="86.96875" height="38"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-33.484375,-9)"><foreignObject width="66.96875" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">RAW API</div></foreignObject></g></g></g><g class="node" id="g" transform="translate(196.3125,39)" style="opacity: 1;"><rect rx="5" ry="5" x="-39.34375" y="-19" width="78.6875" height="38"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-29.34375,-9)"><foreignObject width="58.6875" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">Go SDK</div></foreignObject></g></g></g><g class="node" id="t" transform="translate(361.8984375,39)" style="opacity: 1;"><rect rx="5" ry="5" x="-76.2421875" y="-19" width="152.484375" height="38"></rect><g class="label" transform="translate(0,0)"><g transform="translate(-66.2421875,-9)"><foreignObject width="132.484375" height="18"><div xmlns="http://www.w3.org/1999/xhtml" style="display: inline-block; white-space: nowrap;">Terraform Provider</div></foreignObject></g></g></g></g></g></g></svg>
</div>

<p>In order for the user to finally get the upgraded SDK, they have to update the Go SDK version, and update the Terraform provider it is chained to. Each have their own cost associated, and an incompatible change can leak the cost of the upgrade into every downstream.</p>

<p>Not only does this make upgrades more <strong>costly</strong>, but it can make them take longer: what if the team who upgrades the provider is separate from the team who upgrades the SDK? What if one of those pieces is an open source project that is swamped and slow to respond? This can make a simple code change extend into a multi-week or sometimes multi-month endeavor, including the cost of coordination overhead.</p>

<h2 id="api-upgrades-do-not-benefit-the-end-user">API upgrades do not benefit the end user</h2>

<p>We’ve established that an API upgrade can be expensive. What about the benefits?</p>

<p>The reality is the reasons that engineers often <strong>want</strong> to introduce a new change isn’t particularly valuable for the end user. Let’s look at some of these arguments now.</p>

<h3 id="api-intuitiveness">API intuitiveness</h3>

<p>The most common example of improving usability is renaming a field in an API payload: the previous name didn’t really capture the purpose, so the field should be renamed to something that does.</p>

<p>There’s similar changes in the category as well:</p>

<ul>
  <li>Moving fields from one object to another.</li>
  <li>Gathering a set of fields and interning that into a subobject.</li>
</ul>

<p>The problem is intuitiveness of anything is highly subjective: intuition around a user interface is dependent on the experience that an individual had previously, which itself is dependent on the frequency of an accepted idiom.</p>

<p>Consider the now-famous hamburger icon (≡) or triple dots (⋮) that we see on every website: neither was “intuitive” until they become common in styles guides and applications. Someone viewing these for the first type wouldn’t immediately be able to reason what they mean: they have to be taught.</p>

<p>Therefore, one has to assume that, unless a user can somehow completely intuit the schema of an API, they will be forced to look up <strong>some</strong> form of documentation to be able to use the API.</p>

<p>Even if a user could theoretically intuit the whole API, they will <strong>still</strong> be likely to look it up, and have to verify the meaning of every field: if you had the choice of just looking up what these terms mean or a workflow of guess-and-verify-the-field-does-what-I-think-it-does, many would look up the meaning to save the time spent fiddling with the API if they’re wrong.</p>

<p>Therefore, API intuitiveness is largely irrelevant: <strong>accurate, clear documentation or examples will be more valuable every time</strong>, and comes with zero cost in end-user toil to update their API calls to new schemas or field names.</p>

<h3 id="most-api-changes-can-live-on-the-same-version">Most API changes can live on the same version</h3>

<p>Most API changes can actually live on the same version! In some of the examples above, instead of introducing a new version of an API entirely, one could instead:</p>

<ol>
  <li>Introduce a new field with the new name / schema / behavior.</li>
  <li>Accept both indefinitely, and add validation to make new fields mutually exclusively with any old conflicting fields.</li>
</ol>

<p>This is largely similar to the burden of maintaining multiple version of the API simultaneously, but comes with the benefit that the work is largely <strong>additive</strong>: the work to use a new feature is only the cost of adding support for that field in one’s SDK / library, and is not coupled with other additional burdens that don’t provide immediate value (like refactoring your integration to support some new v2 schema).</p>

<h3 id="new-features">New Features</h3>

<p>Often new APIs versions also become the only way to consume new features in the underlying service: engineers don’t want to have to maintain multiple code paths or update legacy ones to support new features, so new fields will only be introduced in the new API.</p>

<p>However, there is no technical reason why these fields cannot be introduced in the older API versions, and this in turn results additional user friction: the user is made to pay the cost of an expensive upgrade, even to get a single feature flag.</p>

<h2 id="examples-around-the-internet-of-pain-of-migration-costs">Examples around the internet of pain of migration costs</h2>

<p>I think there’s very few tangible examples of someone praising a new API, but there’s a plentiful amount of complaints around an API changing and the users being unhappy with paying the cost to upgrade:</p>

<ul>
  <li><a href="https://steve-yegge.medium.com/dear-google-cloud-your-deprecation-policy-is-killing-you-ee7525dc05dc">Steve Yegge’s blog post on rapid deprecation policies making maintaining project unsustainable.</a></li>
</ul>

<h2 id="summary">Summary</h2>

<ul>
  <li>A new version of an API is expensive for consumers to migrate to.
    <ul>
      <li>Often clients have a much wider surface area than the single API being upgraded, and therefore are that much more expensive to upgrade.</li>
      <li>Clients and SDKs tend to have a chain of dependencies (e.g. wrapped providers or CLIs wrapping SDKs), resulting in significant coordination to support new APIs.</li>
    </ul>
  </li>
  <li>Many of the percieved benefits of new APIs aren’t true in practice
    <ul>
      <li>API changes that are more “intuitive” is highly subjective, and without sufficient standardization will require the user to look up documentation. Documentation is the default fallback and the first things users look at, regardless of schema of the payload.</li>
      <li>New features and fields could be added to the old API without issue.</li>
      <li>Many desired changes can be made incrementally to existing API version, by introducing new fields with mutual exclusivity.</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="coding" /><summary type="html"><![CDATA[It’s time for a blanket statement: users will prefer improving extending existing API versions over adopting a new version due to a backwards-incompatible change.]]></summary></entry><entry><title type="html">SWE tip: ask for help</title><link href="https://y.tsutsumi.io/ask-for-help/" rel="alternate" type="text/html" title="SWE tip: ask for help" /><published>2022-03-26T07:00:00+00:00</published><updated>2022-03-26T07:00:00+00:00</updated><id>https://y.tsutsumi.io/ask-for-help</id><content type="html" xml:base="https://y.tsutsumi.io/ask-for-help/"><![CDATA[<p>One of the most common mistakes I see software engineers make when they start in a role is not reaching out to a teammate sooner: for help, or to throw an idea around.</p>

<p>Here’s some reasons why, especially in a new role, you should ask for help if you get stuck.</p>

<h2 id="the-pros">The Pros</h2>

<h3 id="get-ramped-up-quicker">Get ramped up quicker</h3>

<p>If you’re working in a new tech stack, or on a new team, there’s always going to be some tribal knowledge: information that isn’t stored in any easily searchable system of record, but is readily available in memory from a colleague.</p>

<p>Every team has that extremely esoteric issue that has yet to be documented yet, and it can cause someone new to spin their wheels for days: things like:</p>

<ul>
  <li>A known bug in a dependency that has yet to be fixed.</li>
  <li>A particular error that is caused by a misconfiguration in setup of a local environment.</li>
</ul>

<p>Reaching out as you encounter issues to verify if this is something others have seen can avoid <em>days</em> of time.</p>

<h3 id="you-learn-about-tools-and-techniques">You learn about tools and techniques</h3>

<p>Someone who’s been on the team for a long time will generally have a large collection of command-line tools, browser extensions, and shell scripts to assist with common issues. As someone new to the team, you don’t have that yet, and building those from scratch all by yourself will take time.</p>

<p>Reaching out and seeing how a teammate investigates or fixes an issue can teach you about valuable tools that you may have not been aware of.</p>

<h3 id="learn-about-prior-art">Learn about prior art</h3>

<p>One of the most valuable pieces of knowledge your team has is experience from previous attempts to solve a problem. It’s best to run your ideas to improve the codebase (improved linters, or perhaps a refactor of a particularly hairy piece of code) by someone on the team to see if it hasn’t already been tried.</p>

<h2 id="the-cons">The cons</h2>

<h3 id="losing-out-on-learnings-from-struggling">Losing out on learnings from struggling</h3>

<p>Sometimes, struggling through an issue is good:</p>

<ul>
  <li>You learn techniques that you wouldn’t have otherwise.</li>
  <li>You’ll need read through and understand a technology deeply to diagnose.</li>
  <li>You’ll improve your search-foo and debugging skillset.</li>
</ul>

<p>And reaching out too quickly can rob you of that opportunity.</p>

<h3 id="randomizing-colleagues">Randomizing colleagues</h3>

<p>Asking your team does come with a cost: it can randomize your teammates from their work.</p>

<p>But consider the cost benefit: ultimately, it benefits the team to have a productive member of the team more than a few one-time randomization costs. The contribution you make as you add new features, fix bugs, and contribute new ideas will easily pay off the hours it takes the other engineers to answer your question.</p>

<p>If you’re really worried about randomizing the team, consider asking questions at dedicated times or around regular events that are already randomizing like standups or sprint planning.</p>

<h2 id="the-compromise-timebox-then-ask">The compromise: timebox then ask</h2>

<p>To try to strike the balance of reaching out and solving problems yourself, try <strong>timeboxing</strong> your investigations: give yourself a set time to investigate and unblock yourself, and ask if you’re still stuck when time is up.</p>

<p>Setting an upper limit on an investigation helps you stay productive while not bugging your colleages too much. Without a timebox, you can get lost in investigation indefinitely: who hasn’t had a bug that they fixed and felt great about, but felt like they took a bit too long?</p>

<h2 id="summary-asking-for-help-is-a-good-thing">Summary: asking for help is a good thing</h2>

<ul>
  <li>Timebox your investigations: once you hit your limit on investigation, ask for help.</li>
  <li>Reaching out can help you ramp up quicker.
    <ul>
      <li>Ramping up quicker is better for your team.</li>
    </ul>
  </li>
  <li>Reaching out helps you learn tools and techniques you may not learn otherwise.</li>
  <li>Reaching out can save you days to re-learn knowledge or learnings your team may already have.</li>
</ul>]]></content><author><name></name></author><category term="swe-tip" /><summary type="html"><![CDATA[One of the most common mistakes I see software engineers make when they start in a role is not reaching out to a teammate sooner: for help, or to throw an idea around.]]></summary></entry><entry><title type="html">Walking desk treadmill</title><link href="https://y.tsutsumi.io/walking-desk-treadmill/" rel="alternate" type="text/html" title="Walking desk treadmill" /><published>2022-01-19T07:00:00+00:00</published><updated>2022-01-19T07:00:00+00:00</updated><id>https://y.tsutsumi.io/walking-desk-treadmill</id><content type="html" xml:base="https://y.tsutsumi.io/walking-desk-treadmill/"><![CDATA[<p>With work from home becoming a likely permanent fixture of my life, and being in front of my computer 8 hours accompanying that, I’ve been looking at ways to try get some exercise in.</p>

<p>So I got a walking treadmill for under my desk.</p>

<p><img src="treadmill-desk.jpg" alt="picture of my treadmill desk setup" /></p>

<h2 id="background">Background</h2>

<p>I’ve been using a standing desk for about 18 months. However, it’s been very difficult to stand for the whole time. My feet would hurt, or I would get restless.</p>

<p>Eventually to help I got a tall office chair, and alternated between that and standing. However, I’d often contort myself in the office chair, and would end up sitting with poor posture for long periods of time.</p>

<p>In addition I’m often in meetings rather than doing deep work, and it’s difficult to sit through meetings for prolonged periods of time. I would get fidgity or find myself drifting to activities on my other monitor, which made me a worse participant in meetings.</p>

<p>I thought that the regular motion required with a walking treadmill would help with my concentration, and keep my body moving throughout the day.</p>

<h2 id="the-treadmill">The Treadmill</h2>

<p>I purchased the <a href="https://www.amazon.com/gp/product/B08FCFYHKL/ref=ppx_yo_dt_b_search_asin_title">Goplus 2 in 1 treadmill</a>.</p>

<h3 id="weight">Weight</h3>

<p>My original goal was to find a treadmill that was light enough that I can move in and out of my desk. the Goplus was one of the lightest I can find, but at 70 pounds, it wasn’t particularly easy to move around. I now leave it under my desk and walk or stand the whole time.</p>

<h3 id="track-area">Track Area</h3>

<p>The dimensions of the walking area is important: it’ll be your walking surface for multiple hours at a time.</p>

<p>The Goplus has an area of 40” by 16”. The 16” isn’t very wide: I’ve had to rotate my hips much more than I would normally when walking. The 40” length hasn’t really been an issue, but doesn’t leave a significant amount of slack.</p>

<h2 id="the-shoes">The Shoes</h2>

<p>When I first walked on my treadmill, I did so in socks, and my feet really started to hurt after 3-4 hours. I tried some <a href="https://www.amazon.com/gp/product/B01N4W17YA/ref=ppx_yo_dt_b_search_asin_title">slip on loafers</a> and it’s helped a lot.</p>

<h2 id="foot-pain">Foot pain</h2>

<p>Since I’ve been using the shoes, I have been able to walk for about 1.5-2 hours without much issue: during days where I’m in meetings all day I don’t really notice fatigue from walking.</p>

<p>The foot pain walking with shoes is actually must lower than standing: I think this is because walking forces you to rotate where the pressure is on your feet, which naturally prevents prolonged stress on any one part.</p>

<h2 id="impact-on-focus">Impact on focus</h2>

<p>Walking in meetings has helped me significantly with focus. The movement prevents me from fidgiting, and the constant use of my mental capacity to walk gives me no choice to focus on only one other task: the meeting itself.</p>

<h2 id="the-routine">The routine</h2>

<p>I started in December at the default pace of 0.6 miles per hour. Over the course of a month, I’ve gone up to walking 0.8 comfortably. And I think I may be able to walk faster.</p>

<p>My routine has a natural break in the middle for lunch: so I walk 2-3 hours in the morning (hopping off a couple of times for snack or bathroom breaks), take the 1 hour break for lunch, and then another 3-4 hours before signing off for the day.</p>

<p>After a couple of weeks, I can do the whole day without a break, but my legs do feel sore and I generally sit or lie down to give my legs rest after work for about an hour. After the break I sometimes hop right back on to do some personal computing tasks: the long stretches that are the most difficult.</p>

<h2 id="what-i-would-do-differently-next-time">What I would do differently next time</h2>

<ul>
  <li>16” for width on a treadmill is uncomfortable, for my 6’ frame. I would get a wider treadmill.</li>
</ul>

<h2 id="energy-after-work">Energy after work</h2>

<p>I have more energy after walking all day, and during meetings: I feel more alert since the constant exercise helps keep my blood pumping, and in the same way I feel more energetic after a hard workout, I notice I have more energy after walking.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Although I originally felt a walking treadmill was an excessive addition to my setup, it has helped alleviate a lot of the problems I faced when working in front of my desk for eight hours a day.</p>

<p>After about a month, it feels more natural to me that sitting, and it has had positive impact on my health, both physically and mentally.</p>]]></content><author><name></name></author><category term="gear" /><category term="treadmill" /><summary type="html"><![CDATA[With work from home becoming a likely permanent fixture of my life, and being in front of my computer 8 hours accompanying that, I’ve been looking at ways to try get some exercise in.]]></summary></entry><entry><title type="html">Solving the Four Wizards Puzzle</title><link href="https://y.tsutsumi.io/puzzles/four-wizards" rel="alternate" type="text/html" title="Solving the Four Wizards Puzzle" /><published>2022-01-05T07:00:00+00:00</published><updated>2022-01-05T07:00:00+00:00</updated><id>https://y.tsutsumi.io/puzzles/solving-the-wizards-puzzle</id><content type="html" xml:base="https://y.tsutsumi.io/puzzles/four-wizards"><![CDATA[<p>This is a solution to the “Four Wizards” puzzle. Credit for the puzzle goes to <a href="https://blog.tanyakhovanova.com/2021/12/four-wizards/">Tanya Khovanova</a>, who found it on Facebook.</p>

<p>The puzzle itself is inlined for convenience:</p>

<h2 id="wizards-puzzle-statement">Wizards Puzzle Statement</h2>

<p>Four wizards A, B, C, and D, were given three cards each. They were told that the cards had numbers from 1 to 12 written without repeats. The wizards only knew their own three numbers and had the following exchange.</p>

<p>A: “I have number 8 on one of my cards.”</p>

<p>B: “All my numbers are prime.”</p>

<p>C: “All my numbers are composite. Moreover, they all have a common prime factor.”</p>

<p>D: “Then I know the cards of each of you.”</p>

<p>Given that every wizard told the truth, what cards does A have?</p>

<h2 id="reasoning">Reasoning</h2>

<p>This problem is a great example of deductive reasoning. First, let’s define some terms.</p>

<blockquote>
  <p>A “composite” number is one that comprises of multiple smaller numbers, excluding 1. Therefore, any non-prime, non-1 number is a composite.</p>
</blockquote>

<p>Note that C’s cards have to share a common prime factor. Since the numbers only go up to 12, the prime factor options are 2 and 3. A hand that shares a prime factor of 5 would be {5,10,15}, and 15 isn’t a valid card.</p>

<p>With that, we can outline the possible candidates for the cards in each players hands:</p>

<ul>
  <li>A: definitely 8, possibly 1,2,3,4,5,6,7,9,10,11,12</li>
  <li>B: possibly 2,3,5,7,11</li>
  <li>C: 3 out of the set of {6,9,12} (composites of 3) or {4,6,10,12} (composites of 2)</li>
  <li>D: possibly: 1,2,3,4,5,6,7,9,10,11,12</li>
</ul>

<p>In order for player D to be able to deduct that hands of A, B, and C, they have to have cards in their hand that allow them to rule out all but one possibility for the other’s hands. This means that player D must have cards in their hand that overlap with possible cards of A, B, and C.</p>

<p>Let’s start with what cards could remove options for player C. Enumerating cards that C and D could both have:</p>

<ul>
  <li>D has 6: rules out composites of 3, C must have {4,10,12}</li>
  <li>D has 9 or 12: rules out composites of 3, C must have 3 of {4, 6, 10,12}</li>
  <li>D has 2 of 4, 6, 10, or 12: rules out composites of 2, leaves composites of 3.</li>
</ul>

<p>Out of these options, the option that uses the least cards in D’s hands to uniquely identify C’s hand is one card with the value 6: this means C must have {4, 10, 12}.</p>

<p>If we make that assumption, then that leaves 2 cards in D’s hand to uniquely identify B and A’s hand.</p>

<p>Note that for B, there are 5 possible prime numbers. If we take any 2 and put them in D’s hand, then we know what cards are in B’s hand. Note that we don’t need to what the <em>precise</em> primes are in B and D’s hands: we just need to know that, if D had two prime cards in their hand, then they would be able to deduce the three primes in B’s.</p>

<p>So with the D’s hand of 6 and 2 prime numbers, we know exactly what is in B and C’s hands. That leaves A.</p>

<p>Among the set of possibilities that A has:</p>

<blockquote>
  <p>{8} + 2 x {1,2,3,4,5,6,7,9,10,11,12}</p>
</blockquote>

<p>We can remove 6 and {4,10,12} that we derived from player C:</p>

<blockquote>
  <p>{8} + 2x {1,2,3,6,7,9,11}</p>
</blockquote>

<p>And remove all the prime numbers since they will be in either B or D’s hand:</p>

<blockquote>
  <p>{8} + 2x {1,9} = {1,8,9}</p>
</blockquote>

<p>And figure out that A has the cards 1,8 and 9.</p>

<h2 id="solution">Solution</h2>

<p>In summary, the solution is 1,8 and 9. Note that since the question doesn’t ask what cards are in the hands of the other players, there are multiple permutations of cards that could satisfy the problem: namely, the primes can be distributed freely as long as 3 are in B’s hand and 2 are in D’s.</p>]]></content><author><name></name></author><category term="math" /><category term="puzzle" /><summary type="html"><![CDATA[This is a solution to the “Four Wizards” puzzle. Credit for the puzzle goes to Tanya Khovanova, who found it on Facebook.]]></summary></entry><entry><title type="html">My year in words: 2021</title><link href="https://y.tsutsumi.io/my-year/2021" rel="alternate" type="text/html" title="My year in words: 2021" /><published>2021-12-31T07:00:00+00:00</published><updated>2021-12-31T07:00:00+00:00</updated><id>https://y.tsutsumi.io/my-year/my-year-in-words-2021</id><content type="html" xml:base="https://y.tsutsumi.io/my-year/2021"><![CDATA[<h1 id="my-year-in-words-2021">My year in words: 2021</h1>

<h2 id="more-working-remotely">More working remotely</h2>

<p>This year, Google continued it’s optional remote policy, and I continued to opt to work from home a vast majority of the time (I’ve been to the office twice this year).</p>

<p>I’m not strongly opinionated on where I work, but I’ve found I’m highly productive at home: aside from what I mentioned last year with asynchronous communication, I can really maximize my ergonomic setup with equipment that I could never support at the office.</p>

<p>For example, I added a walking treadmill to my setup a couple weeks ago, which has already proven to be a great way to get exercise in and help me stay focused during the multiple meetings I’m attending.</p>

<h2 id="stepping-down-from-opentelemetry">Stepping down from OpenTelemetry</h2>

<p>All good things must come to an end. In January, I stepped down as approver of the opentelemetry-python project. The project as a whole is making amazing progress, and I’m honored to have contributed a small amount.</p>

<h2 id="started-learning-farsi">Started learning Farsi</h2>

<p>My Japanese has improved a bit over the past couple of years, and I felt it was time to pick up Farsi.</p>

<p>I started my lessons in the middle of the year, and I’ve already felt like I’ve progressed significantly. I’m doing weekly lessons with a teacher I found via italki.</p>

<h2 id="continuing-to-learn-japanese">Continuing to learn Japanese</h2>

<p>As my Japanese has progressed quite a bit, I didn’t focus a lot of time on it. I’ve been able to consume most Japanese media and only look up a handful of words every time.</p>

<p>I don’t plan on investing heavily further, beyond continuing to write down vocabularly I don’t know on flash cards and memorize them. I’ve been watching TV such as Hanzawa Naoki and playing games like Judgement. I’m happy with where I’m at, and think the incremental progress I’m making here won’t be worth noting for future years.</p>

<h2 id="diet-continuing-the-vegan-and-low-calorie-path">Diet continuing the vegan and low calorie path</h2>

<p>Last year, I began the transition to a mostly vegan diet, and I’ve attempted to keep that up this year.</p>

<p>I got to the point of two out of three meals a day being vegan (oatmeal and some nuts for breakfast, and <a href="https://huel.com/">huel</a> for lunch), with a pretty random meal in the evening, generally involving some dairy (primarily cheese).</p>

<p>In particular, the breakfast of oatmeal and the lunch of Huel’s Hot and Savory were particularly effective in helping me with better eating habits. The two combined were roughly 800 calories, which, calibrated at a 2000 calorie-a-day target, resulted in 1200 calories that could be used toward my dinner or snacks in between.</p>

<p>The diet also did help curve my cravings for sweets a tiny bit. However, I still haven’t progressed much on eliminating excess sugar from my diet: my sweet tooth is hard to curb.</p>

<h2 id="small-technical-contributions">Small technical contributions</h2>

<p>My free time was mostly focused on my language learning (along with other responsibilities like raising my kids), but I did have some time to play around with some minor technical things:</p>

<ul>
  <li>I migrated some of my Python projects from my own Uranium build system to Make and pyproject.toml-based projects</li>
  <li>authored <a href="https://github.com/toumorokoshi/mem-xrandr">mem-xrandr</a> to help me with switching displays.</li>
  <li>Migrated a personal project from ECS to GKE.</li>
  <li><a href="https://github.com/kubernetes/kubernetes/pull/100324">merged my first PR into Kubernetes!</a>.</li>
</ul>

<h2 id="goals-for-2022">Goals for 2022</h2>

<p>2022 will continue to be a year with fairly conservative goals: language learning in particular is considerably more time consuming than I predicted, and I’d like to keep some buffer room in case more difficult tasks pop up to achieve my goal of fluency in Farsi and Japanese.</p>

<p>For 2022, my goals are:</p>

<ul>
  <li>Improve my Farsi (1 1-hour lesson a week, homework, and memorize flash cards).</li>
  <li>Continue to consume Japanese books, TV, and games to add new vocabularly.</li>
  <li>Eliminate excessive added sugar from my regular diet. My goal is to be below 15 grams of added sugar most days.</li>
  <li>Produce no plastic waste on a normal day for my daily routine (just for items I consume personally, like coffee from a stand).</li>
  <li>Finish up <a href="https://github.com/toumorokoshi/tome">tome</a> and start evangelizing it more.</li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>2021 feels like a continuation of 2020 in many ways. But I’m optimistic for 2022: we have to continue to adjust with the world that we live in, and continue to progress toward the next goal of our lives.</p>

<p>Happy New Year!</p>]]></content><author><name></name></author><category term="2021" /><category term="reflection" /><summary type="html"><![CDATA[My year in words: 2021]]></summary></entry><entry><title type="html">Fixing my GPU fan spinning when my laptop sleeps with an eGPU</title><link href="https://y.tsutsumi.io/egpu-gpu-fan-on-sleep/" rel="alternate" type="text/html" title="Fixing my GPU fan spinning when my laptop sleeps with an eGPU" /><published>2021-10-30T07:00:00+00:00</published><updated>2021-10-30T07:00:00+00:00</updated><id>https://y.tsutsumi.io/egpu-gpu-fan-on-sleep</id><content type="html" xml:base="https://y.tsutsumi.io/egpu-gpu-fan-on-sleep/"><![CDATA[<p>Whenever I suspend my Linux machine attached to an eGPU, the GPU in my eGPU would start spinning it’s fan like crazy.</p>

<p>I <em>think</em> it’s because it’s doing some intensive operation, like an aggressive try loop because it can’t connect to the direct device.</p>

<p>I couldn’t figure out how to get the eGPU to do something different, so I started looking at the Linux Kernel.</p>

<p><a href="https://01.org/linuxgraphics/gfx-docs/drm/admin-guide/pm/sleep-states.html">This guide on Linux explains the various sleep states and what they do</a>. I figured out that mine were:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cat /sys/power/mem_sleep
[s2idle] deep
</code></pre></div></div>

<p>Which means that by default, my systemd would be sleep to idle, moving devices to low power mode.</p>

<p>I noticed that my Linux installation also supported <code class="language-plaintext highlighter-rouge">deep</code>: in other words: suspend to ram.</p>

<p>I configured <code class="language-plaintext highlighter-rouge">mem_sleep</code> to use deep rather than s2idle:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sudo bash -c 'echo "deep" &gt; /sys/power/mem_sleep'
</code></pre></div></div>

<p>And suspend my machine:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo bash -c 'echo "mem" &gt; /sys/power/state'
</code></pre></div></div>

<p>That did it! No more spinning fan.</p>

<p>The mem sleep type also seems to be what systemd uses for it’s <code class="language-plaintext highlighter-rouge">suspend</code> command, so changing that <code class="language-plaintext highlighter-rouge">mem_sleep</code> config will help that as well.</p>]]></content><author><name></name></author><category term="egpu" /><category term="gpu" /><summary type="html"><![CDATA[Whenever I suspend my Linux machine attached to an eGPU, the GPU in my eGPU would start spinning it’s fan like crazy.]]></summary></entry></feed>