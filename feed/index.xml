<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://y.tsutsumi.io/feed/index.xml" rel="self" type="application/atom+xml" /><link href="https://y.tsutsumi.io/" rel="alternate" type="text/html" /><updated>2024-11-08T00:41:40+00:00</updated><id>https://y.tsutsumi.io/feed/index.xml</id><title type="html">Yusuke Tsutsumi</title><subtitle>My blog on software, productivity, and obsessively optimizing. I work at Google, ex-Zillow. Thoughts my own.</subtitle><entry><title type="html">AEPCLI’s design decisions</title><link href="https://y.tsutsumi.io/aepcli-design/" rel="alternate" type="text/html" title="AEPCLI’s design decisions" /><published>2024-10-22T07:00:00+00:00</published><updated>2024-10-22T07:00:00+00:00</updated><id>https://y.tsutsumi.io/aepcli-thoughts</id><content type="html" xml:base="https://y.tsutsumi.io/aepcli-design/"><![CDATA[<h1 id="aepclis-design-decisions">aepcli’s design decisions</h1>

<h2 id="background">Background</h2>

<p>In my spare time, I work on <a href="https://aep.dev/">aep.dev</a>, an resource-oriented
API design specification. We’ve done a lot of work around standarization, like
<a href="https://aep.dev/121/">updating guidance on resource-oriented design</a>, fleshing
out standard
<a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUDL</a> methods, and design patterns.</p>

<p>I wanted to really prove out that those patterns and consistency could be used
to create powerful clients, so I’ve been working on
<a href="https://github.com/aep-dev/aepcli">aepcli</a>: a command-line interface to APIs
that can consume AEP-compliant HTTP+JSON APIs.</p>

<p>I’ve had some design musings as I’ve been writing it, and I wanted to expand on
some here.</p>

<h2 id="installing-aepcli">Installing aepcli</h2>

<p>If you’d like to follow along (<em>warning</em>: it is a very early alpha as of
2024-10-19), you can install aepcli yourself.</p>

<p>See <a href="https://github.com/aep-dev/aepcli">the readme</a> for the latest instructions,
but as of the moment the installation method is a <code class="language-plaintext highlighter-rouge">go install</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>go <span class="nb">install </span>github.com/aep-dev/aepcli/cmd/aepcli@latest
</code></pre></div></div>

<h2 id="overall-design">Overall design</h2>

<p>aepcli is heavily inspired by
<a href="https://kubernetes.io/docs/reference/kubectl/">kubectl</a> - itself a command-line
interface that is able to interact with a heterogenous collection of resources (those exposed by the Kubernetes API server). It has been a great reference when designing aepcli.</p>

<h2 id="consuming-an-openapi-definition">Consuming an OpenAPI definition</h2>

<p>aepcli does not need to re-invent the wheel and use new API document syntax -
<a href="https://spec.openapis.org/oas/latest.html">The OpenAPI Specification</a> is
descriptive enough (with the appropriate
<a href="https://aep.dev/4/#annotating-resource-types">extensions</a>) to describe the
resources and operations supported.</p>

<p>This is also similar to how kubectl works - reading and caching an OpenAPI
definition exposed by the Kubernetes api server. For aepcli, the location of the
definition is required, so the path is first positional argument, no matter the
command:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aepcli https://bookstore.example.com/openapi.json publishers list
</code></pre></div></div>

<p>The first argument accepts either a URL, or a local file path: this is helpful
in the situation where the API itself does not expose an OpenAPI definition, and
you need to write one yourself. Or better yet, generate one with
<a href="https://github.com/aep-dev/aepc">aepc</a>!</p>

<h2 id="adding-a-config-file">Adding a config file</h2>

<p>It’s a little cumbersome to add configuration for aepcli every time. In
addition, it doesn’t look particularly elegant to include a URL/filename on
every invocation.</p>

<p>Kubectl has the concept of a <a href="https://kubernetes.io/docs/reference/kubectl/quick-reference/#kubectl-context-and-configuration">context</a>, which helps configure it to the appropriate API server. This allows kubectl to have a one-to-many relationship, being able to operate on multiple different api servers.</p>

<p>So what if we could do that with aepcli? aepcli supports a config file, located at <code class="language-plaintext highlighter-rouge">$HOME/.config/aepcli/config.toml</code> for Linux. You can write something like this:</p>

<div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[apis.roblox]</span>
<span class="py">openapipath</span> <span class="p">=</span> <span class="s">"openapi/roblox.json"</span> <span class="c"># relative paths are taken from the `$HOME/.config/aepcli` directory.</span>
<span class="py">headers</span> <span class="p">=</span> <span class="p">[</span>
    <span class="py">"x-api-key</span><span class="p">=</span><span class="err">${ROBLOX_API_KEY}</span><span class="s">" # add your api key here.</span><span class="err">
</span><span class="p">]</span>
</code></pre></div></div>

<p>And aepcli will let you easily refer to that API by it’s name:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aepcli roblox <span class="nb">users </span>get <span class="k">${</span><span class="nv">USER_ID</span><span class="k">}</span>
<span class="o">{</span>
  <span class="s2">"path"</span>: <span class="s2">"users/</span><span class="k">${</span><span class="nv">USER_ID</span><span class="k">}</span><span class="s2">"</span>,
  <span class="s2">"name"</span>: <span class="s2">"NAME"</span>,
  <span class="s2">"about"</span>: <span class="s2">""</span>,
  <span class="s2">"locale"</span>: <span class="s2">"en_us"</span>,
  <span class="s2">"premium"</span>: <span class="nb">false</span>,
  <span class="s2">"idVerified"</span>: <span class="nb">false</span>
<span class="o">}</span>
</code></pre></div></div>

<p>This makes support of a new API very easy - just write the appropriate entry in
your config, and you’re done!</p>

<p>This one-to-many CLI opens new use cases that other, bespoke CLIs cannot - like
using two APIs together. If you need a user id from an authentication provider,
and want to use that to do a lookup in some other service, you can do something
like:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">USERNAME</span><span class="o">=</span><span class="si">$(</span>aepcli auth-service get <span class="nb">users </span>foo | jq .username<span class="si">)</span>
aepcli docs-service list documents <span class="nt">--user</span><span class="o">=</span><span class="k">${</span><span class="nv">USERNAME</span><span class="k">}</span>
</code></pre></div></div>

<h2 id="client-side-dynamicism-over-code-generation">client-side dynamicism over code generation</h2>

<p>This point is more nuanced - but aepcli explicity chose to generate the CLI
based on an API description schema, instead of opting toward a code-generated
client.</p>

<p>From my time working at cloud companies, a common issue customers encountered
was with upgrading clients. Whether it was a command-line interface, Terraform
provider or SDK, customers would often have to go through painful upgrades to
use new fields exposed in the resources, since those clients were code-generated or hand-written and
only knew about the fields that the API exposed at the time it was authored.</p>

<p>There are multiple reasons why, in a worst case scenario, these upgrades would take months:</p>

<ul>
  <li>Security review.</li>
  <li>Other executive approvals.</li>
  <li>Waiting for a centralized platform team to perform the update, who often have
limited bandwidth due to serving requests across the whole company.</li>
  <li>A change in the client for a separate resource being backwards-incompatible,
requiring updating usages of that other resource to upgrade.</li>
</ul>

<p>These delays are harmful to both sides: inaccessible features for the consumer
and lost revenue for the service provider.</p>

<p>aepcli is fully dynamic - to use a new field, you don’t need to update any
<em>binaries</em> - you just update the OpenAPI document, which is completely in the
control of the consumer. Do you want access to a new field? Just add it to your
local copy of the OpenAPI document.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Although these are some of the big design considerations, there’s dozens of
smaller ones that I’m sure I’ll hash over at some point. If you have ideas or suggestions, please share them! File an issue over at <a href="https://github.com/aep-dev/aepcli/issues">aepcli</a>, or <a href="/about#contact">reach out to me</a>!</p>]]></content><author><name></name></author><category term="coding" /><summary type="html"><![CDATA[aepcli’s design decisions]]></summary></entry><entry><title type="html">Getting mp4s from Steam’s Game Recordings</title><link href="https://y.tsutsumi.io/reading-steam-game-recordings" rel="alternate" type="text/html" title="Getting mp4s from Steam’s Game Recordings" /><published>2024-07-11T07:00:00+00:00</published><updated>2024-07-11T07:00:00+00:00</updated><id>https://y.tsutsumi.io/reading-steam-game-recordings</id><content type="html" xml:base="https://y.tsutsumi.io/reading-steam-game-recordings"><![CDATA[<h2 id="the-punchline">The Punchline</h2>

<p>If you want to cut to the chase, here’s how you can get your stream recording to create a video if the UI isn’t working:</p>

<ol>
  <li>Navigate to your gamerecording/video directory (under <code class="language-plaintext highlighter-rouge">.local/share/Steam/userdata/{id}/gamerecordings/video</code>).</li>
  <li>Find the recording you’re looking for (it’s prefixed by date).</li>
  <li>Run: <code class="language-plaintext highlighter-rouge">ffmpeg -i session.mpd -c copy out.mp4</code></li>
</ol>

<p>And you’re done! There’s <code class="language-plaintext highlighter-rouge">out.mp4</code>.</p>

<h2 id="the-story">The story</h2>

<p>Steam recently came out with their <a href="https://store.steampowered.com/gamerecording">Game Recording</a> feature, which is absolutely amazing! I love the ability to be able to take videos and share them.</p>

<p>I’ve been using it to record videos of <a href="https://childrenofmorta.com/">Children of Morta</a> in Farsi, and watch the videos later as practice for learning the language. To do so, I like to export my videos to disk, and upload them privately to my youtube account.</p>

<p>But sometimes, the UI doesn’t work as expected, and I can’t download the video. So what do you do?</p>

<p>After some spelunking, I came up with the <a href="#the-punchline">instructions above</a>. The long and the short of it is: steam records your game as a stream, using the <code class="language-plaintext highlighter-rouge">.m4s</code> format, and puts the stream information into <code class="language-plaintext highlighter-rouge">session.mpd</code>.</p>

<p>Luckily, .mpd is a native format supported by <code class="language-plaintext highlighter-rouge">ffmpeg </code> for input, so all you need to do is run ffmpeg!</p>

<p>That’s it! Happy clipping.</p>]]></content><author><name></name></author><category term="steam" /><category term="coding" /><summary type="html"><![CDATA[The Punchline]]></summary></entry><entry><title type="html">Reflecting on 2022</title><link href="https://y.tsutsumi.io/my-year/2022" rel="alternate" type="text/html" title="Reflecting on 2022" /><published>2022-12-31T07:00:00+00:00</published><updated>2022-12-31T07:00:00+00:00</updated><id>https://y.tsutsumi.io/my-year/reflecting-on-2022</id><content type="html" xml:base="https://y.tsutsumi.io/my-year/2022"><![CDATA[<p>In the vein of <a href="/my-year/2020">previous</a> <a href="/my-year/2021">years</a>, I wanted to finish up my 2022 with a blog post.</p>

<p>2022 was a largely unventful year for me professionally: my kids are going to new schools and kindergartens, so a lot of my focus was on my family, more or less as planned.</p>

<p>This was also supposed to be a year of finishing up loose ends: I think I have continued to make some progress there.</p>

<h2 id="oss-contributions-in-a-nutshell">OSS Contributions in a nutshell</h2>

<ul>
  <li>Continued to maintain
    <ul>
      <li>jsonschema-extractor</li>
    </ul>
  </li>
  <li>Finished
    <ul>
      <li>tome with a 0.9 effectively final release</li>
    </ul>
  </li>
  <li>Cleaned up the google.cloud Ansible collection.</li>
</ul>

<h2 id="finished-tome">Finished Tome</h2>

<p>I finally shipped <a href="https://github.com/toumorokoshi/tome">a version of tome that I was happy with</a>! This was a side project of mine that was mostly there, I just needed to take it over the finish line.</p>

<p>I’m happy to have done so! Tome helps me in my daily tasks, and maybe it’ll help you too.</p>

<h2 id="updating-cloudgoogles-collection-for-ansible">Updating cloud.google’s collection for Ansible</h2>

<p>Professional needs aligned with my love for Open Source, and I ended up working on the <a href="https://github.com/ansible-collections/google.cloud">cloud.google Ansible provider</a>, bringing it back up to snuff as an Ansible collection certified for ansible-core 2.13 and above.</p>

<p>I’m pretty proud of my work here, totalling <a href="https://github.com/ansible-collections/google.cloud/graphs/contributors">50 commits in 2022Q4</a>:</p>

<ul>
  <li>Proposing the split from the magic-modules repository from which it was based, enabling a handful of PRs and bugfixes to get merged.</li>
  <li>Added continuous integration for integration and sanity tests.</li>
  <li>Fixed the 80+ integration tests that existed.</li>
</ul>

<p>Culminating in the release of <a href="https://galaxy.ansible.com/google/cloud">1.1.2</a>, the first release in almost a year and a half.</p>

<p>Unfortunately my time allotments don’t let me spend that much time on the project, but my intention is to keep it healthy and accept PRs with the new <a href="https://github.com/ansible-collections/google.cloud/blob/master/CONTRIBUTING.md">contribution process documented</a>.</p>

<h2 id="continuing-japanese">Continuing Japanese</h2>

<p>I continue to work on my Japanese, but I think I’ve hit a hard plateau there: I have hundreds of words I still need to learn, and I’m not really remembering any of them with my flash card system.</p>

<p>For next steps, I think I’m going to just continue to grow my Japanese with continued weekly italki classes for speech and reading to try to get to the point where there’s almost no words I don’t know.</p>

<p>I think consuming more TV / Films could be helpful: I don’t get enough exposure from a spoken perspective, to pick up on common conversationalexchanges</p>

<h2 id="continuing-farsi">Continuing Farsi</h2>

<p>My Farsi has been getting better as well: it’s been roughly a year and half since I started to learn.</p>

<p>I can’t say I’ve dedicated a lot of time here, but I’m able to:</p>

<ul>
  <li>read some simple stories by myself.</li>
  <li>understand quite a bit.</li>
  <li>have some basic conversations around family, vacations, etc.</li>
  <li>write very, very slowly.</li>
</ul>

<p>I think with the limited time I have, I won’t make much progress in 2023 either. But as my biggest stumbling block is in vocabularly, I hope to spend a lot of time fleshing that out so I can muddle through conversations.</p>

<h2 id="fitness">Fitness</h2>

<p>I made some minor, but significant strides this year health-wise:</p>

<p>I lost 4 pounds purposefully, from 188 to 184, in 2022Q4. It’s a major step forward for me since I haven’t sucessfully been able to lose weight on purpose before. Although I was down to 190 from 200 right after the pandemic started (presumably due to me eating salads for lunch daily during that time), it wasn’t a purposeful action.</p>

<p>I was able to run a 5k in a single run, and actually even started running 5k’s regularly throughout the week! 18 year old me never even completed the mile run, so to get to a 5k 16 years later is quite an improvement for me.</p>

<p>My focus on a plant-based diet is the same as 2021: I generally eat plant-based meals for most meals in a day. Near the tail end of the year I’ve been focusing on a high-protein, calorie restricted diet with the goal of getting to 15% body fat to start (I was 21% according to a Dexa scan in October).</p>

<p>My diet looks on a regular weekday looks like:</p>

<ul>
  <li>Breakfast: 150 calories, 30g protein of a vegan protein shake.</li>
  <li>Brunch: 150 calorie coffee with Soy (something I’m trying to minimize).</li>
  <li>Lunch: 400 calories, 25G protein (Huel hot and savory).</li>
  <li>Dinner: whatever is on the plate: this is highly varied.</li>
  <li>After dinner: 150 calories, 30g protein  of a vegan protein shake.</li>
</ul>

<p>My goal is to get to 1.5g / protein / KG bodyweight, and also restricting to 1700 calories a day. Generally some sweet or snack gets in the way, but that’s my target.</p>

<h2 id="random-other-things-i-did">Random other things I did</h2>

<ul>
  <li>Set up game streaming from my desktop: with Stadia shutting down, I needed a proper replacment. Turns out Moonlight, A 4 year old nvidia GPU, and a 10 year old desktop is sufficient to run the games I want to! I just stream from my desktop: even on 4G it works with imperceptible lag.</li>
  <li>I learned Shogi and Mahjong, mainly so I could get some achievements in a video game “Judgement”.</li>
</ul>

<h2 id="goals-for-2023">Goals for 2023</h2>

<p>2023 will be another year of conservative goals for me: there’s a lot of family obligations and some random personal dablings I’d like to spend my time with.</p>

<p>That said, there’s some goals I want to continue progress on. Here’s a list:</p>

<ul>
  <li>Consume 20 minutes of Japanese media a day. TV and books mostly (conversational and literacy / vocabulary).</li>
  <li>Be able to watch a Farsi movie and understand a majority of the story.</li>
  <li>Lose fat and gain muscle to get to 12% body fat, validated via a Dexa.</li>
  <li>Finish a long-standing PR to add infinite depth keychords into VSCode.</li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>2022 was again a non-transformative year for me, but making steady, principled progress on my goals has been great.</p>

<p>Happy New Year!</p>]]></content><author><name></name></author><category term="2022" /><category term="reflection" /><summary type="html"><![CDATA[In the vein of previous years, I wanted to finish up my 2022 with a blog post.]]></summary></entry><entry><title type="html">Wake-on-lan via WAN</title><link href="https://y.tsutsumi.io/wake-on-wan" rel="alternate" type="text/html" title="Wake-on-lan via WAN" /><published>2022-09-23T07:00:00+00:00</published><updated>2022-09-23T07:00:00+00:00</updated><id>https://y.tsutsumi.io/wake-on-wan</id><content type="html" xml:base="https://y.tsutsumi.io/wake-on-wan"><![CDATA[<p>I’ve been using <a href="https://moonlight-stream.org/">Moonlight</a> for game streaming, and one thing I’ve learned about recently is <a href="https://wiki.archlinux.org/title/Wake-on-LAN#Trigger_a_wake_up">wake-on-lan</a>: the ability to wake up your machine by sending a magic packet to a device.</p>

<p>I regularly use wake-on-lan on my local network to start up my gaming desktop, but I began to wonder if it’s possible to wake my machine up from the public internet (The “WAN”)? And here is how I got to successfully accomplish a wake-on-wan.</p>

<h2 id="background">Background</h2>

<p>My existing setup already enables me to stream Moonlight over wan. I accomplished that by:</p>

<ul>
  <li>Port forwarding for <a href="https://github.com/moonlight-stream/moonlight-docs/wiki/Setup-Guide#manual-port-forwarding-advanced">all of ports recommended by moonlight</a>.</li>
  <li>Using a dynamic DNS provider (I use tplink, but there’s also <a href="https://www.noip.com/">noip</a>).</li>
</ul>

<h2 id="how-wake-on-lan-works">How wake-on-lan works</h2>

<p>Wake on lan works by sending an ethernet frame with the contents of the MAC address. This is often send to the broadcast IP of a network, ensuring that all devices connected to the network will receive it.</p>

<h2 id="configuring-wake-on-wan">Configuring wake-on-wan</h2>

<p>I originally tried to do direct port forwarding of the UDP 7 through 9 ports, but I found out that my internet provider (Comcast) sometimes does not allow their modem to forward the packet.</p>

<p>As such, I ended up doing a separate port forward from an arbitrary port and mapped it to port 7. And that was it!</p>

<h2 id="troubleshooting">Troubleshooting</h2>

<p>If you have issues, try the following:</p>

<ul>
  <li>verify that the computer wakes if you send it the WOL request directly.</li>
  <li>verify that the computer wakes if you send the broadcast IP (e.g. <code class="language-plaintext highlighter-rouge">255.255.255.255</code>) the request directly.</li>
</ul>]]></content><author><name></name></author><category term="networking" /><summary type="html"><![CDATA[I’ve been using Moonlight for game streaming, and one thing I’ve learned about recently is wake-on-lan: the ability to wake up your machine by sending a magic packet to a device.]]></summary></entry><entry><title type="html">Setting the Google Chrome file manager on Linux</title><link href="https://y.tsutsumi.io/setting-google-chrome-file-manager-linux/" rel="alternate" type="text/html" title="Setting the Google Chrome file manager on Linux" /><published>2022-08-07T07:00:00+00:00</published><updated>2022-08-07T07:00:00+00:00</updated><id>https://y.tsutsumi.io/chrome-file-manager</id><content type="html" xml:base="https://y.tsutsumi.io/setting-google-chrome-file-manager-linux/"><![CDATA[<p>I’ve recently had trouble with saving files from Google Chrome: rather than use the file manager that I had configured and installed myself (thunar), Google Chrome gave me a completely different file manager, one that would not let me type the name of the file I wanted to save, and instead
constantly brought me to a search bar.</p>

<p>In most other apps, thunar was used. That is because I have xdg-mime for <code class="language-plaintext highlighter-rouge">inode/directory</code> set to thunar:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>xdg-mime query default "inode/directory"
Thunar.desktop
</code></pre></div></div>

<p>But Chrome doesn’t seem to honor that. I came to learn that Chrome will, for GTK desktop environments, us the GTK file manager, which had the bug I mentioned above.</p>

<p>I tried a few things, which did not change the file manager from GTK:</p>

<ul>
  <li>uninstalled thunar, and installed <a href="https://apps.kde.org/dolphin/">dolphin</a> to see if it’s an issue with the file manager.</li>
  <li>use <code class="language-plaintext highlighter-rouge">XDG_CURRENT_DESKTOP=kde</code> to see if Chrome is using that setting to find dolphin.</li>
</ul>

<p>However, I eventually found out about <a href="https://www.reddit.com/r/openSUSE/comments/pjuf27/leap_fix_gtk_file_dialog_in_recent_version_of/">xdg-desktop-portal</a>, and a user bringing up that KDE no longer had the write file picker, either.</p>

<p>So it seems that Chrome somehow uses xdg-desktop-portal. Looking it up, <a href="https://github.com/flatpak/xdg-desktop-portal">xdg-desktop-portal</a> seems to be primarily used for flatpaks, but does provide a Dbus interface for which an application in a sandboxed application could communicate to applications in the host (e.g. a file manager).</p>

<p>I didn’t <a href="https://source.chromium.org/search?q=xdg-desktop-portal&amp;sq=&amp;ss=chromium%2Fchromium%2Fsrc">find any hard evidence that xdg-desktop-portal</a> was used in this fashion, but it does seem that the <a href="https://source.chromium.org/search?q=%22org.freedesktop.portal.Desktop%22&amp;ss=chromium%2Fchromium%2Fsrc">dbus interfaces exposed by the portal are used in some situations</a>.</p>

<p>The next step was to get my desktop to use one of the variants of xdg-desktop-portal. The design is a little limiting in that xdg-desktop-portal has profiles for specific desktop environments and not a per-unit customizable interface that would work better for my bespoke environment. However, since I had started installng KDE components anyway, the final step for me was to install the packages necessary to completely this KDE-like environment. On Arch Linux, that was:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pacman -S kdialog
pacman -S xdg-desktop-portal-kde
pacman -S xdg-desktop-portal
</code></pre></div></div>

<p>And that’s it! Here’s the end result:</p>

<p><img src="chrome-with-dolphin.png" alt="picture of chrome using dolphin" /></p>]]></content><author><name></name></author><category term="google-chrome" /><summary type="html"><![CDATA[I’ve recently had trouble with saving files from Google Chrome: rather than use the file manager that I had configured and installed myself (thunar), Google Chrome gave me a completely different file manager, one that would not let me type the name of the file I wanted to save, and instead constantly brought me to a search bar.]]></summary></entry><entry><title type="html">Flashing the HotDox V2</title><link href="https://y.tsutsumi.io/flashing-hotdox-v2/" rel="alternate" type="text/html" title="Flashing the HotDox V2" /><published>2022-07-19T07:00:00+00:00</published><updated>2022-07-19T07:00:00+00:00</updated><id>https://y.tsutsumi.io/flashing-hotdox-v2</id><content type="html" xml:base="https://y.tsutsumi.io/flashing-hotdox-v2/"><![CDATA[<p>I purchased a <a href="https://kono.store/products/ergodox-76-hot-dox-mechanical-keyboard-v2">HotDox V2</a>, which has been great:</p>

<ul>
  <li>The keyboard has LEDs! if that’s your thing.</li>
  <li>Left and right sides can be used independently.</li>
  <li>LCD screen show you the layer you’re in.</li>
</ul>

<p>But I accidentally flashed it with the HotDox V1 firmware, and needed to flash it back.</p>

<p>The steps are pretty simple:</p>

<ol>
  <li>Get the HotDox V2 firmware. I had to e-mail kono directly at support@kono.store.</li>
  <li>press the reset button on the side you’re flashing(different sides different firmwares)</li>
  <li>Erase the firmware with dfu-programmer:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> dfu-programmer atmega32u4 erase
</code></pre></div>    </div>
  </li>
  <li>Flash the firmware (example has the right side)
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> dfu-programmer atmega32u4 flash hotdox76v2_rightkb_via.hex
</code></pre></div>    </div>
  </li>
</ol>

<p>And that’s it!</p>]]></content><author><name></name></author><category term="keyboard" /><summary type="html"><![CDATA[I purchased a HotDox V2, which has been great:]]></summary></entry><entry><title type="html">Don’t introduce a V2 API</title><link href="https://y.tsutsumi.io/no-v2-apis/" rel="alternate" type="text/html" title="Don’t introduce a V2 API" /><published>2022-05-01T07:00:00+00:00</published><updated>2022-05-01T07:00:00+00:00</updated><id>https://y.tsutsumi.io/no-v2-apis</id><content type="html" xml:base="https://y.tsutsumi.io/no-v2-apis/"><![CDATA[<p>It’s time for a blanket statement: <strong>users will prefer improving extending existing API versions over adopting a new version due to a backwards-incompatible change</strong>.</p>

<p>The reason: the cost to the user to start using the next version of the API is larger than any value they would derive from that next version alone (e.g. sans new features).</p>

<p>Let’s break this down.</p>

<h2 id="definitions">Definitions</h2>

<p>For the context of this article, I wanted to scope the conversation with the following terms:</p>

<ul>
  <li>API: I’m really talking about <strong>remote</strong> APIs: any programming interface that is performing a remote procedure call. The simplest example is HTTP + JSON, so I’ll be using that for the rest of this article.</li>
</ul>

<h2 id="what-types-of-changes-require-a-new-api-version">What types of changes require a new API version</h2>

<p>Generally speaking, a new API version should only be published in the case where the API author needs to introduce a backwards-incompatible change (e.g. a <a href="https://semver.org/">semver</a>-like convention). The scope of a backwards-incompatible change varies depending on the context, but examples include:</p>

<ul>
  <li>Renaming a field.</li>
  <li>Modifying the schema of an object.</li>
  <li>Introducing entirely new conventions and handling of values.</li>
</ul>

<p>The motivation for a new API when introducing breaking changes is reasonable: API authors should build trust with their users by providing a mechanism to notify them when there is a need for them to change their code to interface with said API. Versioning makes the choice on the user explicit to upgrade.</p>

<h2 id="but-api-migration-is-expensive-for-customers">But API migration is expensive for customers</h2>

<p>The challenge comes in the logistics of the users upgrading their clients.</p>

<p>Often API authors can find themselves sufficiently removed from the problem of dealing with the churn of API upgrades, and get an unrealistic idea of the cost of the API migration.</p>

<p>Some of the reasons upgrades can become expensive are outlined below.</p>

<h3 id="tightly-coupled-dependencies-requiring-lockstep-upgrades">Tightly coupled dependencies requiring lockstep upgrades</h3>

<p>Clients and SDKs to interface with APIs are often not written in a highly modular fashion: instead, they are whole surfaces that must be upgraded, such as with all the APIs on a cloud like AWS or GCP, or for all services offered by a platform like Stripe.</p>

<p>The breadth of this surface often means that you update your code for multiple different clients at once, often unrelated to the one service or tool that you want to use.</p>

<h3 id="upgrades-can-be-multiple-layers-deep">Upgrades can be multiple layers deep</h3>

<p>In some cases, although the upgrade of the client is trivial, it can be nested a dependency chain that makes upgrades take significantly more effort and time.</p>

<p>For example, consider the usage of a raw SDK, wrapped in a convenience wrapper like a Terraform provider. The sketch could look like:</p>

<ul>
  <li>Raw API.</li>
  <li>Go SDK.</li>
  <li>Terraform provider.</li>
</ul>

<div class="jekyll-diagrams diagrams mermaid">
  Command Not Found: mmdc
</div>

<p>In order for the user to finally get the upgraded SDK, they have to update the Go SDK version, and update the Terraform provider it is chained to. Each have their own cost associated, and an incompatible change can leak the cost of the upgrade into every downstream.</p>

<p>Not only does this make upgrades more <strong>costly</strong>, but it can make them take longer: what if the team who upgrades the provider is separate from the team who upgrades the SDK? What if one of those pieces is an open source project that is swamped and slow to respond? This can make a simple code change extend into a multi-week or sometimes multi-month endeavor, including the cost of coordination overhead.</p>

<h2 id="api-upgrades-do-not-benefit-the-end-user">API upgrades do not benefit the end user</h2>

<p>We’ve established that an API upgrade can be expensive. What about the benefits?</p>

<p>The reality is the reasons that engineers often <strong>want</strong> to introduce a new change isn’t particularly valuable for the end user. Let’s look at some of these arguments now.</p>

<h3 id="api-intuitiveness">API intuitiveness</h3>

<p>The most common example of improving usability is renaming a field in an API payload: the previous name didn’t really capture the purpose, so the field should be renamed to something that does.</p>

<p>There’s similar changes in the category as well:</p>

<ul>
  <li>Moving fields from one object to another.</li>
  <li>Gathering a set of fields and interning that into a subobject.</li>
</ul>

<p>The problem is intuitiveness of anything is highly subjective: intuition around a user interface is dependent on the experience that an individual had previously, which itself is dependent on the frequency of an accepted idiom.</p>

<p>Consider the now-famous hamburger icon (≡) or triple dots (⋮) that we see on every website: neither was “intuitive” until they become common in styles guides and applications. Someone viewing these for the first type wouldn’t immediately be able to reason what they mean: they have to be taught.</p>

<p>Therefore, one has to assume that, unless a user can somehow completely intuit the schema of an API, they will be forced to look up <strong>some</strong> form of documentation to be able to use the API.</p>

<p>Even if a user could theoretically intuit the whole API, they will <strong>still</strong> be likely to look it up, and have to verify the meaning of every field: if you had the choice of just looking up what these terms mean or a workflow of guess-and-verify-the-field-does-what-I-think-it-does, many would look up the meaning to save the time spent fiddling with the API if they’re wrong.</p>

<p>Therefore, API intuitiveness is largely irrelevant: <strong>accurate, clear documentation or examples will be more valuable every time</strong>, and comes with zero cost in end-user toil to update their API calls to new schemas or field names.</p>

<h3 id="most-api-changes-can-live-on-the-same-version">Most API changes can live on the same version</h3>

<p>Most API changes can actually live on the same version! In some of the examples above, instead of introducing a new version of an API entirely, one could instead:</p>

<ol>
  <li>Introduce a new field with the new name / schema / behavior.</li>
  <li>Accept both indefinitely, and add validation to make new fields mutually exclusively with any old conflicting fields.</li>
</ol>

<p>This is largely similar to the burden of maintaining multiple version of the API simultaneously, but comes with the benefit that the work is largely <strong>additive</strong>: the work to use a new feature is only the cost of adding support for that field in one’s SDK / library, and is not coupled with other additional burdens that don’t provide immediate value (like refactoring your integration to support some new v2 schema).</p>

<h3 id="new-features">New Features</h3>

<p>Often new APIs versions also become the only way to consume new features in the underlying service: engineers don’t want to have to maintain multiple code paths or update legacy ones to support new features, so new fields will only be introduced in the new API.</p>

<p>However, there is no technical reason why these fields cannot be introduced in the older API versions, and this in turn results additional user friction: the user is made to pay the cost of an expensive upgrade, even to get a single feature flag.</p>

<h2 id="examples-around-the-internet-of-pain-of-migration-costs">Examples around the internet of pain of migration costs</h2>

<p>I think there’s very few tangible examples of someone praising a new API, but there’s a plentiful amount of complaints around an API changing and the users being unhappy with paying the cost to upgrade:</p>

<ul>
  <li><a href="https://steve-yegge.medium.com/dear-google-cloud-your-deprecation-policy-is-killing-you-ee7525dc05dc">Steve Yegge’s blog post on rapid deprecation policies making maintaining project unsustainable.</a></li>
</ul>

<h2 id="summary">Summary</h2>

<ul>
  <li>A new version of an API is expensive for consumers to migrate to.
    <ul>
      <li>Often clients have a much wider surface area than the single API being upgraded, and therefore are that much more expensive to upgrade.</li>
      <li>Clients and SDKs tend to have a chain of dependencies (e.g. wrapped providers or CLIs wrapping SDKs), resulting in significant coordination to support new APIs.</li>
    </ul>
  </li>
  <li>Many of the percieved benefits of new APIs aren’t true in practice
    <ul>
      <li>API changes that are more “intuitive” is highly subjective, and without sufficient standardization will require the user to look up documentation. Documentation is the default fallback and the first things users look at, regardless of schema of the payload.</li>
      <li>New features and fields could be added to the old API without issue.</li>
      <li>Many desired changes can be made incrementally to existing API version, by introducing new fields with mutual exclusivity.</li>
    </ul>
  </li>
</ul>]]></content><author><name></name></author><category term="coding" /><summary type="html"><![CDATA[It’s time for a blanket statement: users will prefer improving extending existing API versions over adopting a new version due to a backwards-incompatible change.]]></summary></entry><entry><title type="html">SWE tip: ask for help</title><link href="https://y.tsutsumi.io/ask-for-help/" rel="alternate" type="text/html" title="SWE tip: ask for help" /><published>2022-03-26T07:00:00+00:00</published><updated>2022-03-26T07:00:00+00:00</updated><id>https://y.tsutsumi.io/ask-for-help</id><content type="html" xml:base="https://y.tsutsumi.io/ask-for-help/"><![CDATA[<p>One of the most common mistakes I see software engineers make when they start in a role is not reaching out to a teammate sooner: for help, or to throw an idea around.</p>

<p>Here’s some reasons why, especially in a new role, you should ask for help if you get stuck.</p>

<h2 id="the-pros">The Pros</h2>

<h3 id="get-ramped-up-quicker">Get ramped up quicker</h3>

<p>If you’re working in a new tech stack, or on a new team, there’s always going to be some tribal knowledge: information that isn’t stored in any easily searchable system of record, but is readily available in memory from a colleague.</p>

<p>Every team has that extremely esoteric issue that has yet to be documented yet, and it can cause someone new to spin their wheels for days: things like:</p>

<ul>
  <li>A known bug in a dependency that has yet to be fixed.</li>
  <li>A particular error that is caused by a misconfiguration in setup of a local environment.</li>
</ul>

<p>Reaching out as you encounter issues to verify if this is something others have seen can avoid <em>days</em> of time.</p>

<h3 id="you-learn-about-tools-and-techniques">You learn about tools and techniques</h3>

<p>Someone who’s been on the team for a long time will generally have a large collection of command-line tools, browser extensions, and shell scripts to assist with common issues. As someone new to the team, you don’t have that yet, and building those from scratch all by yourself will take time.</p>

<p>Reaching out and seeing how a teammate investigates or fixes an issue can teach you about valuable tools that you may have not been aware of.</p>

<h3 id="learn-about-prior-art">Learn about prior art</h3>

<p>One of the most valuable pieces of knowledge your team has is experience from previous attempts to solve a problem. It’s best to run your ideas to improve the codebase (improved linters, or perhaps a refactor of a particularly hairy piece of code) by someone on the team to see if it hasn’t already been tried.</p>

<h2 id="the-cons">The cons</h2>

<h3 id="losing-out-on-learnings-from-struggling">Losing out on learnings from struggling</h3>

<p>Sometimes, struggling through an issue is good:</p>

<ul>
  <li>You learn techniques that you wouldn’t have otherwise.</li>
  <li>You’ll need read through and understand a technology deeply to diagnose.</li>
  <li>You’ll improve your search-foo and debugging skillset.</li>
</ul>

<p>And reaching out too quickly can rob you of that opportunity.</p>

<h3 id="randomizing-colleagues">Randomizing colleagues</h3>

<p>Asking your team does come with a cost: it can randomize your teammates from their work.</p>

<p>But consider the cost benefit: ultimately, it benefits the team to have a productive member of the team more than a few one-time randomization costs. The contribution you make as you add new features, fix bugs, and contribute new ideas will easily pay off the hours it takes the other engineers to answer your question.</p>

<p>If you’re really worried about randomizing the team, consider asking questions at dedicated times or around regular events that are already randomizing like standups or sprint planning.</p>

<h2 id="the-compromise-timebox-then-ask">The compromise: timebox then ask</h2>

<p>To try to strike the balance of reaching out and solving problems yourself, try <strong>timeboxing</strong> your investigations: give yourself a set time to investigate and unblock yourself, and ask if you’re still stuck when time is up.</p>

<p>Setting an upper limit on an investigation helps you stay productive while not bugging your colleages too much. Without a timebox, you can get lost in investigation indefinitely: who hasn’t had a bug that they fixed and felt great about, but felt like they took a bit too long?</p>

<h2 id="summary-asking-for-help-is-a-good-thing">Summary: asking for help is a good thing</h2>

<ul>
  <li>Timebox your investigations: once you hit your limit on investigation, ask for help.</li>
  <li>Reaching out can help you ramp up quicker.
    <ul>
      <li>Ramping up quicker is better for your team.</li>
    </ul>
  </li>
  <li>Reaching out helps you learn tools and techniques you may not learn otherwise.</li>
  <li>Reaching out can save you days to re-learn knowledge or learnings your team may already have.</li>
</ul>]]></content><author><name></name></author><category term="swe-tip" /><summary type="html"><![CDATA[One of the most common mistakes I see software engineers make when they start in a role is not reaching out to a teammate sooner: for help, or to throw an idea around.]]></summary></entry><entry><title type="html">Walking desk treadmill</title><link href="https://y.tsutsumi.io/walking-desk-treadmill/" rel="alternate" type="text/html" title="Walking desk treadmill" /><published>2022-01-19T07:00:00+00:00</published><updated>2022-01-19T07:00:00+00:00</updated><id>https://y.tsutsumi.io/walking-desk-treadmill</id><content type="html" xml:base="https://y.tsutsumi.io/walking-desk-treadmill/"><![CDATA[<p>With work from home becoming a likely permanent fixture of my life, and being in front of my computer 8 hours accompanying that, I’ve been looking at ways to try get some exercise in.</p>

<p>So I got a walking treadmill for under my desk.</p>

<p><img src="treadmill-desk.jpg" alt="picture of my treadmill desk setup" /></p>

<h2 id="background">Background</h2>

<p>I’ve been using a standing desk for about 18 months. However, it’s been very difficult to stand for the whole time. My feet would hurt, or I would get restless.</p>

<p>Eventually to help I got a tall office chair, and alternated between that and standing. However, I’d often contort myself in the office chair, and would end up sitting with poor posture for long periods of time.</p>

<p>In addition I’m often in meetings rather than doing deep work, and it’s difficult to sit through meetings for prolonged periods of time. I would get fidgity or find myself drifting to activities on my other monitor, which made me a worse participant in meetings.</p>

<p>I thought that the regular motion required with a walking treadmill would help with my concentration, and keep my body moving throughout the day.</p>

<h2 id="the-treadmill">The Treadmill</h2>

<p>I purchased the <a href="https://www.amazon.com/gp/product/B08FCFYHKL/ref=ppx_yo_dt_b_search_asin_title">Goplus 2 in 1 treadmill</a>.</p>

<h3 id="weight">Weight</h3>

<p>My original goal was to find a treadmill that was light enough that I can move in and out of my desk. the Goplus was one of the lightest I can find, but at 70 pounds, it wasn’t particularly easy to move around. I now leave it under my desk and walk or stand the whole time.</p>

<h3 id="track-area">Track Area</h3>

<p>The dimensions of the walking area is important: it’ll be your walking surface for multiple hours at a time.</p>

<p>The Goplus has an area of 40” by 16”. The 16” isn’t very wide: I’ve had to rotate my hips much more than I would normally when walking. The 40” length hasn’t really been an issue, but doesn’t leave a significant amount of slack.</p>

<h2 id="the-shoes">The Shoes</h2>

<p>When I first walked on my treadmill, I did so in socks, and my feet really started to hurt after 3-4 hours. I tried some <a href="https://www.amazon.com/gp/product/B01N4W17YA/ref=ppx_yo_dt_b_search_asin_title">slip on loafers</a> and it’s helped a lot.</p>

<h2 id="foot-pain">Foot pain</h2>

<p>Since I’ve been using the shoes, I have been able to walk for about 1.5-2 hours without much issue: during days where I’m in meetings all day I don’t really notice fatigue from walking.</p>

<p>The foot pain walking with shoes is actually must lower than standing: I think this is because walking forces you to rotate where the pressure is on your feet, which naturally prevents prolonged stress on any one part.</p>

<h2 id="impact-on-focus">Impact on focus</h2>

<p>Walking in meetings has helped me significantly with focus. The movement prevents me from fidgiting, and the constant use of my mental capacity to walk gives me no choice to focus on only one other task: the meeting itself.</p>

<h2 id="the-routine">The routine</h2>

<p>I started in December at the default pace of 0.6 miles per hour. Over the course of a month, I’ve gone up to walking 0.8 comfortably. And I think I may be able to walk faster.</p>

<p>My routine has a natural break in the middle for lunch: so I walk 2-3 hours in the morning (hopping off a couple of times for snack or bathroom breaks), take the 1 hour break for lunch, and then another 3-4 hours before signing off for the day.</p>

<p>After a couple of weeks, I can do the whole day without a break, but my legs do feel sore and I generally sit or lie down to give my legs rest after work for about an hour. After the break I sometimes hop right back on to do some personal computing tasks: the long stretches that are the most difficult.</p>

<h2 id="what-i-would-do-differently-next-time">What I would do differently next time</h2>

<ul>
  <li>16” for width on a treadmill is uncomfortable, for my 6’ frame. I would get a wider treadmill.</li>
</ul>

<h2 id="energy-after-work">Energy after work</h2>

<p>I have more energy after walking all day, and during meetings: I feel more alert since the constant exercise helps keep my blood pumping, and in the same way I feel more energetic after a hard workout, I notice I have more energy after walking.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Although I originally felt a walking treadmill was an excessive addition to my setup, it has helped alleviate a lot of the problems I faced when working in front of my desk for eight hours a day.</p>

<p>After about a month, it feels more natural to me that sitting, and it has had positive impact on my health, both physically and mentally.</p>]]></content><author><name></name></author><category term="gear" /><category term="treadmill" /><summary type="html"><![CDATA[With work from home becoming a likely permanent fixture of my life, and being in front of my computer 8 hours accompanying that, I’ve been looking at ways to try get some exercise in.]]></summary></entry><entry><title type="html">Solving the Four Wizards Puzzle</title><link href="https://y.tsutsumi.io/puzzles/four-wizards" rel="alternate" type="text/html" title="Solving the Four Wizards Puzzle" /><published>2022-01-05T07:00:00+00:00</published><updated>2022-01-05T07:00:00+00:00</updated><id>https://y.tsutsumi.io/puzzles/solving-the-wizards-puzzle</id><content type="html" xml:base="https://y.tsutsumi.io/puzzles/four-wizards"><![CDATA[<p>This is a solution to the “Four Wizards” puzzle. Credit for the puzzle goes to <a href="https://blog.tanyakhovanova.com/2021/12/four-wizards/">Tanya Khovanova</a>, who found it on Facebook.</p>

<p>The puzzle itself is inlined for convenience:</p>

<h2 id="wizards-puzzle-statement">Wizards Puzzle Statement</h2>

<p>Four wizards A, B, C, and D, were given three cards each. They were told that the cards had numbers from 1 to 12 written without repeats. The wizards only knew their own three numbers and had the following exchange.</p>

<p>A: “I have number 8 on one of my cards.”</p>

<p>B: “All my numbers are prime.”</p>

<p>C: “All my numbers are composite. Moreover, they all have a common prime factor.”</p>

<p>D: “Then I know the cards of each of you.”</p>

<p>Given that every wizard told the truth, what cards does A have?</p>

<h2 id="reasoning">Reasoning</h2>

<p>This problem is a great example of deductive reasoning. First, let’s define some terms.</p>

<blockquote>
  <p>A “composite” number is one that comprises of multiple smaller numbers, excluding 1. Therefore, any non-prime, non-1 number is a composite.</p>
</blockquote>

<p>Note that C’s cards have to share a common prime factor. Since the numbers only go up to 12, the prime factor options are 2 and 3. A hand that shares a prime factor of 5 would be {5,10,15}, and 15 isn’t a valid card.</p>

<p>With that, we can outline the possible candidates for the cards in each players hands:</p>

<ul>
  <li>A: definitely 8, possibly 1,2,3,4,5,6,7,9,10,11,12</li>
  <li>B: possibly 2,3,5,7,11</li>
  <li>C: 3 out of the set of {6,9,12} (composites of 3) or {4,6,10,12} (composites of 2)</li>
  <li>D: possibly: 1,2,3,4,5,6,7,9,10,11,12</li>
</ul>

<p>In order for player D to be able to deduct that hands of A, B, and C, they have to have cards in their hand that allow them to rule out all but one possibility for the other’s hands. This means that player D must have cards in their hand that overlap with possible cards of A, B, and C.</p>

<p>Let’s start with what cards could remove options for player C. Enumerating cards that C and D could both have:</p>

<ul>
  <li>D has 6: rules out composites of 3, C must have {4,10,12}</li>
  <li>D has 9 or 12: rules out composites of 3, C must have 3 of {4, 6, 10,12}</li>
  <li>D has 2 of 4, 6, 10, or 12: rules out composites of 2, leaves composites of 3.</li>
</ul>

<p>Out of these options, the option that uses the least cards in D’s hands to uniquely identify C’s hand is one card with the value 6: this means C must have {4, 10, 12}.</p>

<p>If we make that assumption, then that leaves 2 cards in D’s hand to uniquely identify B and A’s hand.</p>

<p>Note that for B, there are 5 possible prime numbers. If we take any 2 and put them in D’s hand, then we know what cards are in B’s hand. Note that we don’t need to what the <em>precise</em> primes are in B and D’s hands: we just need to know that, if D had two prime cards in their hand, then they would be able to deduce the three primes in B’s.</p>

<p>So with the D’s hand of 6 and 2 prime numbers, we know exactly what is in B and C’s hands. That leaves A.</p>

<p>Among the set of possibilities that A has:</p>

<blockquote>
  <p>{8} + 2 x {1,2,3,4,5,6,7,9,10,11,12}</p>
</blockquote>

<p>We can remove 6 and {4,10,12} that we derived from player C:</p>

<blockquote>
  <p>{8} + 2x {1,2,3,6,7,9,11}</p>
</blockquote>

<p>And remove all the prime numbers since they will be in either B or D’s hand:</p>

<blockquote>
  <p>{8} + 2x {1,9} = {1,8,9}</p>
</blockquote>

<p>And figure out that A has the cards 1,8 and 9.</p>

<h2 id="solution">Solution</h2>

<p>In summary, the solution is 1,8 and 9. Note that since the question doesn’t ask what cards are in the hands of the other players, there are multiple permutations of cards that could satisfy the problem: namely, the primes can be distributed freely as long as 3 are in B’s hand and 2 are in D’s.</p>]]></content><author><name></name></author><category term="math" /><category term="puzzle" /><summary type="html"><![CDATA[This is a solution to the “Four Wizards” puzzle. Credit for the puzzle goes to Tanya Khovanova, who found it on Facebook.]]></summary></entry></feed>