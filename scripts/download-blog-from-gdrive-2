#!/usr/bin/env python
import os
import sys
import time
from gdown.download import _get_session, download
from gdown.download_folder import (
    _get_directory_structure,
    _download_and_parse_google_drive_link,
)

FOLDER_ID = "1vOWBuAlm1z3Z53cO6C4HXw7fs76shk98"
FOLDER_URL = f"https://drive.google.com/drive/folders/{FOLDER_ID}"
# the max number of times to retry an individual file.
# helps to work around access denied issues
# (possibly due to rate limiting).
MAX_FILE_DOWNLOAD_RETRIES = 3
# the number of seconds between file
# downloads. helps with rate limiting.
SECONDS_BETWEEN_FILE_DOWNLOAD = 5


def download_folder(
    url=None,
    id=None,
    output=None,
    quiet=False,
    proxy=None,
    speed=None,
    use_cookies=True,
    remaining_ok=False,
    verify=True,
):
    """Downloads entire folder from URL.

    Parameters
    ----------
    url: str
        URL of the Google Drive folder.
        Must be of the format 'https://drive.google.com/drive/folders/{url}'.
    id: str
        Google Drive's folder ID.
    output: str, optional
        String containing the path of the output folder.
        Defaults to current working directory.
    quiet: bool, optional
        Suppress terminal output.
    proxy: str, optional
        Proxy.
    speed: float, optional
        Download byte size per second (e.g., 256KB/s = 256 * 1024).
    use_cookies: bool, optional
        Flag to use cookies. Default is True.
    verify: bool or string
        Either a bool, in which case it controls whether the server's TLS
        certificate is verified, or a string, in which case it must be a path
        to a CA bundle to use. Default is True.

    Returns
    -------
    filenames: list of str
        List of files downloaded, or None if failed.

    Example
    -------
    gdown.download_folder(
        "https://drive.google.com/drive/folders/" +
        "1ZXEhzbLRLU1giKKRJkjm8N04cO_JoYE2",
    )
    """
    if not (id is None) ^ (url is None):
        raise ValueError("Either url or id has to be specified")
    if id is not None:
        url = "https://drive.google.com/drive/folders/{id}".format(id=id)

    sess = _get_session(proxy=proxy, use_cookies=use_cookies)

    if not quiet:
        print("Retrieving folder contents", file=sys.stderr)
    return_code, gdrive_file = _download_and_parse_google_drive_link(
        sess,
        url,
        quiet=quiet,
        remaining_ok=remaining_ok,
        verify=verify,
    )

    if not return_code:
        return return_code
    if not quiet:
        print("Retrieving folder contents completed", file=sys.stderr)
        print("Building directory structure", file=sys.stderr)
    if output is None:
        output = os.getcwd() + os.path.sep
    if output.endswith(os.path.sep):
        root_folder = os.path.join(output, gdrive_file.name)
    else:
        root_folder = output
    directory_structure = _get_directory_structure(gdrive_file, root_folder)
    if not os.path.exists(root_folder):
        os.makedirs(root_folder)

    if not quiet:
        print("Building directory structure completed")
    filenames = []
    for file_id, file_path in directory_structure:
        time.sleep(SECONDS_BETWEEN_FILE_DOWNLOAD)
        if file_id is None:  # folder
            if not os.path.exists(file_path):
                os.makedirs(file_path)
            continue

        retries = MAX_FILE_DOWNLOAD_RETRIES
        success = True

        while retries > 0:
            filename = download(
                url="https://drive.google.com/uc?id=" + file_id,
                output=file_path,
                quiet=quiet,
                proxy=proxy,
                speed=speed,
                use_cookies=use_cookies,
                verify=verify,
            )

            if filename is None:
                retries -= 1
                time.sleep(60)
                if not quiet:
                    print(f"Download ended unsuccessfully. Trying again with {retries} retries left.", file=sys.stderr)
            else:
                filenames.append(filename)
                break

    if not quiet:
        print("Download completed", file=sys.stderr)
    return filenames

download_folder(FOLDER_URL)