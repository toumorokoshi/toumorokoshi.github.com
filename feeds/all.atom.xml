<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>y.tsutsumi.io</title><link href="./" rel="alternate"></link><link href="http://y.tsutsumi.io/feeds/all.atom.xml" rel="self"></link><id>./</id><updated>2018-09-30T00:00:00+02:00</updated><entry><title>Using Rust functions in LLVM's JIT</title><link href="using-rust-functions-in-llvms-jit.html" rel="alternate"></link><published>2018-09-30T00:00:00+02:00</published><updated>2018-09-30T00:00:00+02:00</updated><author><name>Yusuke Tsutsumi</name></author><id>tag:None,2018-09-30:using-rust-functions-in-llvms-jit.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://llvm.org/"&gt;LLVM&lt;/a&gt; is an amazing framework for building high-performance programming languages,
and Rust has some great bindings with &lt;a class="reference external" href="https://crates.io/crates/llvm-sys"&gt;llvm-sys&lt;/a&gt;. One challenge
was getting functions authored in Rust exposed to LLVM. To make this happen, there's a few steps to walk through.&lt;/p&gt;
&lt;div class="section" id="exposing-the-rust-functions-as-c-externs"&gt;
&lt;h2&gt;1. Exposing the Rust functions as C externs&lt;/h2&gt;
&lt;p&gt;When LLVM …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://llvm.org/"&gt;LLVM&lt;/a&gt; is an amazing framework for building high-performance programming languages,
and Rust has some great bindings with &lt;a class="reference external" href="https://crates.io/crates/llvm-sys"&gt;llvm-sys&lt;/a&gt;. One challenge
was getting functions authored in Rust exposed to LLVM. To make this happen, there's a few steps to walk through.&lt;/p&gt;
&lt;div class="section" id="exposing-the-rust-functions-as-c-externs"&gt;
&lt;h2&gt;1. Exposing the Rust functions as C externs&lt;/h2&gt;
&lt;p&gt;When LLVM interfaces with shared libraries, it uses the C ABI protocol to do so. Rust provides a way to build do this, out of the box, using the 'extern &amp;quot;C&amp;quot;' declaration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;C&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This instructs the Rust compiler that this should be exposed in a way where it can be found and used as a library. In the case of an executable binary, this is still the case.&lt;/p&gt;
&lt;p&gt;The big gotcha here is ensuring that you are declaring the function as public, AND you are declaring it as public in the main module too. If the function was located in a child module, you will need to re-export in the main file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// src/my_mod.rs&lt;/span&gt;

&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;C&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;I&amp;#39;m a shared library call&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// main.rs&lt;/span&gt;
&lt;span class="k"&gt;mod&lt;/span&gt; &lt;span class="nn"&gt;my_mod&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// note the pub here.&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;::&lt;span class="n"&gt;my_mod&lt;/span&gt;::&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="rust"></category></entry><entry><title>Book Report: The Whole Brain Child</title><link href="book-report-the-whole-brain-child.html" rel="alternate"></link><published>2018-04-22T00:00:00+02:00</published><updated>2018-04-22T00:00:00+02:00</updated><author><name>Yusuke Tsutsumi</name></author><id>tag:None,2018-04-22:book-report-the-whole-brain-child.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://www.amazon.com/Whole-Brain-Child-Revolutionary-Strategies-Developing/dp/0553386697"&gt;The Whole Brain Child&lt;/a&gt; discusses strategies to teach children how to deal with difficult situations in an empathetic and rational way.&lt;/p&gt;
&lt;p&gt;Despite the focus on teaching children, the book included a lot of great insights for adults as well. In general, it is a great guidebook on how to deal …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://www.amazon.com/Whole-Brain-Child-Revolutionary-Strategies-Developing/dp/0553386697"&gt;The Whole Brain Child&lt;/a&gt; discusses strategies to teach children how to deal with difficult situations in an empathetic and rational way.&lt;/p&gt;
&lt;p&gt;Despite the focus on teaching children, the book included a lot of great insights for adults as well. In general, it is a great guidebook on how to deal with emotional situations, and how to ensure that the approach is one that accounts for the impact on others and their well-being.&lt;/p&gt;
&lt;p&gt;The general structure is emphasizing a few key strategies when encountering an emotional and upset child. Here is my interpretation of the general ideas:&lt;/p&gt;
&lt;div class="section" id="introspect-when-encountering-conflict"&gt;
&lt;h2&gt;Introspect when Encountering Conflict&lt;/h2&gt;
&lt;p&gt;The book posits that we have two different &amp;quot;brains&amp;quot; that work in tandem when encountering a difficult situation: the &amp;quot;lizard brain&amp;quot; which reacts with strong emotional responses, and the &amp;quot;upstairs brain&amp;quot; which can approach the situation rationally.&lt;/p&gt;
&lt;p&gt;Along the theme of educating children on how to cope in situations of conflict, the book explains that, to best help someone understand the situation, it is first better to empathize with how the chid is feeling. Once the lizard brain is no longer in control, deconstruct the situation rationally. This quiets the immediate reaction of the lizard brain, and enables a discussion when your child is using their upstairs brain.&lt;/p&gt;
&lt;p&gt;As an example: if your child is throwing a tantrum because they are not getting the ice cream they wanted, it is first best to acknowledge the feelings of the child first (&amp;quot;you seem angry&amp;quot;), then rationally explain that eating too much ice cream is not a good choice.&lt;/p&gt;
&lt;p&gt;This lessons works great for children, but I see it as a great lesson for conflicts with adults: if you want to reach an agreement with someone and you have a strong emotional reaction, first acknowledge the emotions, then reconcile on a logical level.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="physical-activities-to-clear-your-mind"&gt;
&lt;h2&gt;Physical Activities to Clear Your Mind&lt;/h2&gt;
&lt;p&gt;The book references a study that explains that physical activities can help calm emotional reactions, and bring someone into the state to discuss the situation rationally. Thus, a good tool may be to help pace the room, or do some jumping jacks, before diving into the conflict itself.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="talking-through-the-situation-repeatedly"&gt;
&lt;h2&gt;Talking Through the Situation Repeatedly&lt;/h2&gt;
&lt;p&gt;When one encounters a traumatising situation, and one that is difficult to understand (like a loved one being taken away by an ambulance, or a car accident), an insecurity can linger: one may become more upset when a loved one leaves for work.&lt;/p&gt;
&lt;p&gt;The insecurity stems from a lack of understanding, and the reassurance that, despite how traumatising the situation was, everyone still turned out ok. Talking it through multiple times, ensuring that the child has a good understand of what actually occurred during the scary part of the experience, and a reminder that the child is still ok at the end, will reduce that insecurity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="thinking-about-the-larger-picture"&gt;
&lt;h2&gt;Thinking About the Larger Picture&lt;/h2&gt;
&lt;p&gt;When a conflict occurs, one can get invested and extremely emotional. This can occur with even small conflicts that have a minimal impact on our day to day lives, such as an argument at work. In those situations, the lizard brain takes over, and one does not weigh the argument appropriately. One often becomes invested and very upset if the outcome does not go their way (e.g. a minor technical disagreement at work).&lt;/p&gt;
&lt;p&gt;In a situation like this, taking a step back, and considering the larger impact works well. Will this choice cause me to lose my job? Will it cause my company to lose a significant amount of cash? Will I be the one responsible if things go wrong? If the answer to the above is no, then it is a sign that it may not be worth the investment, or at least being emotional about it.&lt;/p&gt;
&lt;p&gt;I find myself in this situation often: I am opinionated about many aspects of my job, and the company I work for. It is valuable to have a logical argument for what you are advocating, and to spend time on that. However, it does not mean that, if the outcome is to move forward with a different approach, I should be upset for hours or days afterward. The impact this decision will have on the part of life I care about is minimal. Keeping perspective on what is important helps focus me on the discussions I should be having, and spending more time on those.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="use-introspection-to-understand-emotions"&gt;
&lt;h2&gt;Use Introspection to Understand Emotions&lt;/h2&gt;
&lt;p&gt;A major theme of the book is examing the situation in a rational light, allowing some time to consider whether the response is appropriate. Being able to explain why you feel a specific way is powerful: you can better understand why you react this way, and modify your behavior if it is appropriate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="explaining-how-others-are-feeling"&gt;
&lt;h2&gt;Explaining How Others are Feeling&lt;/h2&gt;
&lt;p&gt;Children often act without regard to how others feel, such as grabbing a toy from another's hand, or erasing another's work. When a child does so, it is often without malice, but rather the lack of understanding of how it feels to have that done to you.&lt;/p&gt;
&lt;p&gt;By explaining how one feels in that situation, the child learns how to empathize. Getting the child into the habit of considering other's feeling before taking an action helps reduce interpersonal conflicts, and can often avoid them. Deliberately educating on why one should feel empathy on a situation when the opportunity arises ensures the lesson is learned, and allows the child to achieve competency in a valuable skill early.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="final-thoughts"&gt;
&lt;h2&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;For me, &amp;quot;The Whole Brain Child&amp;quot; did a great job of putting more abstract ideas in my head in writing. I use many of the techniques outlined in the book when encountering conflict, but I had never put deep consideration into why those techniques worked. I have also never thought deeply about how to share these skills.&lt;/p&gt;
&lt;p&gt;The book does a great job at all of the above: it provides a step by step guide for moving from an emotional state of mind to a logical one, adding understanding of the situation to analyze what could be improved, and explains how to further build an empathic foundation in children.&lt;/p&gt;
&lt;p&gt;Definitely recommmend a read.&lt;/p&gt;
&lt;/div&gt;
</content><category term="books"></category><category term="book-report"></category></entry><entry><title>Book Report: The Millionaire Next Door</title><link href="book-report-the-millionaire-next-door.html" rel="alternate"></link><published>2018-02-20T00:00:00+01:00</published><updated>2018-02-20T00:00:00+01:00</updated><author><name>Yusuke Tsutsumi</name></author><id>tag:None,2018-02-20:book-report-the-millionaire-next-door.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://www.amazon.com/Millionaire-Next-Door-Surprising-Americas/dp/1589795474"&gt;The Millionaire Next Door&lt;/a&gt; is a explanation of the behavior and attributes of those who have achieved a significant amount of wealth. Contrary to the title, it does not just examine millionaires: instead, it looks at those who have a significant amount of net worth, multiple times their income.&lt;/p&gt;
&lt;div class="section" id="how-much-net-worth-should-you-have"&gt;
&lt;h2&gt;How …&lt;/h2&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://www.amazon.com/Millionaire-Next-Door-Surprising-Americas/dp/1589795474"&gt;The Millionaire Next Door&lt;/a&gt; is a explanation of the behavior and attributes of those who have achieved a significant amount of wealth. Contrary to the title, it does not just examine millionaires: instead, it looks at those who have a significant amount of net worth, multiple times their income.&lt;/p&gt;
&lt;div class="section" id="how-much-net-worth-should-you-have"&gt;
&lt;h2&gt;How Much Net Worth Should You Have?&lt;/h2&gt;
&lt;p&gt;The main gauge for determining your success is your net worth relative to income. The equation looks like:&lt;/p&gt;
&lt;blockquote&gt;
2 * income * age_in_years / 10&lt;/blockquote&gt;
&lt;p&gt;So, if you are 40 years old and you earn 80,000 dollars, then you should have 2 * 80k * 40 / 10 = 640k of net worth.&lt;/p&gt;
&lt;p&gt;The 2 at the beginning of the equation is a multiplier factor that helps puts you in one of a few categories:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;0.5: UAW (under accumulator of wealth). Anything at or below this number is the last quartile of net worth of those with similar income.&lt;/li&gt;
&lt;li&gt;1: AAW (average accumulator of net worth).&lt;/li&gt;
&lt;li&gt;2: PAW (prodigiuos accumulator of net worth): Anyone at or above this number is within the top quartile.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The book was written a few years ago (1996), so it could be that these numbers have changed. But the general philosophy is to set a goal of net worth that is a multiplier of your income, in contrast to a set number for all.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-behavior-of-the-wealthy"&gt;
&lt;h2&gt;The Behavior of the Wealthy&lt;/h2&gt;
&lt;p&gt;The book contends that the wealthy have two primary behaviors in common:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;living considerably below their means&lt;/li&gt;
&lt;li&gt;making sound, non-taxable investments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Choosing a lifestyle that's below one's means results in a significant amount of excess income. That excess income can then be used to fund investments, which compount in interest and have returns that increase exponentially as time allow. The investment being untaxable (or taxed minimally) increases the return of the gains (as there is less money pulled out of the investment pool) in contrast to an investment taxed at normal income levels.&lt;/p&gt;
&lt;p&gt;By building a foundation of net worth that compounds, and reducing the cost of living in one's day-to-day life, it tackles the goal of financial independence on both sides: reducing the target goal, and investing heavily to get to that target quickly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-spending-habits-of-the-wealthy"&gt;
&lt;h2&gt;The Spending Habits of the Wealthy&lt;/h2&gt;
&lt;p&gt;A majority of the wealthy interviewed had very similar behaviors around money. Oftentimes, the wealthy went with financially conservative options. This includes buying and keeping a car for decades, forgoing the finer things like exotic vacations and boats, and simple, cost effective hobbies.&lt;/p&gt;
&lt;p&gt;The wealthy also strictly budget: they track spending closely to ensure that the wealth accumulates over time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="thoughts"&gt;
&lt;h2&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;I think this book formalizes a lot of the ideas we understand in principle. Many of the ideas the book puts forth are logical, but it is nice to have them all in one place. The book has already influenced the way I am organizing my assets. I am looking toward investing more, and setting a clear budget goal on the amount I would like to invest.&lt;/p&gt;
&lt;p&gt;Having the PAW target also helps, as it sets expectations on how much one should be saving, to continue toward the path of achieving a significant amount of wealth.&lt;/p&gt;
&lt;p&gt;Conversely, I do not agree with the idea that we should live a frugal lifestyle and ignore the opportunity for unique experiences: vacations to new places and trying new things is a pillar of a satisfying life. Ultimately, wealth should be accumulated to enrich the lives of those you care about. Wealth does not accomplish that by sitting in a bank.&lt;/p&gt;
&lt;p&gt;I aim to be more conservative around luxury items like products I do not need, or eating out when I can bring food from home. But I will continue to look for ways to use my wealth to get the most out of life, and I won't hesitate to take a step back from my long-term wealth goal to have a once-in-a-lifetime experience.&lt;/p&gt;
&lt;/div&gt;
</content><category term="books"></category><category term="book-report"></category></entry><entry><title>Aiohttp vs Multithreaded Flask for High I/O Applications</title><link href="aiohttp-vs-multithreaded-flask-for-high-io-applications.html" rel="alternate"></link><published>2017-09-23T00:00:00+02:00</published><updated>2017-09-23T00:00:00+02:00</updated><author><name>Yusuke Tsutsumi</name></author><id>tag:None,2017-09-23:aiohttp-vs-multithreaded-flask-for-high-io-applications.html</id><summary type="html">&lt;p&gt;Over the past year, my team has been making the transition from Flask to
&lt;a class="reference external" href="http://aiohttp.readthedocs.io/en/stable/"&gt;aiohttp&lt;/a&gt;. We're making this
transition because of a lot of the situations where non-blocking I/O
theoretically scales better:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;large numbers of simultaneous connections&lt;/li&gt;
&lt;li&gt;remote http requests with long response times&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is agreement that asyncio …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Over the past year, my team has been making the transition from Flask to
&lt;a class="reference external" href="http://aiohttp.readthedocs.io/en/stable/"&gt;aiohttp&lt;/a&gt;. We're making this
transition because of a lot of the situations where non-blocking I/O
theoretically scales better:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;large numbers of simultaneous connections&lt;/li&gt;
&lt;li&gt;remote http requests with long response times&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is agreement that asyncio scales better memory-wise: a green thread
in Python consumes less memory than a system thread.&lt;/p&gt;
&lt;p&gt;However, performance for latency and load is a bit more contentious. The best way to find
out is to run a practical experiment.&lt;/p&gt;
&lt;p&gt;To find out, I forked &lt;a class="reference external" href="https://github.com/klen/py-frameworks-bench"&gt;py-frameworks-benchmark&lt;/a&gt;, and designed an experiment.&lt;/p&gt;
&lt;div class="section" id="the-experiment"&gt;
&lt;h2&gt;The Experiment&lt;/h2&gt;
&lt;p&gt;The conditions of the web application, and the work performed, are identical:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a route on a web server that: 1. returns the response as json 2. queries a&lt;/li&gt;
&lt;li&gt;http request to an nginx server returning back html.&lt;/li&gt;
&lt;li&gt;a &lt;a class="reference external" href="https://github.com/wg/wrk"&gt;wrk&lt;/a&gt; benchmark run, with 400 concurrent requests for 20 seconds&lt;/li&gt;
&lt;li&gt;running under gunicorn, with two worker processes.&lt;/li&gt;
&lt;li&gt;python3.6&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="the-variants"&gt;
&lt;h2&gt;The Variants&lt;/h2&gt;
&lt;p&gt;The variants are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;aiohttp&lt;/li&gt;
&lt;li&gt;flask + meinheld&lt;/li&gt;
&lt;li&gt;flask + gevent&lt;/li&gt;
&lt;li&gt;flask + multithreading, varying from 10 to 1000.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Results&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="20%" /&gt;
&lt;col width="8%" /&gt;
&lt;col width="10%" /&gt;
&lt;col width="10%" /&gt;
&lt;col width="10%" /&gt;
&lt;col width="10%" /&gt;
&lt;col width="10%" /&gt;
&lt;col width="11%" /&gt;
&lt;col width="11%" /&gt;
&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;variant&lt;/td&gt;
&lt;td&gt;min&lt;/td&gt;
&lt;td&gt;p50&lt;/td&gt;
&lt;td&gt;p99&lt;/td&gt;
&lt;td&gt;p99.9&lt;/td&gt;
&lt;td&gt;max&lt;/td&gt;
&lt;td&gt;mean&lt;/td&gt;
&lt;td&gt;duration&lt;/td&gt;
&lt;td&gt;requests&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;aiohttp&lt;/td&gt;
&lt;td&gt;163.27&lt;/td&gt;
&lt;td&gt;247.72&lt;/td&gt;
&lt;td&gt;352.75&lt;/td&gt;
&lt;td&gt;404.59&lt;/td&gt;
&lt;td&gt;1414.08&lt;/td&gt;
&lt;td&gt;257.59&lt;/td&gt;
&lt;td&gt;20.10&lt;/td&gt;
&lt;td&gt;30702&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;flask:gevent&lt;/td&gt;
&lt;td&gt;85.02&lt;/td&gt;
&lt;td&gt;945.17&lt;/td&gt;
&lt;td&gt;6587.19&lt;/td&gt;
&lt;td&gt;8177.32&lt;/td&gt;
&lt;td&gt;8192.75&lt;/td&gt;
&lt;td&gt;1207.66&lt;/td&gt;
&lt;td&gt;20.08&lt;/td&gt;
&lt;td&gt;7491&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;flask:meinheld&lt;/td&gt;
&lt;td&gt;124.99&lt;/td&gt;
&lt;td&gt;2526.55&lt;/td&gt;
&lt;td&gt;6753.13&lt;/td&gt;
&lt;td&gt;6857.55&lt;/td&gt;
&lt;td&gt;6857.55&lt;/td&gt;
&lt;td&gt;3036.93&lt;/td&gt;
&lt;td&gt;20.10&lt;/td&gt;
&lt;td&gt;190&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;flask:10&lt;/td&gt;
&lt;td&gt;163.05&lt;/td&gt;
&lt;td&gt;4419.11&lt;/td&gt;
&lt;td&gt;4505.59&lt;/td&gt;
&lt;td&gt;4659.46&lt;/td&gt;
&lt;td&gt;4667.55&lt;/td&gt;
&lt;td&gt;3880.05&lt;/td&gt;
&lt;td&gt;20.05&lt;/td&gt;
&lt;td&gt;1797&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;flask:20&lt;/td&gt;
&lt;td&gt;110.23&lt;/td&gt;
&lt;td&gt;2368.20&lt;/td&gt;
&lt;td&gt;3140.01&lt;/td&gt;
&lt;td&gt;3434.39&lt;/td&gt;
&lt;td&gt;3476.06&lt;/td&gt;
&lt;td&gt;2163.02&lt;/td&gt;
&lt;td&gt;20.09&lt;/td&gt;
&lt;td&gt;3364&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;flask:50&lt;/td&gt;
&lt;td&gt;122.17&lt;/td&gt;
&lt;td&gt;472.98&lt;/td&gt;
&lt;td&gt;3978.68&lt;/td&gt;
&lt;td&gt;8599.01&lt;/td&gt;
&lt;td&gt;9845.94&lt;/td&gt;
&lt;td&gt;541.13&lt;/td&gt;
&lt;td&gt;20.10&lt;/td&gt;
&lt;td&gt;4606&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;flask:100&lt;/td&gt;
&lt;td&gt;118.26&lt;/td&gt;
&lt;td&gt;499.16&lt;/td&gt;
&lt;td&gt;4428.77&lt;/td&gt;
&lt;td&gt;8714.60&lt;/td&gt;
&lt;td&gt;9987.37&lt;/td&gt;
&lt;td&gt;556.77&lt;/td&gt;
&lt;td&gt;20.10&lt;/td&gt;
&lt;td&gt;4555&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;flask:200&lt;/td&gt;
&lt;td&gt;112.06&lt;/td&gt;
&lt;td&gt;459.85&lt;/td&gt;
&lt;td&gt;4493.61&lt;/td&gt;
&lt;td&gt;8548.99&lt;/td&gt;
&lt;td&gt;9683.27&lt;/td&gt;
&lt;td&gt;527.02&lt;/td&gt;
&lt;td&gt;20.10&lt;/td&gt;
&lt;td&gt;4378&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;flask:400&lt;/td&gt;
&lt;td&gt;121.63&lt;/td&gt;
&lt;td&gt;526.72&lt;/td&gt;
&lt;td&gt;3195.23&lt;/td&gt;
&lt;td&gt;8069.06&lt;/td&gt;
&lt;td&gt;9686.35&lt;/td&gt;
&lt;td&gt;580.54&lt;/td&gt;
&lt;td&gt;20.06&lt;/td&gt;
&lt;td&gt;4336&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;flask:800&lt;/td&gt;
&lt;td&gt;127.94&lt;/td&gt;
&lt;td&gt;430.07&lt;/td&gt;
&lt;td&gt;4503.95&lt;/td&gt;
&lt;td&gt;8653.69&lt;/td&gt;
&lt;td&gt;9722.19&lt;/td&gt;
&lt;td&gt;514.47&lt;/td&gt;
&lt;td&gt;20.09&lt;/td&gt;
&lt;td&gt;4381&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;flask:1000&lt;/td&gt;
&lt;td&gt;184.76&lt;/td&gt;
&lt;td&gt;732.21&lt;/td&gt;
&lt;td&gt;1919.72&lt;/td&gt;
&lt;td&gt;5323.73&lt;/td&gt;
&lt;td&gt;7364.60&lt;/td&gt;
&lt;td&gt;786.26&lt;/td&gt;
&lt;td&gt;20.04&lt;/td&gt;
&lt;td&gt;4121&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;You can probably get a sense that aiohttp can server more requests than any
other. To get a real sense of how threads scale  we can put the request count on
a chart:&lt;/p&gt;
&lt;img alt="" src="images/async-vs-threads-chart.png" /&gt;
&lt;p&gt;The interesting note is that the meinheld worker didn't scale very well at all.
Gevent handled requests faster than any threading implementation.&lt;/p&gt;
&lt;p&gt;But nothing handled nearly as many requests as aiohttp.&lt;/p&gt;
&lt;p&gt;These are the results on my machine. I'd strongly suggest you try the experiment
for yourself: the code is available in &lt;a class="reference external" href="https://github.com/toumorokoshi/py-frameworks-bench"&gt;my fork&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If anyone has any improvements on the multithreading side, or can explain the discrepency in performance, I'd love to understand more.&lt;/p&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="python"></category></entry><entry><title>MongoDB Streaming Pattern, Allowing for Batching</title><link href="mongodb-streaming-pattern-allowing-for-batching.html" rel="alternate"></link><published>2017-06-09T00:00:00+02:00</published><updated>2017-06-09T00:00:00+02:00</updated><author><name>Yusuke Tsutsumi</name></author><id>tag:None,2017-06-09:mongodb-streaming-pattern-allowing-for-batching.html</id><summary type="html">&lt;p&gt;An interesting problem arose at work today, regarding how to build an
aggregate of changes to a MongoDB collection.&lt;/p&gt;
&lt;p&gt;A more general version of the problem is:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;you have a document which has multiple buckets it could
belong to. Say, an animal which an arbitrary set of tags,
such as …&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;An interesting problem arose at work today, regarding how to build an
aggregate of changes to a MongoDB collection.&lt;/p&gt;
&lt;p&gt;A more general version of the problem is:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;you have a document which has multiple buckets it could
belong to. Say, an animal which an arbitrary set of tags,
such as [&amp;quot;mammal&amp;quot;, &amp;quot;wings&amp;quot;], and a discrete type location [&amp;quot;backyard&amp;quot;, &amp;quot;frontyard&amp;quot;, &amp;quot;house&amp;quot;].&lt;/p&gt;
&lt;p&gt;an example document could look like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{ &amp;quot;name&amp;quot;: &amp;quot;Cat&amp;quot;,
  &amp;quot;location&amp;quot;: &amp;quot;house&amp;quot;,
  &amp;quot;tags&amp;quot;: [&amp;quot;mammal&amp;quot;, &amp;quot;ears&amp;quot;]
}
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Make it easy to retrieve the sum of each type, by tag. So:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{
   &amp;quot;tag&amp;quot;: &amp;quot;mammal&amp;quot;,
   &amp;quot;location&amp;quot;: {
     &amp;quot;house&amp;quot;: 10,
     &amp;quot;backyard&amp;quot;: 4,
     &amp;quot;frontyard&amp;quot;: 2,
   }
}
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The animal location is updated regularly, so the aggregates
can change over time.&lt;/p&gt;
&lt;div class="section" id="a-first-attempt"&gt;
&lt;h2&gt;A First Attempt&lt;/h2&gt;
&lt;p&gt;The simplest way to perform this is to rely on Mongo to retrieve all
animals that match the tag by indexing the tag field, then handling
the query and count in the application.&lt;/p&gt;
&lt;p&gt;This works well for small scales. However, performing the action in
this way requires a scanning query per aggregate, and that must scan
every document returned to perform the aggregate. So, O(matched_documents):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;return_count_by_tag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tag_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;tag&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tag_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;location&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;defaultdict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;animals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tag&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tag_name&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;location&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}):&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;type_count&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;location&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In our case, we needed to return an answer for every tag, within a
minute. We were able to scale the approach with this constraint in
mind to 35,000 tags and 120,000 documents. At that point, the
application was unable to build the aggregates fast enough.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-new-strategy"&gt;
&lt;h2&gt;The New Strategy&lt;/h2&gt;
&lt;p&gt;The main disadvantage of the previous design is the calculation of the
aggregate counts does not need to be on read: if we can ensure
consistent count updates as the location actually changes per
document, we can perform O(tag_count) updates per document instead.&lt;/p&gt;
&lt;p&gt;The comparative complexity over a minute is:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;old: len(distinct_tags) * len(average_animals_per_tag)&lt;/li&gt;
&lt;li&gt;new: len(updates_per_minute) * len(average_tag_count_per_animal)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, if we have:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;30,000 tags&lt;/li&gt;
&lt;li&gt;120,000 animals&lt;/li&gt;
&lt;li&gt;40 animals average per tag&lt;/li&gt;
&lt;li&gt;(40 * 30,000) / (120,000) = 10 tags per animal&lt;/li&gt;
&lt;li&gt;10000 updates a minute&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The number of documents touched is:&lt;/p&gt;
&lt;p&gt;old: 30k * 40 = 1.2 million reads
new: 10k * 10 = 100,000 writes&lt;/p&gt;
&lt;p&gt;So, we can scale a bit better by handling writes over reads. This
becomes an even better ratio if the updates occur at a less frequent
cadence.&lt;/p&gt;
&lt;p&gt;So, the stream processing works by:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;every desired changes is enqueued into a queue (in Mongo, this can
be implemented as a capped collection)&lt;/li&gt;
&lt;li&gt;a worker process pulls from the queue, and processes the results.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The worker process:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;reads a watermark value of where it had processed&lt;/dt&gt;
&lt;dd&gt;previously (Mongo ObjectIds increase relative to time and insertion
order, so it can be used as the watermark)&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;performs the work required&lt;/li&gt;
&lt;li&gt;saves works to the collection&lt;/li&gt;
&lt;li&gt;writes the watermark value of where it had finished processing.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You could also delete records as you process them, but it can cause
issues if you need to read a record again, or if multiple workers need them.
need them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="starting-from-scratch"&gt;
&lt;h2&gt;Starting from Scratch&lt;/h2&gt;
&lt;p&gt;So how do we allow starting from scratch? Or, rebuilding the
aggregates if an issue occurs?&lt;/p&gt;
&lt;p&gt;There could be a function that performs the whole collection
calculation, dumps it to the collection, and sets the watermark to
whatever the most recent object is in the queue.&lt;/p&gt;
&lt;p&gt;Unfortunately, this process and the worker process cannot run at the
same time. If that happens, then the aggregate collection will be
corrupted, as one could query an older version of the collection, have
updates that are applied to the original aggregate copy, and are overwritten
with a stale copy from the rebuild.&lt;/p&gt;
&lt;p&gt;Thus, we must ensure that the update worker does not run at the same
time as the batch worker.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-locking-strategy"&gt;
&lt;h2&gt;A locking strategy&lt;/h2&gt;
&lt;p&gt;In Mongo, the locking is decided by the database, and a user has no
control over that. Thus, we must implement our own locking functionality by
using Mongo primitives.&lt;/p&gt;
&lt;p&gt;The same record that holds the watermark could also hold the lock. To
ensure that we can survive a worker dying halfway and not releasing,
the lock, we can provide a lock owner, ensuring the same process type
can begin an operation again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;pet-aggregates&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;watermark: ObjectId(&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;DEADBEEF&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;),&lt;/span&gt;
&lt;span class="s2"&gt;  &amp;quot;&lt;/span&gt;&lt;span class="err"&gt;lock&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;: {&lt;/span&gt;
&lt;span class="s2"&gt;      &amp;quot;&lt;/span&gt;&lt;span class="err"&gt;type&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;: &amp;quot;&lt;/span&gt;&lt;span class="err"&gt;update&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;could&lt;/span&gt; &lt;span class="err"&gt;also&lt;/span&gt; &lt;span class="err"&gt;be&lt;/span&gt; &lt;span class="err"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;bulk&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using this type of lock, the possible failure scenarios are:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;update process lock, failure, and update doesn't run again:&lt;/dt&gt;
&lt;dd&gt;This requires manually looking at the issue, resolving, and restarting the queue.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;bulk process lock, failure, and bulk doesn't run again:&lt;/dt&gt;
&lt;dd&gt;This requires manually looking at the issue, resolving, and restarting the queue.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="patterns"></category></entry><entry><title>deepmerge: deep merge dictionaries, lists and more in Python</title><link href="deepmerge-deep-merge-dictionaries-lists-and-more-in-python.html" rel="alternate"></link><published>2017-04-24T00:00:00+02:00</published><updated>2017-04-24T00:00:00+02:00</updated><author><name>Yusuke Tsutsumi</name></author><id>tag:None,2017-04-24:deepmerge-deep-merge-dictionaries-lists-and-more-in-python.html</id><summary type="html">&lt;p&gt;Introducing &lt;a class="reference external" href="https://github.com/toumorokoshi/deepmerge/"&gt;deepmerge&lt;/a&gt;. It's a library designed to provide simple
controls around a merging system for basic Python data structures like dicts and lists.&lt;/p&gt;
&lt;p&gt;It provides a few common cases for merging (like always merge + override, or raise an exception):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;deepmerge&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;always_merger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;merge_or_raise&lt;/span&gt;

&lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;nested …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Introducing &lt;a class="reference external" href="https://github.com/toumorokoshi/deepmerge/"&gt;deepmerge&lt;/a&gt;. It's a library designed to provide simple
controls around a merging system for basic Python data structures like dicts and lists.&lt;/p&gt;
&lt;p&gt;It provides a few common cases for merging (like always merge + override, or raise an exception):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;deepmerge&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;always_merger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;merge_or_raise&lt;/span&gt;

&lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;nested&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;nested_dict&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;nested_list&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;nxt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;new_key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;new_value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;nested&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;nested_dict&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;new_value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;nested_list&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;new_nested_key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;always_merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nxt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;new_key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;new_value&amp;quot;&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;nested&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="s2"&gt;&amp;quot;nested_dict&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;new_value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="s2"&gt;&amp;quot;nested_list&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
          &lt;span class="s2"&gt;&amp;quot;new_nested_key&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;deepmerge allows customization as well, for when you want to specify
the merging strategy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;deepmerge&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Merger&lt;/span&gt;

&lt;span class="n"&gt;my_merger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Merger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;# pass in a list of tuples,with the&lt;/span&gt;
    &lt;span class="c1"&gt;# strategies you are looking to apply&lt;/span&gt;
    &lt;span class="c1"&gt;# to each type.&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;prepend&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;merge&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="c1"&gt;# next, choose the fallback strategies,&lt;/span&gt;
    &lt;span class="c1"&gt;# applied to all other types:&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;override&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="c1"&gt;# finally, choose the strategies in&lt;/span&gt;
    &lt;span class="c1"&gt;# the case where the types conflict:&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;override&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
&lt;span class="nb"&gt;next&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;baz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;my_merger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;baz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For each strategy choice, pass in a list of strings specifying built in strategies,
or a function defining your own:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;merge_sets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;merger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nxt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="o"&gt;|=&lt;/span&gt; &lt;span class="n"&gt;nxt&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;merge_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;merger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nxt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nxt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nxt&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Merger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;merge_list&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;merge&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;merge_sets&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;[],&lt;/span&gt;
    &lt;span class="p"&gt;[],&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That's it! Give and try, and Pull Requests are always encouraged.&lt;/p&gt;
</content><category term="programming"></category><category term="python"></category></entry><entry><title>The CID Pattern: a strategy to keep your web service code clean</title><link href="the-cid-pattern-a-strategy-to-keep-your-web-service-code-clean.html" rel="alternate"></link><published>2017-03-17T00:00:00+01:00</published><updated>2017-03-17T00:00:00+01:00</updated><author><name>Yusuke Tsutsumi</name></author><id>tag:None,2017-03-17:the-cid-pattern-a-strategy-to-keep-your-web-service-code-clean.html</id><summary type="html">&lt;div class="section" id="the-problem"&gt;
&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;Long term maintenance of a web application, will, at some point,
require changes. Code grows with the functionality it serves, and
an increase in functionality is inevitable.&lt;/p&gt;
&lt;p&gt;It is impossible to foresee what sort of changes are required, but there are
changes that are common and are commonly …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="the-problem"&gt;
&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;Long term maintenance of a web application, will, at some point,
require changes. Code grows with the functionality it serves, and
an increase in functionality is inevitable.&lt;/p&gt;
&lt;p&gt;It is impossible to foresee what sort of changes are required, but there are
changes that are common and are commonly expensive:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;changing the back-end datastore of one or more pieces of data&lt;/li&gt;
&lt;li&gt;adding additional interfaces for a consumer to request or modify data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is possible to prevent some of these changes with some foresight,
but it is unlikely to prevent all of them. As such, we can try to
encapsulate and limit the impact of these changes on other code bases.&lt;/p&gt;
&lt;p&gt;Thus, every time I start on a new project, I practice CID: (Consumer-Internal-Datasource)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cid-explained"&gt;
&lt;h2&gt;CID Explained&lt;/h2&gt;
&lt;p&gt;CID is an acronym for the three layers of abstraction that should be
built out from the beginning of an application. The layers are described as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The consumer level: the interface that your consumers interact with&lt;/li&gt;
&lt;li&gt;The internal level: the interface that application developers interact with most of the time&lt;/li&gt;
&lt;li&gt;The datasource level: the interface that handles communication with the database and other APIs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's go into each of these in detail.&lt;/p&gt;
&lt;div class="section" id="consumer-the-user-facing-side"&gt;
&lt;h3&gt;Consumer: the user facing side&lt;/h3&gt;
&lt;p&gt;The client level handles translating and verifying the client format,
to something that makes more sense internally. In the beginning, this
level could be razor thin, as the client format probably matches the
internal format completely. However, other responsibilities that might
occur at this layer are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;schema validation&lt;/li&gt;
&lt;li&gt;converting to whatever format the consumer desires, such a json&lt;/li&gt;
&lt;li&gt;speaking whatever transport protocol is desired, such as HTTP or a Kafka stream&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As the application grows, the internal format might change, or a new
API version may need to be introduced, with it's own schema. At that
point, it makes sense to split the client schema and the internal
schema, so ending up with something like:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PetV1&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;to_internal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# converts Pet to the internal representation.&lt;/span&gt;
    &lt;span class="n"&gt;from_internal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# in case you need to return pet objects back as V1&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PetV2&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;to_internal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# converts Pet to the internal representation.&lt;/span&gt;
    &lt;span class="n"&gt;from_internal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# in case you need to return pet objects back as V2&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PetInt&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# the internal representation, used within the internal level.&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="datastore-translates-internal-to-datastore"&gt;
&lt;h3&gt;Datastore: translates internal to datastore&lt;/h3&gt;
&lt;p&gt;Some of the worst refactorings I've encountered are the ones involving
switching datastores. It's a linear problem: as the database
interactions increase, so do the lines of code that are needed to
perform that interaction, and each line must be modified in switching
or alternating the way datastores are called.&lt;/p&gt;
&lt;p&gt;It's also difficult to get a read on where the most expensive queries
lie. When your application has free form queries all over the code, it
requires someone to look at each call and interpret the cost, as ensure
performance is acceptable for the new source.&lt;/p&gt;
&lt;p&gt;If any layer should be abstracted, it's the datastore. Abstracting the
datastore in a client object makes multiple refactors simpler:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;adding an index and modifying queries to hit that index&lt;/li&gt;
&lt;li&gt;switching datasources&lt;/li&gt;
&lt;li&gt;putting the database behind another web service&lt;/li&gt;
&lt;li&gt;adding timeouts and circuit breakers&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="internal-the-functional-developer-side"&gt;
&lt;h3&gt;Internal: the functional developer side&lt;/h3&gt;
&lt;p&gt;The client and datastore layers abstract away any refactoring that
only affects the way the user interacts with the application, or the
way data is stored. That leaves the final layer to focus on just the
behavior.&lt;/p&gt;
&lt;p&gt;The internal layer stitches together client and datastore, and
performs whatever other transformations or logic needs to be
performed. By abstracting out any modification to the schema that had
to be done on the client or datastore (including keeping multiple
representation for the API), you're afforded a layer that deals exclusively
with application behavior.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="an-example-of-a-cid-application"&gt;
&lt;h2&gt;An Example of a CID application&lt;/h2&gt;
&lt;p&gt;A theoretical organization for a CID application is:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
root:
  consumers:
    - HTTPPetV1
    - HTTPPetV2
    - SQSPetV1
  internal:
    # only a single internal representation is needed.
    - Pet
  datasource:
    # showcasing a migration from Postgres to MongoDB
    - PetPostgres
    - PetMongoDB
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="example-where-cid-helps"&gt;
&lt;h2&gt;Example Where CID helps&lt;/h2&gt;
&lt;p&gt;So I've spent a long time discussing the layers and their
responsibilities. If we go through all of this trouble, where does
this actually help?&lt;/p&gt;
&lt;div class="section" id="adding-a-new-api-version"&gt;
&lt;h3&gt;Adding a new API version&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;add a new API schema&lt;/li&gt;
&lt;li&gt;convert to internal representation&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="modifying-the-underlying-database"&gt;
&lt;h3&gt;Modifying the underlying database&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;modify the datasource client.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="complex-internal-representations"&gt;
&lt;h3&gt;Complex Internal Representations&lt;/h3&gt;
&lt;p&gt;If you need to keep some details in a Postgres database, and store
other values within memcache for common queries, this can be
encapsulated in the datasource layer.&lt;/p&gt;
&lt;p&gt;All too often the internal representations attempt to detail with this
type of complexity, which makes it much harder to understand the
application code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="maintaining-multiple-api-versions"&gt;
&lt;h3&gt;Maintaining Multiple API versions&lt;/h3&gt;
&lt;p&gt;Without clearly separating how an object is structured internally from
how consumers consume it, the details of the consumer leaks into the
internal representation.&lt;/p&gt;
&lt;p&gt;For example, attempting to support two API version, someone writes
some branched code to get the data they want. this pattern continues
for multiple parts of the code dealing with that data, until it
becomes hard to get a complete understanding of what in V1 is
consumed, and what in V2 is consumed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="final-thoughts"&gt;
&lt;h2&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;David Wheeler is quoted for saying:&lt;/p&gt;
&lt;blockquote&gt;
All problems in computer science can be solved by another level of indirection.&lt;/blockquote&gt;
&lt;p&gt;Indirection is handy because it encapsulates: you do not need a
complete understanding of the implementation to move forward.&lt;/p&gt;
&lt;p&gt;At the same time, too much indirection causes the inability to
understand the complete effect of a change.&lt;/p&gt;
&lt;p&gt;Balance is key, and using CID helps guide indirection where
it could help the most.&lt;/p&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="design"></category></entry><entry><title>KeyError in self._handlers: a journey deep into Tornado's internals</title><link href="keyerror-in-self_handlers-a-journey-deep-into-tornados-internals.html" rel="alternate"></link><published>2017-01-27T00:00:00+01:00</published><updated>2017-01-27T00:00:00+01:00</updated><author><name>Yusuke Tsutsumi</name></author><id>tag:None,2017-01-27:keyerror-in-self_handlers-a-journey-deep-into-tornados-internals.html</id><summary type="html">&lt;p&gt;If you've worked with tornado, you may have encountered a traceback of
a somewhat bewildering error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/local/lib/python2.7/site-packages/tornado/ioloop.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;832&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
&lt;span class="n"&gt;fd_obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler_func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_handlers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A few other people have been confused as …&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you've worked with tornado, you may have encountered a traceback of
a somewhat bewildering error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/usr/local/lib/python2.7/site-packages/tornado/ioloop.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;832&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
&lt;span class="n"&gt;fd_obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler_func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_handlers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A few other people have been confused as well. After some digging and a combination
of learning about the event loop, fork, and epoll, the answer finally entered into focus.&lt;/p&gt;
&lt;div class="section" id="tldr"&gt;
&lt;h2&gt;TLDR&lt;/h2&gt;
&lt;p&gt;If you're looking for the solution, don't call or start IOLoops before
an os.fork. This happens in web servers like gunicorn, as well as
tornado.multiprocess, so be aware of that caveat as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="but-why-does-this-happen"&gt;
&lt;h2&gt;But why does this happen?&lt;/h2&gt;
&lt;p&gt;As I mentioned previously, this is a combination of behaviour all
across the system, python and tornado stack. Let's start with
learning more about that error specifically.&lt;/p&gt;
&lt;p&gt;The code the traceback is referring occurs in the the IOLoop:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# tornado/ioloop.py&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_events&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event_pairs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;events&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_events&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popitem&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;fd_obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler_func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_handlers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;handler_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd_obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What are these variables? you can read the IOLoop code yourself, but effectively:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;_handlers is a list of the callbacks that should be called once an async event is complete.&lt;/li&gt;
&lt;li&gt;_events is a list of events that have occurred, that need to be handled.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="what-is-an-fd"&gt;
&lt;h3&gt;What is an FD?&lt;/h3&gt;
&lt;p&gt;The handlers and events are both keyed off of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/File_descriptor"&gt;file descriptors&lt;/a&gt;. In a
few words, file descriptors represent a handle to some open file. In
unix, a pattern has propagated where a lot of resources (devices,
cgroups, active/inactive state) are referenced via file descriptors:
it became a lingua franca for low level resources because a lot of
tooling knows how to work with file descriptors, and writing and
reading to a file is simple.&lt;/p&gt;
&lt;p&gt;They're useful for tornado because sockets also have a file descriptor
represent them. So the tornado ioloop could wait for an event
affecting a socket, then pass that socket to a handler when a socket
event is fired (e.g. some new data came into the socket buffer).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-modifies-the-events-and-handlers"&gt;
&lt;h3&gt;What modifies the events and handlers?&lt;/h3&gt;
&lt;p&gt;A KeyError handlers means there's a key in events that is not in the
handlers: some code is causing events to be added to the ioloop, and
aren't registering a handler for it at the same time. So how does that
happen in the code?&lt;/p&gt;
&lt;p&gt;A good starting point is looking where _handlers and _events are
modified in the code. In all of the tornado code, there's only a
couple places:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# tornado/ioloop.py&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split_fd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_handlers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stack_context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_impl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;events&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ERROR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# tornado/ioloop.py&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;remove_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split_fd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_handlers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_events&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_impl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unregister&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;gen_log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Error deleting fd from IOLoop&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc_info&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looking at these pieces, the code is pretty solid:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;handlers are added only in add_handler, and they are added to a _impl.register&lt;/li&gt;
&lt;li&gt;handlers are only removed in remove_handler, where they are removed in _events, _handlers and _impl.&lt;/li&gt;
&lt;li&gt;events are added to _events in _impl.poll()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So the removing of handlers always make sure that events no longer has
it anymore, and it removes it from this impl thing too.&lt;/p&gt;
&lt;p&gt;But what is impl? Could impl be adding fd's for events that don't have handlers?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="impl-polling-objects"&gt;
&lt;h3&gt;impl: polling objects&lt;/h3&gt;
&lt;p&gt;It turns out _impl is chosen based on the OS. There is a little bit of
indirection here, but the IOLoop class in tornado extends a configurable object,
which selects the class based on the method configurable_default:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# tornado/ioloop.py&lt;/span&gt;
&lt;span class="nd"&gt;@classmethod&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;configurable_default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;epoll&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tornado.platform.epoll&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;EPollIOLoop&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;EPollIOLoop&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;kqueue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Python 2.6+ on BSD or Mac&lt;/span&gt;
        &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tornado.platform.kqueue&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;KQueueIOLoop&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;KQueueIOLoop&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tornado.platform.select&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SelectIOLoop&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;SelectIOLoop&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And each of these loop implementations pass it's own argument into the impl argument:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;EPollIOLoop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PollIOLoop&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EPollIOLoop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;impl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;epoll&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looking at select.epoll, it follows the interface of a &lt;a class="reference external" href="https://docs.python.org/2/library/select.html#polling-objects"&gt;polling object&lt;/a&gt;: a
class in the Python standard library that has the ability to poll for
changes to file descriptors. If something happens to a file descriptor
(e.g. a socket recieving data), the polling object, it will return
back the file descriptor that was triggered.&lt;/p&gt;
&lt;p&gt;Different architectures have different polling objects
implemented. The avaialable ones in tornado by default are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;epoll (Linux)&lt;/li&gt;
&lt;li&gt;kqueue (OSX / BSD)&lt;/li&gt;
&lt;li&gt;select Windows use&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In our case, this was happening on Linux, so we'll look at epoll.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="epoll"&gt;
&lt;h3&gt;epoll&lt;/h3&gt;
&lt;p&gt;So what is epoll? It's documented in the &lt;a class="reference external" href="https://docs.python.org/3/library/select.html#epoll-objects"&gt;Python standard library&lt;/a&gt;, but
it's a wrapper around the &lt;a class="reference external" href="http://man7.org/linux/man-pages/man7/epoll.7.html"&gt;epoll&lt;/a&gt; Linux system calls.&lt;/p&gt;
&lt;p&gt;The ioloop code actually looks like:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;wait for epoll to return a file descriptor that has an event&lt;/li&gt;
&lt;li&gt;execute the handler (which will presumably register another handler if another step is required, or not if it's complete)&lt;/li&gt;
&lt;li&gt;repeat.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;epoll has two different configurations, but the one tornado uses is
edge-polling: it only triggers when a CHANGE occurs, vs when a
specific level is hit. In other words, it will only trigger when new
data is available: if the user decides to do nothing with the data,
epoll will not trigger again.&lt;/p&gt;
&lt;p&gt;epoll works by registering file descriptors for the epoll object to
listen to. You can also stop listening to file descriptors as well.&lt;/p&gt;
&lt;p&gt;So epoll works great for an event loop. But is it possible to somehow
register file descriptors to the epoll/impl object without using the
method above?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="epoll-and-os-fork"&gt;
&lt;h3&gt;epoll and os.fork&lt;/h3&gt;
&lt;p&gt;It isn't possible to register things outside of the impl
object. But, os.fork can cause some weird behaviour here. See, the way
that one interfaces with epoll is using file descriptors: you have an
fd to the epoll object, and you can use Linux system calls to work
with that:&lt;/p&gt;
&lt;p&gt;As mentioned previously, file descriptors is a common way to reference
some object when using Linux kernel system calls.&lt;/p&gt;
&lt;p&gt;Another common system call is &lt;a class="reference external" href="http://man7.org/linux/man-pages/man2/fork.2.html"&gt;fork&lt;/a&gt;. The
documentation of fork specifies that fork is equivalent to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;copying the memory of the current process to a new space&lt;/li&gt;
&lt;li&gt;spawning a new process that uses the new copy.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is fine for most objects in memory, but how about file
descriptors, which reference some object outside of the memory space
of the current process.&lt;/p&gt;
&lt;p&gt;In the case of file descriptors, the file descriptor is also cloned to
the new fork. In other words, both the parent and the child process
will have a reference to the same file descriptor.&lt;/p&gt;
&lt;p&gt;So, what does this mean for epoll, which is just another file
descriptor under the hood? Well, you can probably guess.&lt;/p&gt;
&lt;p&gt;It gets shared.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-the-bug-works"&gt;
&lt;h3&gt;How the bug works&lt;/h3&gt;
&lt;p&gt;So this is the crux of the issue. When an os.fork occurs, the parent
and the child share the SAME epoll. So for an IOLoop that is created
by the parent object, the child process uses the same epoll as well!&lt;/p&gt;
&lt;p&gt;So, that allows a condition like this:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;parent creates an IOLoop loop_1, with an epoll epoll_1&lt;/li&gt;
&lt;li&gt;parent calls os.fork, creating loop_2, which shares the same epoll_2&lt;/li&gt;
&lt;li&gt;parent starts ioloop, waits for epoll_1.poll()&lt;/li&gt;
&lt;li&gt;child adds a handler for fd_2 to epoll_1&lt;/li&gt;
&lt;li&gt;parent gets back fd_2, but doesn't have a handler for it, and raises the KeyError.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So this will pretty much happen at some point anytime a new ioloop is not created for a child process.&lt;/p&gt;
&lt;p&gt;Here's a repro script. I couldn't figure out a good way to kill this
gracefully, so be warned this will need to be killed externally.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;select&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tornado.ioloop&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tornado.httpclient&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tornado.web&lt;/span&gt;

&lt;span class="n"&gt;serversocket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;serversocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setsockopt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOL_SOCKET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SO_REUSEADDR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;serversocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;serversocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tornado&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ioloop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IOLoop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serversocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EPOLLIN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="how-about-gunicorn-or-tornado-multiprocess"&gt;
&lt;h3&gt;How about gunicorn or tornado.multiprocess?&lt;/h3&gt;
&lt;p&gt;So how to avoid this in gunicorn or tornado.multiprocess, which uses
an os.fork? The best practice is to not start the ioloop until AFTER
the fork: calling ioloop.Instance() or current() will create an ioloop whose ioloop will be shared
by any child ioloop, without explicitly clearing it.&lt;/p&gt;
&lt;p&gt;Gunicorn calls a fork as it's spawning a worker:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# gunicorn/arbiter.py&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;spawn_worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;worker_age&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;worker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;worker_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;worker_age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LISTENERS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                               &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                               &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cfg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pre_fork&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WORKERS&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pid&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;worker&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pid&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Tornado is an awesome framework, but it's not simple. However, thanks
to well documented pieces, it's possible to diagnose even complex
issues like this, and do a bit of learning along the way.&lt;/p&gt;
&lt;p&gt;Also, os.fork is not a complete guarantee that you'll get a unique
instance of every object you use. Beware file descriptors.&lt;/p&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="python"></category></entry><entry><title>Building a Windows Gaming VM for Steam Link: 2016 Edition</title><link href="building-a-windows-gaming-vm-for-steam-link-2016-edition.html" rel="alternate"></link><published>2017-01-06T00:00:00+01:00</published><updated>2017-01-06T00:00:00+01:00</updated><author><name>Yusuke Tsutsumi</name></author><id>tag:None,2017-01-06:building-a-windows-gaming-vm-for-steam-link-2016-edition.html</id><summary type="html">&lt;p&gt;In 2016, I bought a Steam Link, allowing me to play games on my TV
without having to lug a whole physical machine over.  The main
requirement of Steam Link is the link and the PC on the same network:
this allows encoded streaming from the PC to the link …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In 2016, I bought a Steam Link, allowing me to play games on my TV
without having to lug a whole physical machine over.  The main
requirement of Steam Link is the link and the PC on the same network:
this allows encoded streaming from the PC to the link, and the link
sending back input it is receiving from various bluetooth and USB
devices (controllers, keyboards, mice).&lt;/p&gt;
&lt;p&gt;The Steam Link combined with Steam and it's Big Picture UI is a very
decent replacement for a console: a large game selection, decent UI
for navigating the catalogue and purchasing / installing new games.&lt;/p&gt;
&lt;p&gt;Unfortunately for those running Linux: Steam is most valuable on Windows: the game
selection for Linux doesn't come close to the catalogue on Windows.&lt;/p&gt;
&lt;p&gt;You can dual boot to solve this issue, but it then prevents someone
else from playing the Steam Link when the Linux partition is in
use. Thus, a project was born:&lt;/p&gt;
&lt;div class="section" id="create-a-windows-gaming-vm-that-works-well-with-steam-link"&gt;
&lt;h2&gt;Create a Windows Gaming VM that works well with Steam Link&lt;/h2&gt;
&lt;p&gt;More precisely, the requirements are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A Windows VM
* exposed on the same network as the Link
* performance comparable to a dual boot
* controllable without it's own keyboard / mouse&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's some information about my host:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Motherboard: MSI X79A-GD65 (This doesn't matter too much though)&lt;/li&gt;
&lt;li&gt;CPU: i7-3820, 3.6GHZ&lt;/li&gt;
&lt;li&gt;GPU: GTX 1060 (for Windows)&lt;/li&gt;
&lt;li&gt;RAM: 32GB (1333MHz)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Really, as long as you have a recent motherboard that supports VT-X
and VT-D (the native virtualization technology needed for native
passthroughs), you should be ok.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="implementation"&gt;
&lt;h2&gt;Implementation&lt;/h2&gt;
&lt;p&gt;I was able to accomplish this by:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/PCI_passthrough_via_OVMF"&gt;https://wiki.archlinux.org/index.php/PCI_passthrough_via_OVMF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://synergy-project.org/"&gt;Synergy&lt;/a&gt; (server on Linux, client on Windows):&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It's left as an excersize as a reader to learn more about how those work. The only real caveat
was networking&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="vm-networking"&gt;
&lt;h2&gt;VM Networking&lt;/h2&gt;
&lt;p&gt;The VM networking was the trickiest aspect. This is due to an uncommon
requiremental combination of:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the VM being available on the local network (via some IP)&lt;/li&gt;
&lt;li&gt;the VM being able to communicate to the host machine&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The two can be accomplished separately. Using KVM, &lt;a class="reference external" href="http://virt.kernelnewbies.org/MacVTap"&gt;macvtap&lt;/a&gt; with a bridged configuration
worked great for exposing the VM, but it can not resolve the IP to the host. I was able to
find a stackoverflow article&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-results"&gt;
&lt;h2&gt;The Results&lt;/h2&gt;
&lt;p&gt;The results are pretty good. With a native Windows OS,
I was getting roughly 12ms latency from the Steam Link.
With the VM, I'm getting roughly the same.&lt;/p&gt;
&lt;p&gt;For other reasons, I had to add another switch in between my Steam
Link and PC. That had a much larger negative impact: 22ms now vs 12ms
before.&lt;/p&gt;
&lt;/div&gt;
</content><category term="ops"></category><category term="kvm"></category><category term="vm"></category></entry><entry><title>Introducing transmute-core: quickly create documented, input validating APIs for any web framework</title><link href="introducing-transmute-core-quickly-create-documented-input-validating-apis-for-any-web-framework.html" rel="alternate"></link><published>2017-01-03T00:00:00+01:00</published><updated>2017-01-03T00:00:00+01:00</updated><author><name>Yusuke Tsutsumi</name></author><id>tag:None,2017-01-03:introducing-transmute-core-quickly-create-documented-input-validating-apis-for-any-web-framework.html</id><summary type="html">&lt;p&gt;A majority of my career has been spent on building web services in
Python. Specifically, internal ones that have minimal or no UIs, and
speak &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Representational_state_transfer"&gt;REST&lt;/a&gt; (or
at least are rest-ish).&lt;/p&gt;
&lt;p&gt;With each new service, I found myself re-implementing work to
make user-friendly REST APIs:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;validation of incoming data, and …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;A majority of my career has been spent on building web services in
Python. Specifically, internal ones that have minimal or no UIs, and
speak &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Representational_state_transfer"&gt;REST&lt;/a&gt; (or
at least are rest-ish).&lt;/p&gt;
&lt;p&gt;With each new service, I found myself re-implementing work to
make user-friendly REST APIs:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;validation of incoming data, and descriptive errors when a field does not
match the type or is otherwise invalid.&lt;/li&gt;
&lt;li&gt;documenting said schema, providing UIs or wiki pages allowing users to
understand what the API provides.&lt;/li&gt;
&lt;li&gt;handling serialization to and from multiple content types (json, yaml)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is maddening work to do over and over again, and details are
often missed: sometimes yaml is not supported for a particular API, or
there is a specific field that is not validated. Someone will ask about
an API that you changed, and forgot to document a new parameter. It's hard to
scale API maintenance when you're dealing with forgetting some minute boilerplate.&lt;/p&gt;
&lt;p&gt;This was further exacerbated by using different web frameworks for
different projects. Every framework provides their own REST plugin or
library, and often there's a lack of functional parity, or declaring
an API is completely different and requires learning multiple
approaches.&lt;/p&gt;
&lt;p&gt;So with this monumental pain, what if I told you can get an API that:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;validates incoming data types&lt;/li&gt;
&lt;li&gt;supports multiple content types&lt;/li&gt;
&lt;li&gt;has a fully documented UI&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Just by writing a vanilla Python function? And what if I told you
this can work for YOUR Python framework of choice in 100 statements
of Python code?&lt;/p&gt;
&lt;p&gt;Well, that's what the transmute framework is.&lt;/p&gt;
&lt;div class="section" id="how-it-works"&gt;
&lt;h2&gt;How it works&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://transmute-core.readthedocs.io/en/latest/"&gt;transmute-core&lt;/a&gt; is
a library that provides tools to quickly implement rest APIs. It's
designed to be consumed indirectly, through a thin layer that adapts
it to the style of the individual framework.&lt;/p&gt;
&lt;div class="section" id="http-endpoints"&gt;
&lt;h3&gt;HTTP Endpoints&lt;/h3&gt;
&lt;p&gt;Here is an example of a GET endpoint in flask:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;flask_transmute&lt;/span&gt;

&lt;span class="c1"&gt;# flask-like decorator.&lt;/span&gt;
&lt;span class="nd"&gt;@flask_transmute&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;paths&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/multiply&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# tell transmute what types are, which ensures validations&lt;/span&gt;
&lt;span class="nd"&gt;@flask_transmute&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;annotate&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;left&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;right&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;return&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;# the function is a vanilla Python function&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And one in aiohttp, the web framework that uses Python 3's asyncio:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;aiohttp_transmute&lt;/span&gt;

&lt;span class="nd"&gt;@aiohttp_transmute&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;paths&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/multiply&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# tell transmute what types are, which ensures validations&lt;/span&gt;
&lt;span class="c1"&gt;# Python3.5+ supports annotations natively&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# request is provided by aiohttp.&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;

&lt;span class="n"&gt;aiohttp_transmute&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Both do the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;generate a valid route in the target framework&lt;/li&gt;
&lt;li&gt;detect the content type (yaml or json, and parse the body)&lt;/li&gt;
&lt;li&gt;verify that input parameters match the parameters specified. return a 400 status
code an details if not.&lt;/li&gt;
&lt;li&gt;write back yaml or json, depending on the content type&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that we don't have to deal with the content type serialization,
read from request objects, or returning a valid response object:
that's all handled by transmute. This keeps the functions cleaner in
general: it looks similar to any other Python function.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="complex-schemas-via-schematic-or-any-validation-framework"&gt;
&lt;h3&gt;Complex Schemas via Schematic (or any validation framework)&lt;/h3&gt;
&lt;p&gt;Primitive types in the parameters are OK, but it's often true that
more complex types are desired.&lt;/p&gt;
&lt;p&gt;Schema declaration and validation has multiple solutions
already, so transmute defers this other libraries. By default transmute uses
&lt;a class="reference external" href="http://schematics.readthedocs.org/en/latest/"&gt;schematics&lt;/a&gt;.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;schematics.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Model&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;schematics.types&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StringType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IntType&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringType&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IntType&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="c1"&gt;# passing in a schematics model as the type enables&lt;/span&gt;
&lt;span class="c1"&gt;# validation and creation of the object when converted&lt;/span&gt;
&lt;span class="c1"&gt;# to an API.&lt;/span&gt;
&lt;span class="nd"&gt;@annotate&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;card&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Card&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;submit_card&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save_card&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;card&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course, some may prefer other solutions like marshmallow. In that
case, transmute-core provides a transmute-context for users to customize and use
their own implementation of transmute's serializers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;transmute_core&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TransmuteContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default_context&lt;/span&gt;

&lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TransmuteContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serializers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;MySerializer&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# alternatively, you could modify the default context directly&lt;/span&gt;
&lt;span class="c1"&gt;# (be careful about where this code is called: it needs&lt;/span&gt;
&lt;span class="c1"&gt;# to happen before any routes are constructed)&lt;/span&gt;
&lt;span class="n"&gt;default_context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serializers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MySerializer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="documentation-via-swagger"&gt;
&lt;h3&gt;Documentation via Swagger&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://swagger.io/"&gt;Swagger / OpenAPI&lt;/a&gt; allows one to define a REST API using json. Transmute generates
swagger json files based on the transmute routes added to an app, and transmute-core provides the static CSS and JavaScript
files required to render a nice documentation interface for it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_transmute&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;add_swagger&lt;/span&gt;

&lt;span class="c1"&gt;# reads all the transmute routes that have been added, extracts their&lt;/span&gt;
&lt;span class="c1"&gt;# swagger definitions, and generates a swagger json and an HTML page that renders it.&lt;/span&gt;
&lt;span class="n"&gt;add_swagger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/swagger.json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/swagger&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;img alt="" src="images/transmute-core-swagger.png" /&gt;
&lt;br/&gt;&lt;br/&gt;&lt;p&gt;This also means clients can be auto-generated as well: swagger has a
large number of open source projects dedicated to parsing and
generating swagger clients. However, I haven't explored this too
deeply.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="lightweight-framework-implementations"&gt;
&lt;h2&gt;Lightweight Framework Implementations&lt;/h2&gt;
&lt;p&gt;Earlier in this post, it is mentioned that there should a wrapper
around transmute-core for your framework, as the style of how to add
routes and how to extract values from requests may vary.&lt;/p&gt;
&lt;p&gt;A goal of transmute was to make the framework-specific code as thin as
possible: this allows more re-use and common behavior across the
frameworks, enabling developers across frameworks to improve
functionality for everyone.&lt;/p&gt;
&lt;p&gt;Two reference implementations exist, and they are very thin. As of this writing, they are at:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;flask-transmute: 166 lines of code, 80 statements&lt;/li&gt;
&lt;li&gt;aiohttp-transmute: 218 lines of code, 103 statements (a little bloated to support legacy APIs)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A one-page example for flask integration is also provided, to
illustrate what is required to create a new one. That's 200 LOC with
comments, a little more than 100 without.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://transmute-core.readthedocs.io/en/latest/creating_a_framework.html"&gt;http://transmute-core.readthedocs.io/en/latest/creating_a_framework.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="impressions"&gt;
&lt;h2&gt;Impressions&lt;/h2&gt;
&lt;p&gt;Frameworks are always a means to an end: it's about reducing that
effort between what you want to build and actually building it.&lt;/p&gt;
&lt;p&gt;I love great, well designed APIs. And dealing with the minutiae of
some detail I missed in boilerplate content type handling or object
serialization was draining the enjoyment out of authoring them. Since
I've started using transmute for all of my projects, it's let me focus
on what I care about most: actually writing the functional code, and
designing the great interfaces that let people use them. For the most part,
it feels like just writing another function in Python.&lt;/p&gt;
&lt;p&gt;The auto-documentation is freeing from both sides: as an author I can
keep my documentation in line with my implementation, because my
implementation is the source. For consumers, they're immediately
provided with a simple UI where they can rapidly iterate with the API
call they would like to make.&lt;/p&gt;
&lt;p&gt;It's also great knowing I can use transmute in the next framework,
whatever that may be: I can take all the work and behavior that's
embedded in transmute, with a module or two's worth of code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://transmute-core.readthedocs.io/en/latest/index.html"&gt;Give it a shot&lt;/a&gt;! &lt;a class="reference external" href="https://github.com/toumorokoshi/transmute-core"&gt;Issues
and PRs&lt;/a&gt; are welcome, and I'd love to see someone apply transmute to
another framework.&lt;/p&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="Python"></category></entry><entry><title>Global logging with flask</title><link href="global-logging-with-flask.html" rel="alternate"></link><published>2016-12-22T00:00:00+01:00</published><updated>2016-12-22T00:00:00+01:00</updated><author><name>Yusuke Tsutsumi</name></author><id>tag:None,2016-12-22:global-logging-with-flask.html</id><summary type="html">&lt;p&gt;As of December 2016, &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; has a built-in
logger that it instantiates for you. Unfortunately, this misses the
errors and other log messages in other libraries that may also be
valuable.&lt;/p&gt;
&lt;p&gt;It would be nice to have a single logger, one that captures BOTH
library AND app logs. For those …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As of December 2016, &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; has a built-in
logger that it instantiates for you. Unfortunately, this misses the
errors and other log messages in other libraries that may also be
valuable.&lt;/p&gt;
&lt;p&gt;It would be nice to have a single logger, one that captures BOTH
library AND app logs. For those that want a global logger, this may
take a few concept to get right. You have to:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;undo flask's logging&lt;/li&gt;
&lt;li&gt;set up your own logging&lt;/li&gt;
&lt;li&gt;set log levels, as the default may not suit you.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Combined, this ends up looking like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_app&lt;/span&gt;

&lt;span class="n"&gt;LOG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my_log&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;LOG2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.toheunateh&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;route&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;current_app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;flask logger: foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;LOG&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;log: foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;LOG2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;log2: foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello!&amp;quot;&lt;/span&gt;


&lt;span class="c1"&gt;# create your own custom handler and formatter.&lt;/span&gt;
&lt;span class="c1"&gt;# you can also use logging.basicConfig() to get&lt;/span&gt;
&lt;span class="c1"&gt;# the python default.&lt;/span&gt;
&lt;span class="n"&gt;out_hdlr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StreamHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fmt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Formatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%(asctime)s&lt;/span&gt;&lt;span class="s2"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(name)s&lt;/span&gt;&lt;span class="s2"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(levelname)s&lt;/span&gt;&lt;span class="s2"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;out_hdlr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setFormatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;out_hdlr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# append to the global logger.&lt;/span&gt;
&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;out_hdlr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# removing the handler and&lt;/span&gt;
&lt;span class="c1"&gt;# re-adding propagation ensures that&lt;/span&gt;
&lt;span class="c1"&gt;# the root handler gets the messages again.&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handlers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;propagate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And you get the right messages. Voila!&lt;/p&gt;
</content><category term="programming"></category><category term="python"></category><category term="flask"></category></entry><entry><title>Hierarchal Naming</title><link href="hierarchal-naming.html" rel="alternate"></link><published>2016-10-05T00:00:00+02:00</published><updated>2016-10-05T00:00:00+02:00</updated><author><name>Yusuke Tsutsumi</name></author><id>tag:None,2016-10-05:hierarchal-naming.html</id><summary type="html">&lt;p&gt;One of the most interesting artifacts of most programming languages using English conventions is variable naming. Today I contend that:&lt;/p&gt;
&lt;div class="section" id="english-grammar-is-a-terrible-programming-default"&gt;
&lt;h2&gt;English Grammar is a Terrible Programming Default&lt;/h2&gt;
&lt;p&gt;Consider how you would specify that a room is for guests in English,
or a car is designed to be sporty. In both …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;One of the most interesting artifacts of most programming languages using English conventions is variable naming. Today I contend that:&lt;/p&gt;
&lt;div class="section" id="english-grammar-is-a-terrible-programming-default"&gt;
&lt;h2&gt;English Grammar is a Terrible Programming Default&lt;/h2&gt;
&lt;p&gt;Consider how you would specify that a room is for guests in English,
or a car is designed to be sporty. In both cases, the specifier comes
before the object or category:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Sports Car&lt;/li&gt;
&lt;li&gt;Guest Room&lt;/li&gt;
&lt;li&gt;Persian Cat&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since programming languages are primarily based on English, it's a natural default to name your variables in a similar order:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;PersianCat&lt;/li&gt;
&lt;li&gt;TabbyCat&lt;/li&gt;
&lt;li&gt;SiameseCat&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To further qualify your classes, one prepends additional information:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;RedTabbyCat&lt;/li&gt;
&lt;li&gt;BlueTabbyCat&lt;/li&gt;
&lt;li&gt;BlackTabbyCat&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And the pattern continues. As more qualifiers are added, the more names are prepended.&lt;/p&gt;
&lt;p&gt;This reads well, if our main goal was to make software read as close
to english as possible. However, software has a goal that's more
important than grammatical correctness: organization and searchability.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="naming-should-have-qualifiers-last"&gt;
&lt;h2&gt;Naming should have qualifiers last&lt;/h2&gt;
&lt;p&gt;Consider instead appending qualifying variables to the end, as with a namespace:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;CatPersian&lt;/li&gt;
&lt;li&gt;CatTabby&lt;/li&gt;
&lt;li&gt;CatSiamese&lt;/li&gt;
&lt;li&gt;CatTabbyRed&lt;/li&gt;
&lt;li&gt;CatTabbyBlue&lt;/li&gt;
&lt;li&gt;CatTabbyBlack&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It's still legible as an English speaker: it's clear the adjectives are inverted. It also provides a couple other advantages too:&lt;/p&gt;
&lt;div class="section" id="sortability"&gt;
&lt;h3&gt;Sortability&lt;/h3&gt;
&lt;p&gt;If you sorted all class names next to each other, the groupings would happen naturally:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;CatTabbyRed&lt;/li&gt;
&lt;li&gt;CatTabbyBlue&lt;/li&gt;
&lt;li&gt;CatTabbyBlack&lt;/li&gt;
&lt;li&gt;Truck&lt;/li&gt;
&lt;li&gt;PimentoLoaf&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In contrast to the previous example:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;BlueTabbyCat&lt;/li&gt;
&lt;li&gt;BlackTabbyCat&lt;/li&gt;
&lt;li&gt;PimentoLoaf&lt;/li&gt;
&lt;li&gt;RedTabbyCat&lt;/li&gt;
&lt;li&gt;Truck&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="clear-correlation-while-scanning"&gt;
&lt;h3&gt;Clear correlation while scanning&lt;/h3&gt;
&lt;p&gt;If you're trying to look through a table of values quickly,
using the reverse-adjective writing shows a clear organization, even when unsorted.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;CatTabbyBlue&lt;/li&gt;
&lt;li&gt;PimentoLoaf&lt;/li&gt;
&lt;li&gt;CatPersion&lt;/li&gt;
&lt;li&gt;Truck&lt;/li&gt;
&lt;li&gt;CatTabbyRed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In contrast to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;BlueTabbyCat&lt;/li&gt;
&lt;li&gt;PimentoLoaf&lt;/li&gt;
&lt;li&gt;PersianCat&lt;/li&gt;
&lt;li&gt;Truck&lt;/li&gt;
&lt;li&gt;RedTabbyCat&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Our variable naming convention wasn't deliberate: it was an artifact
of the language that it was modeled against. Let's adopt conventions that
come from a logical foundation. Like more search-friendly ordering of class qualifiers.&lt;/p&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="design"></category></entry><entry><title>How I Learn More Vocabulary</title><link href="how-i-learn-more-vocabulary.html" rel="alternate"></link><published>2015-10-14T00:00:00+02:00</published><updated>2015-10-14T00:00:00+02:00</updated><author><name>Yusuke Tsutsumi</name></author><id>tag:None,2015-10-14:how-i-learn-more-vocabulary.html</id><summary type="html">&lt;p&gt;When it comes to reaching language proficiency, vocabulary is
important. To reach proficiency as &lt;cite&gt;quickly&lt;/cite&gt; as possible, the &lt;cite&gt;choice&lt;/cite&gt; of
vocabulary is important.&lt;/p&gt;
&lt;p&gt;I'm going to explain my approach a bit.&lt;/p&gt;
&lt;div class="section" id="how-to-learn-vocabulary"&gt;
&lt;h2&gt;How To Learn Vocabulary&lt;/h2&gt;
&lt;p&gt;Vocabulary from a spoken standpoint requires quick recall without a
reference, which is really only …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;When it comes to reaching language proficiency, vocabulary is
important. To reach proficiency as &lt;cite&gt;quickly&lt;/cite&gt; as possible, the &lt;cite&gt;choice&lt;/cite&gt; of
vocabulary is important.&lt;/p&gt;
&lt;p&gt;I'm going to explain my approach a bit.&lt;/p&gt;
&lt;div class="section" id="how-to-learn-vocabulary"&gt;
&lt;h2&gt;How To Learn Vocabulary&lt;/h2&gt;
&lt;p&gt;Vocabulary from a spoken standpoint requires quick recall without a
reference, which is really only attained by practicing the same exact
things over and over again.&lt;/p&gt;
&lt;p&gt;I use flash cards, because they're the most
straightforward review method. I have two flash cards per word, one
testing translating from the language, and another translating to.&lt;/p&gt;
&lt;p&gt;Anki is a great choice for any flash card learning, because it stores
your data about what you've learned, and modifies the frequency of the
cards accordingly: &lt;a class="reference external" href="http://ankisrs.net/"&gt;http://ankisrs.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Regardless of the medium, the real challenge is investing the time and
effort. It's very easy to stop once you're a week in, or a month
in. In order to minimize this risk, vocabulary needs to be a routine:
it must be a part of one's daily schedule.&lt;/p&gt;
&lt;p&gt;For me, I've made my commute to and from work into review time for my
language flash cards. I listen to the same playlist (something with no
vocals), start up Anki, and get to work until I've reviewed them
all. I've been doing it with German for over a year (roughly 30
minutes per weekday), and I've learned about 800 words completely.&lt;/p&gt;
&lt;p&gt;Per word, it's taken me 7500 (~50 weeks * 5 days * 30 minutes a day) /
800 ~= 10 minutes a word. Not bad (although some are easier than
others).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-vocabulary-to-learn"&gt;
&lt;h2&gt;What Vocabulary to Learn&lt;/h2&gt;
&lt;p&gt;Timothy Ferris has &lt;a class="reference external" href="http://fourhourworkweek.com/2009/01/20/learning-language/"&gt;a great blog post&lt;/a&gt; about
learning languages (&lt;a class="reference external" href="http://fourhourworkweek.com/2014/03/21/how-to-learn-a-foreign-language-2/"&gt;a couple&lt;/a&gt;,
actually) where he talks about finding the most frequently used words
and learning those first. It's a statistical method that is the best value for
your time in terms of vocabulary.&lt;/p&gt;
&lt;p&gt;For any given language, a Google search will probably find a list
somewhere. In the case of Japanese In the case of Japanese, there's a
great post showing the most common terms used:
&lt;a class="reference external" href="http://pomax.nihongoresources.com/index.php?entry=1222520260"&gt;http://pomax.nihongoresources.com/index.php?entry=1222520260&lt;/a&gt;. Even if
you don't understand the grammar at all, the vocabulary alone helps
you get a great context on a conversation.&lt;/p&gt;
&lt;p&gt;It's worth emphasizing the distinction between spokend and written
word frequency. My suggestion would be start with spoken.&lt;/p&gt;
&lt;p&gt;My suggestion would be to learn the first 100 or 200 words. This
provides a solid base of roughly one half of all spoken words.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="where-to-find-more-vocab"&gt;
&lt;h2&gt;Where to Find More Vocab&lt;/h2&gt;
&lt;p&gt;After you have a good base set of words, I would move on to learning
vocab that really interests you. Find a book, tv show, or game that is
available in your target language, and add any vocab you don't know
into the flash cards as you go.&lt;/p&gt;
&lt;p&gt;For me, I wanted to learn German.  Luckily, I love video games, a
medium that fairly often has spoken dialog and text. I found a game
I've wanted to play for a while, converted all text and audio to
German, and started it up.&lt;/p&gt;
&lt;p&gt;As soon as I encountered a word I didn't know, I paused the game,
wrote up a flash card, and continued to play.  As soon as I reached
100 new words, I stopped playing the game; I was only allowed to
resume when I had finished learning all my outstanding vocabulary.&lt;/p&gt;
&lt;p&gt;The beginning of this process was incredibly painful: I would play for
maybe half an hour before I had over one hundred words to cover! But
as time passed, I learned more, and the game began to move a bit more
quickly. I also sometimes found places in the game where I was unable
to pause. In that case, I used youtube videos of others playing the
game to supplement: &lt;a class="reference external" href="https://www.youtube.com/results?search_query=let%27s+play+deutsch"&gt;let's plays in German&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For Japanese, if you like video games you're there: &lt;a class="reference external" href="http://store.steampowered.com/search/?snr=1_4_4__12&amp;amp;term=#sort_by=_ASC&amp;amp;supportedlang=japanese&amp;amp;page=1"&gt;there are lots&lt;/a&gt; &lt;a class="reference external" href="http://store.steampowered.com/app/292120/?snr=1_7_15__13"&gt;of
Japanese&lt;/a&gt;
&lt;a class="reference external" href="http://store.steampowered.com/app/8870/?snr=1_7_7_230_150_3"&gt;video games with full audio.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you prefer TV or movies, I'd suggest a website like &lt;a class="reference external" href="http://www.crunchyroll.com/videos/drama"&gt;Crunchyroll&lt;/a&gt; or Netflix. I think
Japanese comics (Manga) is also a very good choice: unfortunately it's
not available readily online. However, I've found that buying whole
series' from EBay to be a straightforward process.&lt;/p&gt;
&lt;/div&gt;
</content><category term="languages"></category><category term="languages"></category></entry><entry><title>Hacking Language Learning</title><link href="hacking-language-learning.html" rel="alternate"></link><published>2015-09-03T00:00:00+02:00</published><updated>2015-09-03T00:00:00+02:00</updated><author><name>Yusuke Tsutsumi</name></author><id>tag:None,2015-09-03:hacking-language-learning.html</id><summary type="html">&lt;p&gt;Let's start with a disclaimer: I'm not a teacher, and I have no
experience in teaching languages. I've been trying to learn quite a
few though. Everything stated here is in my own, anecdotal case study
opinion.&lt;/p&gt;
&lt;p&gt;If the goal is some level or proficiency, I feel like the standard …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Let's start with a disclaimer: I'm not a teacher, and I have no
experience in teaching languages. I've been trying to learn quite a
few though. Everything stated here is in my own, anecdotal case study
opinion.&lt;/p&gt;
&lt;p&gt;If the goal is some level or proficiency, I feel like the standard courses
don't accomplish that. Almost everyone I've talked to has started
learning a language in either primary or secondary education, but very few have
retained enough to continue to be proficient.&lt;/p&gt;
&lt;p&gt;This post marks the start of my journey toward a reproducible
curriculum that will produce language proficient individuals. I define
one as proficient in a language when:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;one can listen (if applicable) to a conversation in a target
language at the speed natives speak, and understand the majority of the content.&lt;/li&gt;
&lt;li&gt;one can read and write in the target language.&lt;/li&gt;
&lt;li&gt;one makes grammatical mistakes 1% of the time.&lt;/li&gt;
&lt;li&gt;one can speak in the target language, with a pronunciation that's
understandable by a native speaker.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Seeing as the US Department of State has their own &lt;a class="reference external" href="https://careers.state.gov/gateway/lang_prof_def.html"&gt;definition&lt;/a&gt;, I would put
my goal at a 3: minimal professional proficiency.&lt;/p&gt;
&lt;p&gt;Here's some of the things I think are worth being a primary focus:&lt;/p&gt;
&lt;div class="section" id="making-language-practice-a-habit"&gt;
&lt;h2&gt;Making Language Practice A Habit&lt;/h2&gt;
&lt;p&gt;Beyond all else, languages require a very large time investment, over
a long period of time. Memorization is a huge part of learning
languages: two thousand words is probably around the bare minimum to
hold a free-form conversation in a language. Memorization comes with
practice and repetition. In order for someone to keep their language
proficiency, languages must practiced routinely: in other words,
language practice must be a habit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="useful-from-day-one"&gt;
&lt;h2&gt;Useful from Day One&lt;/h2&gt;
&lt;p&gt;Learning a language comes with the steep learning curve: There is a
lot of knowledge to absorb, and the usefulness of that knowledge
increases exponentially near the end, but is very slow in the
beginning.&lt;/p&gt;
&lt;p&gt;The goal here would be to teach the material in a way where value is
maximized near the beginning. A high initial reward helps build a
habit that will take a student to language proficiency.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="next-steps"&gt;
&lt;h2&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;I'm bilingual in Japanese and English, so I will be using Japanese as
my test language for a lot of my teaching experiments. If you're
interested, please follow my blog by subscribing to the RSS
feeds. Thanks!&lt;/p&gt;
&lt;/div&gt;
</content><category term="languages"></category><category term="languages"></category></entry><entry><title>Test Classes Don't Work</title><link href="test-classes-dont-work.html" rel="alternate"></link><published>2015-09-01T00:00:00+02:00</published><updated>2015-09-01T00:00:00+02:00</updated><author><name>Yusuke Tsutsumi</name></author><id>tag:None,2015-09-01:test-classes-dont-work.html</id><summary type="html">&lt;p&gt;Test Classes don't work as a test structure.&lt;/p&gt;
&lt;p&gt;It's worth clarifying what I mean by the test class. I'm
speaking specifically about the following structure of an test:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;having a test class, that contains the setup and teardown method for test fixtures&lt;/li&gt;
&lt;li&gt;putting multiple tests in that class&lt;/li&gt;
&lt;li&gt;having the …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Test Classes don't work as a test structure.&lt;/p&gt;
&lt;p&gt;It's worth clarifying what I mean by the test class. I'm
speaking specifically about the following structure of an test:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;having a test class, that contains the setup and teardown method for test fixtures&lt;/li&gt;
&lt;li&gt;putting multiple tests in that class&lt;/li&gt;
&lt;li&gt;having the execution of a test look something like:
* run setup
* execute test
* run teardown&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More or less, something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestMyStuff&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture_one&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_fixture&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture_two&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_another_fixture&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tearDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="n"&gt;teardown_fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture_one&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="n"&gt;teardown_fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture_two&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_my_stuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture_one&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_ok&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This pattern is prevalent across testing suites, since they follow the
&lt;a class="reference external" href="http://www.martinfowler.com/bliki/Xunit.html"&gt;XUnit&lt;/a&gt; pattern of test design.&lt;/p&gt;
&lt;div class="section" id="why-test-classes-are-the-norm"&gt;
&lt;h2&gt;Why Test Classes are the Norm&lt;/h2&gt;
&lt;p&gt;Removing the setup and teardown from your test fixtures keep things
clean: it makes sense to remove them from you test body. When looking at code,
you only want to look at context that's relevant to you, otherwise it's harder
to identify what should be focused on:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_my_stuff&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;fixture&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_fixture&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_ok&lt;/span&gt;
    &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;teardown_fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, it makes sense to have setup and teardown methods. A lot of the
time, you'll have common sets of test fixtures, and you want to share
them without explicitly specifying them every time. Most languages
provide object-oriented programming, which allows state that is
accessible by all methods. Classes are a good vessel to give a test
access to a set of test fixtures.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="when-you-have-a-hammer"&gt;
&lt;h2&gt;When You Have a Hammer...&lt;/h2&gt;
&lt;p&gt;The thing about object oriented programming is, it's almost always a
single inheritance model, and multiple inheritance gets ugly
quickly. It's not very easy to compose test classes together. In the
context of test classes, why would you ever want to do that?&lt;/p&gt;
&lt;p&gt;Test fixtures. Tests depend on a variety of objects, and you don't
want to have to multiple the setup of the same test fixtures across
multiple classes. Even when you factor it out, it gets messy quick:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestA&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_fixture_a&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture_b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_fixture_b&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tearDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;teardown_fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture_a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;teardown_fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture_b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_my_thing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestB&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture_b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_fixture_b&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tearDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;teardown_fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture_b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_my_other_thing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestB&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture_c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_fixture_b&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture_b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_fixture_c&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tearDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;teardown_fixture&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture_b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_my_other_other_thing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this rate, a test class per test would become necessary, each with
the same code to set up and teardown the exact same fixture.&lt;/p&gt;
&lt;p&gt;To avoid this, there needs to be a test system that:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;has factories for test fixtures&lt;/li&gt;
&lt;li&gt;as little code as possible to choose the fixtures necessary, and to
clean them up.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="a-better-solution-dependency-injection"&gt;
&lt;h2&gt;A Better Solution: Dependency Injection&lt;/h2&gt;
&lt;p&gt;In a more general sense, a test fixtures is a dependency for a
test. If a system existed that handled the teardown and creation of
dependencies, it's possible to keep the real unique logic alone
in the test body.&lt;/p&gt;
&lt;p&gt;Effectively, this is the exact description of a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Dependency_injection"&gt;dependency injection
framework&lt;/a&gt;:
specify the dependencies necessary, and the framework handles the
rest.&lt;/p&gt;
&lt;p&gt;For Python as an example, &lt;a class="reference external" href="https://pytest.org/latest/fixture.html"&gt;py.test&lt;/a&gt; has this capability. I declare a common fixture
somewhere, and can consume it implicitly in any test function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# example copied from the py.test fixture page.&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;

&lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fixture&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;smtp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;smtplib&lt;/span&gt;
    &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smtplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SMTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;merlinux.eu&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# addfinalizer can be used to hook into the fixture cleanup process&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addfinalizer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;teardown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_ehlo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;smtp&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smtp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ehlo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;250&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="c1"&gt;# for demo purposes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With pytest, You can even use fixtures while generating other fixtures!&lt;/p&gt;
&lt;p&gt;It's a beautiful concept, and a cleaner example of how test fixtures
could be handled. No more awkward test class container to handle creation
and teardown of fixtures.&lt;/p&gt;
&lt;p&gt;As always, thoughts and comment are appreciated.&lt;/p&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="testing"></category></entry><entry><title>How I Design Test Suites</title><link href="how-i-design-test-suites.html" rel="alternate"></link><published>2015-08-30T00:00:00+02:00</published><updated>2015-08-30T00:00:00+02:00</updated><author><name>Yusuke Tsutsumi</name></author><id>tag:None,2015-08-30:how-i-design-test-suites.html</id><summary type="html">&lt;p&gt;At Zillow, I've done a lot of work on the design and development of
the test infrastructure we use for full-stack tests. It's always fun
to watch your tool become popular, but even more interesting is the
discussions around test suite design that come with it.&lt;/p&gt;
&lt;p&gt;Many discussions later, I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;At Zillow, I've done a lot of work on the design and development of
the test infrastructure we use for full-stack tests. It's always fun
to watch your tool become popular, but even more interesting is the
discussions around test suite design that come with it.&lt;/p&gt;
&lt;p&gt;Many discussions later, I have a good idea of what I want in a test suite.
Here's what I think about:&lt;/p&gt;
&lt;div class="section" id="tests-are-a-question-of-cost"&gt;
&lt;h2&gt;Tests are a question of cost&lt;/h2&gt;
&lt;p&gt;At the end of the day, tests have a cost. Each and every test has a
value / cost ratio. Things that increase the value of a test include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;consistency: given the same inputs, give the same results, every time.&lt;/li&gt;
&lt;li&gt;speed: the faster the test is, the faster the feedback. The faster
the feedback, the faster one can take action, and the more often we
can execute the tests to get feedback.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In contrast, the things that increase the cost of a test include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;maintenance time: maintenance takes time, and development time is expensive.
probably the biggest cost to consider.&lt;/li&gt;
&lt;li&gt;cpu / memory to execute the test: although arguably cheap in this world
of cloud providers, cpu and memory are real concerns, and tests that use
a lot of these resources are expensive.&lt;/li&gt;
&lt;li&gt;the time to execute the test: time is a huge cost, especially as the
technology world we live in demands for more changes, more
quickly. Depending on how fast you ship, tests that take too long will
be prohibitively expensive, and thus not used.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When I look at the value of a test, I look at these factors. In
practice, I've found that the most important metric of them all is
maintenance time: test that have little to no maintenance survive
refactors, rewrites, and pretty much anything that could happen to
code besides deprecation.&lt;/p&gt;
&lt;p&gt;On the other hand, the more the test requires maintenance, the more likely
it'll suffer one of two outcomes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the test is thrown out because it takes too much time to maintain,
despite the value.&lt;/li&gt;
&lt;li&gt;the test is not given the time it needs, and continues to fall into
disarray until it is ignored.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Basically: low maintenance tests last forever, high maintenance tests probably won't.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="designing-cheap-tests"&gt;
&lt;h2&gt;Designing cheap tests&lt;/h2&gt;
&lt;p&gt;So how do we make tests that require little to no maintenance? From what I've observed, there are two types of maintenance:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;functional maintenance, which modifies the test to reflect changes in the code itself&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;e.g. for a web page, the login form fields are modified&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;operational maintenance, which requires keeping a service dependency in a good state to test.&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;e.g. for an office application with cloud sync, keeping the cloud syncing service up.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Functional maintenance is unavoidable: as code changes, one must
ensure that any tests that validate that code are kept up to date. In
addition, for most tests, functional maintenance is relatively cheap
in time: except in the cases of extreme redesigns or refactorings, the
changes tend to be small in nature.&lt;/p&gt;
&lt;p&gt;Operational maintenance costs can vary wildly, and it can become very
expensive. Tests that have multiple dependencies can become a game of
juggling an environment where all of those are functional. It becomes
even harder if there's a small team maintaining this environment:
executing the tests consistently requires a production-quality
environment, and that's more difficult the more services there are to
maintain.&lt;/p&gt;
&lt;p&gt;However, unlike functional maintenance, operational maintenance, for
the most part, is avoidable. Taking advantage of heavy mocking, it's
possible to remove dependencies like databases and APIs. &lt;a class="reference external" href="http://googletesting.blogspot.com/2012/10/hermetic-servers.html"&gt;Google
Testing Blog has a good article about
this&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Summary: tests with fewer operational dependencies are cheaper to maintain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-kind-of-test-distribution-the-testing-pyramid"&gt;
&lt;h2&gt;What kind of test distribution: the testing pyramid&lt;/h2&gt;
&lt;p&gt;When testing software, there are multiple levels at which one could author tests:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;at the &amp;quot;unit&amp;quot; level, typically written in the same language and validating a single function or behaviour&lt;/li&gt;
&lt;li&gt;at the integration level, typically written in the same language, and validating the communication between your code and an external application&lt;/li&gt;
&lt;li&gt;at the end-to-end level, not necessarily written in the same language, and validating a complete workflow that a user would be performing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although all are important and should be included in a test suite,
each test is not created equally. Going back to the idea that tests
with the least maintenance will last the longest, we should be trying
to have as many of those as possible.&lt;/p&gt;
&lt;p&gt;Unit tests are the cheapest. They:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;have no dependencies (or else they would at least be considered an integration test),&lt;/li&gt;
&lt;li&gt;run quickly (no waiting for network, or other delay from communication)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we could capture all behaviour of our application with just unit
tests, that would be perfect. Unfortunately, many things can go wrong
when composing multiple pieces of these units together, so some level
of integration and end-to-end tests will be needed. But the larger
tests should be fewer in number, since they are harder to maintain.&lt;/p&gt;
&lt;p&gt;A good model to visualize a good distribution is the &amp;quot;testing pyramid&amp;quot;, as explained
by &lt;a class="reference external" href="http://martinfowler.com/bliki/TestPyramid.html"&gt;Martin Fowler&lt;/a&gt; and &lt;a class="reference external" href="http://googletesting.blogspot.com/2015/04/just-say-no-to-more-end-to-end-tests.html"&gt;Google&lt;/a&gt;:&lt;/p&gt;
&lt;img alt="" class="align-center" src="images/testingpyramid.png" /&gt;
&lt;p&gt;The more expensive tests are fewer in number, while the cheaper tests
are much more common.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-many-tests-should-be-in-a-suite"&gt;
&lt;h2&gt;How many tests should be in a suite&lt;/h2&gt;
&lt;p&gt;Adequate test coverage varies wildly between applications: medical
software than monitors heart rate should probably have a lot more
coverage than a non-critical social media website. The only common
rule of thumb I've found is: add the absolute minimum number of tests
to achieve your desired confidence in quality.&lt;/p&gt;
&lt;p&gt;Testing is important, but at the end of the day, it's not a
user-facing feature. On the other hand, quality is. Adding additional
tests does increase quality, but it comes at the cost of development
and maintenance time toward other features that help your application
provide value. A properly sized testing suite comes right at the line
of too little testing, and hover around that. This gives developers
as much time as possible on features, while ensuring that an
important feature (quality) is not neglected.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the best tests are the cheapest tests: low maintenance and executes quickly and low CPU/RAM resources&lt;/li&gt;
&lt;li&gt;the cheapest tests have the fewest number of dependencies on other applications, like DBs or APIs&lt;/li&gt;
&lt;li&gt;try to keep test coverage as low level as possible, and cheap tests are worth 10x expensive ones.&lt;/li&gt;
&lt;li&gt;expensive tests validate the whole infrastructune, so they're almost
always necessary: refer to the test pyramid for a rough sketch of a good distribution.&lt;/li&gt;
&lt;li&gt;never add more or less coverage than you need: more coverage results
in more maintenance that detracts from development time, and less coverage means an application
whose quality is not up to the desired standards.&lt;/li&gt;
&lt;li&gt;how much coverage do I need? Depends on how critical the application
is, and how critical it continues to work. A payment path needs high
quality, so should have high coverage. The alignment of a button on
a dialog three pages deep probably needs less quality assurance.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How do you design your test suite?&lt;/p&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="testing"></category></entry><entry><title>Book Report: Refactoring by Martin Fowler</title><link href="book-report-refactoring-by-martin-fowler.html" rel="alternate"></link><published>2014-08-25T00:00:00+02:00</published><updated>2014-08-25T00:00:00+02:00</updated><author><name>Yusuke Tsutsumi</name></author><id>tag:None,2014-08-25:book-report-refactoring-by-martin-fowler.html</id><summary type="html">&lt;p&gt;Refactoring is a book covering the basics tenants of refactoring as
dictated by Martin Fowler: a very smart person with some very good
ideas about code in general.&lt;/p&gt;
&lt;p&gt;First, the interesting thing about the definition of refactoring (as
defined by this book) is that it doesn't encompass all code
cleanup …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Refactoring is a book covering the basics tenants of refactoring as
dictated by Martin Fowler: a very smart person with some very good
ideas about code in general.&lt;/p&gt;
&lt;p&gt;First, the interesting thing about the definition of refactoring (as
defined by this book) is that it doesn't encompass all code
cleanup. It explicitly defines refactoring as a disciplined practice
that involves:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a rigorous test suite to ensure code behaves as desired beforehand.&lt;/li&gt;
&lt;li&gt;a set of steps that ensures that, at every step, the code works as before.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There's a lot of gems in this book. 'Refactoring' not only covers the
basic tenants around refactoring, but also provides a great set of
guidelines around writing code that is very easy for future
maintainers to understand as well.&lt;/p&gt;
&lt;div class="section" id="the-indicators-for-refactoring"&gt;
&lt;h2&gt;The Indicators for Refactoring&lt;/h2&gt;
&lt;p&gt;After showing a great example of a step-by-step refactoring of code
that excellently preserves functionality, the next chapter describes
several code smells that indicate the need for a refactor:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;duplicate code: a common red flag for anyone familiar with the age
old adage DRY (Don't repeat yourself)&lt;/li&gt;
&lt;li&gt;long methods: definitely a good sign for a refactor. I can't recall
how many methods I've read where I've barely been able to keep mental track
of what's really going on here.&lt;/li&gt;
&lt;li&gt;strong coupling: Definitely not an easy one to catch when you're
hacking away hardcore at something. Sometimes it takes a real objective look at
your code to find that the two classes or methods that you've been working with
should really be one, or maybe organized separately.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Aside from this, the book explicitly describes several situations
which indicate the need to consider refactoring. That said (and Martin
also admits this), it's not even close to outlining every single
situation where refactoring is necessary. After all, programming,
despite requiring a very logical and objective mind, can be a very
subjective practice.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-actual-refactorings"&gt;
&lt;h2&gt;The Actual Refactorings&lt;/h2&gt;
&lt;p&gt;After going over the smells, the next chapters finally describe the
actual refactoring themselves. The description of the refactoring
themselves is very rigorous, covering motivation, explicit steps and
examples. It's a very good reference to cover all of your bases, and
like any book that describes patterns, is a good reference to keep
somewhere when tackling particularly difficult refactoring tasks.&lt;/p&gt;
&lt;p&gt;A lot of the refactors were ones I was already familiar with, but
there were some interesting cases I didn't really think a lot about, that
'Refactoring' helped me assess more deeply:&lt;/p&gt;
&lt;div class="section" id="replace-temp-with-query"&gt;
&lt;h3&gt;Replace Temp with Query&lt;/h3&gt;
&lt;p&gt;The summary of this description is to replace temporary variables with
a method that generates the state desired:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;shift_left&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;multiplier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;multiplier&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;shift_left&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_power_of_two&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_power_of_two&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;digits&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a trivial example, and not necessarily representative of a
real refactoring. However, using a 'query method' to generate state
helps prevent several bad patterns from emerging:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;modifying the local variable to be different than the initial intention&lt;/li&gt;
&lt;li&gt;ensure that the variable is not misused anywhere else&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It's a good example of a refactoring that help ensure the variable is
actually temporary, and is not misused.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="introduce-explaining-variable"&gt;
&lt;h3&gt;Introduce Explaining Variable&lt;/h3&gt;
&lt;p&gt;At the end of the day, good code is 90% about making it easier for
others to read. Code that works is great, but code that can not be
understood or maintained is not going to last when that code is
encountered a second time.&lt;/p&gt;
&lt;p&gt;Explaining variables really help here. This is the idea of making
ambiguous code more clearer by assigning results to named variables that
express the intent a lot better:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;interest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;percentage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;period&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.414&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;percentage&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;period&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;interest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;percentage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;period&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;e_constant&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.414&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Ce_constant&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;percentage&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;period&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Having very descriptive variables can make understanding the code a
lot easier.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="remove-assignment-to-parameters"&gt;
&lt;h3&gt;Remove Assignment to Parameters&lt;/h3&gt;
&lt;p&gt;This is saying basically avoid mutating input parameters:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is nice because it makes it easier to work with input parameters
later: mutating values that have clear intent can result to poor
misuse of those variables later (because you assume no one changed it,
or it actually describes the value it should). This could be
inefficient, but compiler optimizers can get rid of these
inefficiencies anyway, so why make it more confusing to a potential
consumer?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="duplicate-observed-data"&gt;
&lt;h3&gt;Duplicate Observed Data&lt;/h3&gt;
&lt;p&gt;This is basically pushing for a decoupling of data stored on both a
client (interface) as well as a publisher. There's a lot of times
where the client will store data that's almost identical to an object
that already exists and has all the information stored neatly. Reducing the
duplication of data is always a good thing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="separate-query-from-modifier"&gt;
&lt;h3&gt;Separate Query from Modifier&lt;/h3&gt;
&lt;p&gt;There's a lot of methods that not only perform formatting or retrieve
data, but also mutate data as well. This refactoring suggests
separating them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;retrieve_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log_object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;log_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;access_count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;log_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;increment_access_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log_object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;log_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;access_count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;retrieve_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log_object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;log_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;increment_access_count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log_object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;retrieve_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log_object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I can't count the number of times I wanted to have one specific part
of the function a function performs. Refactorings such as this one
really give modular pieces that can be stitched together as necessary.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-general-refactoring-principles"&gt;
&lt;h2&gt;The General Refactoring Principles&lt;/h2&gt;
&lt;p&gt;The book's scatters some great gems about what a good refactoring
looks like, and it's very similar to what is commonly known to be good
code:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;mostly self-documenting: code that is so easily legible that it your
barely even need comments to understand what it's doing: intelligible
variable and function names, written like plain English more that code.&lt;/li&gt;
&lt;li&gt;modular: each function is split into small, singularly functional units.&lt;/li&gt;
&lt;li&gt;taking advantage of the principles and idioms for the language at
hand: 'refactoring' was written with object-oriented languages in
mind, so it advocated strong utilization of OOP. Utilize the
programming language's strengths.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Any step that takes your code in that direction (whilst preserving
functionality) is a good example of a refactoring.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-allocate-time-to-refactor"&gt;
&lt;h2&gt;How to Allocate Time to Refactor&lt;/h2&gt;
&lt;p&gt;'Refactoring' also stresses and appropriate time to refactor code:
constantly. Martin Fowler argues refactoring should occur during the
development process, and time should be added to estimates to give
space for refactoring. I've never been given explicit amounts of time
to refactor code, and most of the time, you won't. Best thing to do is
to push yourself to refactor whenever it's appropriate. The book also
warns against going overboard, only refactoring what you need. It's a very
agile approach to the idea of refactoring.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Ultimately, 'Refactoring' doesn't blow my mind and introduce me to
some life-changing concept. That said, it definitely changed my
mindset about refactoring. Refactoring should:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;be done as you go&lt;/li&gt;
&lt;li&gt;move the code toward being easily comprehensible&lt;/li&gt;
&lt;li&gt;move the code toward being easily extendable&lt;/li&gt;
&lt;li&gt;have a strong set of testing around it to preserve functionality&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As I was about to tackle a fairly large refactoring, It was a great
read to organize my thoughts about my methodologies and practices, and
my goals.&lt;/p&gt;
&lt;p&gt;I don't recommend reading every word, but the chapters that explain
philosophies and glancing over the refactoring patters was more that
worth the time spent reading.&lt;/p&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="refactoring"></category></entry><entry><title>The Dangers of Patching</title><link href="the-dangers-of-patching.html" rel="alternate"></link><published>2014-08-21T00:00:00+02:00</published><updated>2014-08-21T00:00:00+02:00</updated><author><name>Yusuke Tsutsumi</name></author><id>tag:None,2014-08-21:the-dangers-of-patching.html</id><summary type="html">&lt;p&gt;If you've ever used &lt;a class="reference external" href="https://pypi.python.org/pypi/mock"&gt;Mock&lt;/a&gt; (or
the built-in &lt;a class="reference external" href="https://docs.python.org/3/library/unittest.mock.html"&gt;mock in python
3&lt;/a&gt;), you'll
know how powerful of a tool it can be toward making unit testing on
functions modifying state sane. Mocks in Python are effectively a probe
that you can send into a deep, dark function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mock&lt;/span&gt;

&lt;span class="k"&gt;def …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;If you've ever used &lt;a class="reference external" href="https://pypi.python.org/pypi/mock"&gt;Mock&lt;/a&gt; (or
the built-in &lt;a class="reference external" href="https://docs.python.org/3/library/unittest.mock.html"&gt;mock in python
3&lt;/a&gt;), you'll
know how powerful of a tool it can be toward making unit testing on
functions modifying state sane. Mocks in Python are effectively a probe
that you can send into a deep, dark function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mock&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_write_hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;my_filehandle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;write_hello_world_to_handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_filehandle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;my_filehandle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_called_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can send in a fake object, have it experience what it's like to be
a real object, and you can ask it questions about what is was like.&lt;/p&gt;
&lt;p&gt;The above example doesn't really test a lot, but for more complex
cases, it can be a lifesaver: you know exactly what was called and
what wasn't, and if your object modifies some real world state that
you don't want to (such as a database), it prevents you
from performing dangerous operations.&lt;/p&gt;
&lt;p&gt;Another well-known feature of the mock module is patch: a function that
gives you the ability to replace any object in python (in any module)
with a mocked object. An example usage is like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mock&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_linux&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;platform.system&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Linux&amp;#39;&lt;/span&gt;
        &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;platform&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;platform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Linux&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Patch is powerful: it actually lets you replace modules, functions, and
values, even if they're not imported in the current context!&lt;/p&gt;
&lt;p&gt;But just because a tool is powerful, doesn't mean you should use
it. In reality, patch should be a last resort: you should only use it
if there's no other way to test your code.&lt;/p&gt;
&lt;p&gt;But why? Patch is basically making mock even more flexible: you can
literally mock anything you are aware of exists. There's a couple glaring issues:&lt;/p&gt;
&lt;div class="section" id="it-s-not-foolproof"&gt;
&lt;h2&gt;It's not foolproof&lt;/h2&gt;
&lt;p&gt;Let's say I have a couple files like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# mock_test.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mymodule&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;is_my_os&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;  &lt;span class="c1"&gt;# py3&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mock&lt;/span&gt;  &lt;span class="c1"&gt;# py2&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;platform.system&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;return_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my os&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;is_my_os&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# mymodule.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;platform&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;system&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_my_os&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;my os&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now patch is patching the platform.system function, so this should pass. Let's try it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;mock_test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;./bin/python&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;exec&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/Users/tsutsumi/sandbox/mock_test.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;is_my_os&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="ne"&gt;AssertionError&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That's not what we expected! So what happened here?&lt;/p&gt;
&lt;p&gt;Internally, every python module contains it's own scope. Every import,
method declaration, and variable declaration, and expression modifies
that scope in someway. So when you import anything, you are actually
adding in a reference to that object into the global scope. So by the
time we actually mock 'platform.system', the module's 'platform'
already contains a reference to the 'system' function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;platform&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;platform&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;system&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mock&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;platform.system&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;mock_system&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mock_system&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;platform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MagicMock&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;system&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;4307612752&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;system&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x100bf9c80&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;MagicMock&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;system&amp;#39;&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;4307612752&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So even if you do patch a method, you won't necessarily patch all the
uses of that method, depending on how they're imported in. This
means your patching must directly match how the object you want to
mock is imported into the code to test.&lt;/p&gt;
&lt;p&gt;For example, we can fix the mock_test.py file above by changing the patch:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# mock_test.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mymodule&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;is_my_os&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;  &lt;span class="c1"&gt;# py3&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mock&lt;/span&gt;  &lt;span class="c1"&gt;# py2&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mymodule.system&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;return_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my os&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;is_my_os&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So in order to use a patch effectively, you have to be aware of &lt;em&gt;exact
semantics&lt;/em&gt; by which a method is both imported an invoked. And this
leads up to the ultimate problem with patch:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="really-tightly-coupling-tests-with-implementation"&gt;
&lt;h2&gt;Really tightly coupling tests with implementation&lt;/h2&gt;
&lt;p&gt;Patching in general, regardless of the implementation, tightly couples
your test code and your regular code beyond the typical bounds of unit
testing. Once you get patching involved, you have to not only be
conscious of the effect of your code, but also it's
implementation. Modifying the internal code of the method also
requires modifying the test code. If your unit tests change, the
actual functionality it's testing is also changed: you're no longer
guaranteed that your code is identical because the same tests pass:
because modifying your code &lt;em&gt;requires&lt;/em&gt; you to change your test code.&lt;/p&gt;
&lt;p&gt;Ultimately however, we don't live in an ideal world. Times will come
when you have to test code that is hard to refactor into a method that
works with only mocks or actual objects. But with code you control,
it's almost completely avoidable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="so-how-do-we-avoid-patching"&gt;
&lt;h2&gt;So how do we avoid patching?&lt;/h2&gt;
&lt;p&gt;Patching is the result of coupled complex state, relying on multiple
global variables. We can remedy this by doing the exact opposite:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;decouple complex state&lt;/li&gt;
&lt;li&gt;don't rely on global variables&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's take a look at some practices to help with this:&lt;/p&gt;
&lt;div class="section" id="don-t-use-global-variables"&gt;
&lt;h3&gt;Don't use global variables&lt;/h3&gt;
&lt;p&gt;for example, let's look at an object that creates a persistent db
connection based on configuration parameters:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;db_connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db_connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DB_URL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyObject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;db_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_dict&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;to_dict&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To test this object's save method, you would have either patch the
db_connection object, or replace the DB_URL to reflect a test
database. Either method is an extra step from testing what you really
want on just the save method: the db method is called, and is passed the
dictionary representation of the object.&lt;/p&gt;
&lt;p&gt;You can accomplish this without patch by passing in objects as you
need them: by explicitly passing them in, it makes it really easy to mock:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyObject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_dict&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;to_dict&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_myobject_save&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
     &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mock&lt;/span&gt;
     &lt;span class="n"&gt;my_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
     &lt;span class="n"&gt;my_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_called_with&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
         &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;
     &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="decouple-complex-state"&gt;
&lt;h3&gt;Decouple complex state&lt;/h3&gt;
&lt;p&gt;Complex state coupling occurs when you attempt to hide a lot of the
difficulty with creating objects from a user. Using the database above, as an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyObject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db_connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_dict&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;to_dict&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now the only way to actually test this save method (aside from a full
stack test) is to mock the db_connection method. It wouldn't work to
assign the db attribute afterward (my_object._db = Mock()) because
this would mean that the objects was already instantiated: your db
connection already exists, creating extra overhead you won't used.&lt;/p&gt;
&lt;p&gt;Instead of trying to hide the complex state from the user of your
class, let them actually choose the db object to pass in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyObject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_dict&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;to_dict&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_myobject_save&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
     &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mock&lt;/span&gt;
     &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
     &lt;span class="n"&gt;my_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="n"&gt;my_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
     &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assert_called_with&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
         &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;
     &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This not only allows us to test operations on complex objects, but
also makes the class more flexible as well (e.g. compatible with more
db objects than just the one that db_connection returns)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="final-thoughts"&gt;
&lt;h3&gt;Final thoughts&lt;/h3&gt;
&lt;p&gt;Once again, patch exists for a reason. It's almost like a magic wand
that allows you to test otherwise untestable code. But this magic wand
comes with making your life harder the more you use it.&lt;/p&gt;
&lt;p&gt;So all in all: beware the dangers of patching.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="testing"></category><category term="patch"></category><category term="python"></category></entry><entry><title>Getting Dropbox Status's into Conky + Dzen2</title><link href="getting-dropbox-statuss-into-conky-dzen2.html" rel="alternate"></link><published>2014-07-08T00:00:00+02:00</published><updated>2014-07-08T00:00:00+02:00</updated><author><name>Yusuke Tsutsumi</name></author><id>tag:None,2014-07-08:getting-dropbox-statuss-into-conky-dzen2.html</id><summary type="html">&lt;p&gt;I'm an avid xmonad user, and I've recently switched over to conky +
dzen as my status bar. A recent issue I had is with getting Dropbox
status information into my conky.&lt;/p&gt;
&lt;p&gt;I did some hacking and here's the result. I love the way it turned out:&lt;/p&gt;
&lt;img alt="" src="images/conky-dropbox-demo.png" /&gt;
&lt;p&gt;This is a pretty …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm an avid xmonad user, and I've recently switched over to conky +
dzen as my status bar. A recent issue I had is with getting Dropbox
status information into my conky.&lt;/p&gt;
&lt;p&gt;I did some hacking and here's the result. I love the way it turned out:&lt;/p&gt;
&lt;img alt="" src="images/conky-dropbox-demo.png" /&gt;
&lt;p&gt;This is a pretty generic approach on adding anything into conky +
dzen. Here's the steps I took:&lt;/p&gt;
&lt;div class="section" id="write-some-scripts-to-produce-the-text-you-want"&gt;
&lt;h2&gt;1. Write some scripts to produce the text you want&lt;/h2&gt;
&lt;p&gt;Conky has methods to run arbitrary scripts and echo their
output. This abstraction makes it easy to get the text you want.&lt;/p&gt;
&lt;p&gt;I started writing a couple shell scripts that get me the info I need:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Note: I used the Dropbox command line tool to get this info. You'll
need that installed. on arch, it's the 'dropbox-cli' package.
&lt;/pre&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# drobox-down&lt;/span&gt;
&lt;span class="c1"&gt;# echos the Dropbox download speed&lt;/span&gt;
&lt;span class="c1"&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class="nv"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;dropbox status &lt;span class="p"&gt;|&lt;/span&gt; grep Downloading&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="nv"&gt;SYNC_REGEX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;([0-9,]+) KB/sec&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;~ &lt;span class="nv"&gt;$SYNC_REGEX&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="nv"&gt;download_speed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASH_REMATCH&lt;/span&gt;&lt;span class="p"&gt;[1]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$download_speed&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$download_speed&lt;/span&gt;&lt;span class="s2"&gt; KB/sec&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# drobox-up&lt;/span&gt;
&lt;span class="c1"&gt;# echos the Dropbox upload speed&lt;/span&gt;
&lt;span class="c1"&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class="nv"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;dropbox status &lt;span class="p"&gt;|&lt;/span&gt; grep Uploading&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="nv"&gt;SYNC_REGEX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;([0-9,]+) KB/sec&amp;quot;&lt;/span&gt;

&lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;~ &lt;span class="nv"&gt;$SYNC_REGEX&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="nv"&gt;upload_speed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASH_REMATCH&lt;/span&gt;&lt;span class="p"&gt;[1]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$upload_speed&lt;/span&gt; !&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$upload_speed&lt;/span&gt;&lt;span class="s2"&gt; KB/sec&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class="c1"&gt;# Dropbox-files&lt;/span&gt;
&lt;span class="c1"&gt;# lists a single filename if only a single file is being synced&lt;/span&gt;
&lt;span class="c1"&gt;# otherwise, echos the number of files synced&lt;/span&gt;

&lt;span class="nv"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;dropbox status &lt;span class="p"&gt;|&lt;/span&gt; grep Syncing&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="nv"&gt;SYNC_REGEX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;([0-9,]+) files remaining&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;FILENAME_REGEX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;(.*)&amp;quot;&amp;#39;&lt;/span&gt;

&lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;~ &lt;span class="nv"&gt;$SYNC_REGEX&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;
&lt;span class="nv"&gt;files_remaining&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASH_REMATCH&lt;/span&gt;&lt;span class="p"&gt;[1]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$files_remaining&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;

    &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;~ &lt;span class="nv"&gt;$FILENAME_REGEX&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;
    &lt;span class="nv"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BASH_REMATCH&lt;/span&gt;&lt;span class="p"&gt;[1]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$filename&lt;/span&gt;

&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$files_remaining&lt;/span&gt;&lt;span class="s2"&gt; files&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="create-your-own-xbm-logo"&gt;
&lt;h2&gt;2. Create your own xbm logo&lt;/h2&gt;
&lt;p&gt;Now to get that cool Dropbox icon in there. The thing to note about
conky + dzen specifically is that you can't pipe images into your bar
(as far as I know, someone please correct me here). You're left with the
options of xbm files, which are bitmap descriptions.&lt;/p&gt;
&lt;p&gt;Luckily, it's not too hard to generate your own. Gimp, the Photoshop of Linux,
can save into xbm files for you. Simply open it up, export it, and you're done!&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Note: make sure to export the xbm to fit the size of your bar. I
couldn't find a way of telling conky to scale the image (which makes
sense, conky is just piping output dzen so it has no way of knowing
the height). My bar is about 16 pixels high, so I exported 16
pixels.
&lt;/pre&gt;
&lt;p&gt;You can also download the xbm I created if you'd like: &lt;a class="reference external" href="https://github.com/toumorokoshi/yt.rc/blob/master/xmonad/icons/Dropbox.xbm"&gt;my Dropbox xbm&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="add-them-to-your-conky-script"&gt;
&lt;h2&gt;3. Add them to your conky script&lt;/h2&gt;
&lt;p&gt;Now that we have our shell scripts, and our icons, you can execute them in your conky
script. I got the arrows from the &lt;a class="reference external" href="http://awesome.naquadah.org/wiki/Nice_Icons"&gt;nice icon set&lt;/a&gt;.
If you're lazy you can also get them from &lt;a class="reference external" href="https://github.com/toumorokoshi/yt.rc"&gt;my rc files&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once you have all your assets, add in the relevant pieces into your conky:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;out_to_console yes
out_to_x no
update_interval &lt;span class="m"&gt;1&lt;/span&gt;

lua_load &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.xmonad/conky_scripts/conky_lua_scripts.lua

&lt;span class="c1"&gt;# note: Dropbox needed dropbox-cli on arch&lt;/span&gt;

TEXT
&lt;span class="c1"&gt;# ---- START DROPBOX STUFF ---&lt;/span&gt;
^fg&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="se"&gt;\#&lt;/span&gt;007ee5&lt;span class="o"&gt;)&lt;/span&gt; ^i&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/.xmonad/icons/Dropbox.xbm&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="c1"&gt;# ---- description of files changing ---&lt;/span&gt;
^fg&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="se"&gt;\#&lt;/span&gt;FFFF00&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;execi&lt;/span&gt;&lt;span class="p"&gt; 6 &lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="p"&gt;/.xmonad/conky_scripts/Dropbox-files&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; ^fg&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="c1"&gt;# ---- download speed info ---&lt;/span&gt;
^fg&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="se"&gt;\#&lt;/span&gt;8888FF&lt;span class="o"&gt;)&lt;/span&gt; ^i&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/.xmonad/icons/net_down_03.xbm&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;execi&lt;/span&gt;&lt;span class="p"&gt; 6 &lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="p"&gt;/.xmonad/conky_scripts/Dropbox-down&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; ^fg&lt;span class="o"&gt;()&lt;/span&gt; / &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="c1"&gt;# ---- upload speed info ---&lt;/span&gt;
^fg&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="se"&gt;\#&lt;/span&gt;AA0000&lt;span class="o"&gt;)&lt;/span&gt; ^i&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/.xmonad/icons/net_up_03.xbm&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;execi&lt;/span&gt;&lt;span class="p"&gt; 6 &lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="p"&gt;/.xmonad/conky_scripts/Dropbox-up&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; ^fg&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I changed the colors with ^fg(#COLOR_HASH)&lt;/li&gt;
&lt;li&gt;to split your conky on multiple lines, I use the delimiter '\'&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And there you go! You have a nice, clean Dropbox activity bar.&lt;/p&gt;
&lt;/div&gt;
</content><category term="ops"></category><category term="conky"></category><category term="dropbox"></category><category term="arch"></category></entry><entry><title>Tips on getting a programming internship interview</title><link href="tips-on-getting-a-programming-internship-interview.html" rel="alternate"></link><published>2014-07-01T00:00:00+02:00</published><updated>2014-07-01T00:00:00+02:00</updated><author><name>Yusuke Tsutsumi</name></author><id>tag:None,2014-07-01:tips-on-getting-a-programming-internship-interview.html</id><summary type="html">&lt;p&gt;Someone asked me about how to get a programming internship from a
career fair. I've had a bit of experience at career fairs on the
interviewer side, and I thought I'd outline some of the points for me
personally.&lt;/p&gt;
&lt;p&gt;If your interested in how to do well on an actual …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Someone asked me about how to get a programming internship from a
career fair. I've had a bit of experience at career fairs on the
interviewer side, and I thought I'd outline some of the points for me
personally.&lt;/p&gt;
&lt;p&gt;If your interested in how to do well on an actual interview, just look up
resources on how to do well on programming interviews in general: the
process for interviewing interns is pretty similar to the process for
interviewing full-time hires.&lt;/p&gt;
&lt;div class="section" id="looking-and-acting-professional-helps"&gt;
&lt;h2&gt;Looking and Acting Professional Helps&lt;/h2&gt;
&lt;p&gt;It's definitely true that once you have a software engineering job,
your day-to-day attire is not particularly important (I'm often a
t-shirt and shorts guy myself). However, I definitely add extra points
to someone who dresses well, and also represents themselves
professionally as well. My suggestion for all genders would be a nice
dress shirt. Anything beyond that is fine as well, as long as it looks
like you care.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="side-projects"&gt;
&lt;h2&gt;Side Projects&lt;/h2&gt;
&lt;p&gt;If you stick to only coding for classes, you'll end up with the exact
same body of work as everyone else. What really sets people aside for
me is if you're passionate enough about programming to do side projects.&lt;/p&gt;
&lt;p&gt;It could be something small like you wrote a game for a hackathon, or
something large like a multi-month research project crafting machine
learning systems. Either way, it shows coding is more than just a future 9-5
for you: it's a passion, or a medium that you use to express
yourself.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="open-source-your-code"&gt;
&lt;h2&gt;Open Source your code&lt;/h2&gt;
&lt;p&gt;I love to see a &lt;a class="reference external" href="https://github.com/"&gt;github&lt;/a&gt; (or other open source hosting) link on
someone's resume. It tells me that they've at least explored the
concept of opening their code up or contributing to an existing open
project.&lt;/p&gt;
&lt;p&gt;It also makes it really easy for me to look up and read some code
they've written.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="knowing-the-tools-of-the-trade"&gt;
&lt;h2&gt;Knowing the tools of the trade&lt;/h2&gt;
&lt;p&gt;These days academic curriculums are starting to talk more about the
practices and tools that the professional world uses. That said, it's
always a plus for me if you have experience with the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;version control (svn / git / etc)&lt;/li&gt;
&lt;li&gt;testing (experience with an &lt;a class="reference external" href="http://en.wikipedia.org/wiki/XUnit"&gt;xunit&lt;/a&gt; based testing framework)&lt;/li&gt;
&lt;li&gt;bug tracking (github issues / bugzilla / trac)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="ability-to-apply-apply-critical-reasoning"&gt;
&lt;h2&gt;Ability to apply Apply critical reasoning&lt;/h2&gt;
&lt;p&gt;Software design typically involves thinking deeply about your
problems, and reasoning between the trade-offs of one solution versus
the other. I typically like to see the same in prospective
interns. Having strong opinions with facts and experiences to back it
up is great: it shows that you've given these types of problems a lot
of thought. I'll typically ask what your favorite programming language
is and why: if you've had experiences with a couple, you've probably
had some time to build some opinions about it. It's a way to figure
out if your decisions are motivated by reasoning from thinking about the problems
you're given, or just doing things as instructed and not really thinking too hard
about why.&lt;/p&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="internship"></category></entry><entry><title>Getting Started with Monogame</title><link href="getting-started-with-monogame.html" rel="alternate"></link><published>2014-05-17T00:00:00+02:00</published><updated>2014-05-17T00:00:00+02:00</updated><author><name>Yusuke Tsutsumi</name></author><id>tag:None,2014-05-17:getting-started-with-monogame.html</id><summary type="html">&lt;p&gt;This is a quick guide on getting a base project started with
Monogame. I've tried to use tools that are platform agnostic, so
hopefully this will work no matter if you're on Windows, OSX, or
Linux. Let's get started!&lt;/p&gt;
&lt;div class="section" id="step-1-install-monodevelop"&gt;
&lt;h2&gt;Step 1: Install Monodevelop&lt;/h2&gt;
&lt;p&gt;Monogame is built off of the &lt;a class="reference external" href="http://www.mono-project.com/Main_Page"&gt;Mono …&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;This is a quick guide on getting a base project started with
Monogame. I've tried to use tools that are platform agnostic, so
hopefully this will work no matter if you're on Windows, OSX, or
Linux. Let's get started!&lt;/p&gt;
&lt;div class="section" id="step-1-install-monodevelop"&gt;
&lt;h2&gt;Step 1: Install Monodevelop&lt;/h2&gt;
&lt;p&gt;Monogame is built off of the &lt;a class="reference external" href="http://www.mono-project.com/Main_Page"&gt;Mono Project&lt;/a&gt;, a cross-platform
development framework built off of .NET (the runtime that C# normally
runs on). Monodevelop is (at the time of this writing) the de-facto
development environment for Mono. That's why we'll use it for Monogame
as well! You can download monodevelop here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://monodevelop.com/"&gt;monodevelop&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-2-install-monogame"&gt;
&lt;h2&gt;Step 2: Install Monogame&lt;/h2&gt;
&lt;p&gt;Next, we're going to use NuGet to download MonoGame instead of
directly. NuGet is a package manager, so it will handle downloading
dependencies such as MonoGame for you. It's better to use a package
manager, since it tends to handle differences between operating
system's for you.&lt;/p&gt;
&lt;p&gt;To use NuGet in MonoDevelop, you need the NuGet add on. There's instructions on how to install it here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/mrward/monodevelop-nuget-addin#installation"&gt;installing nuget add-in&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-3-install-the-monogame-add-in"&gt;
&lt;h2&gt;Step 3: Install the Monogame add-in&lt;/h2&gt;
&lt;p&gt;This is no longer documented anywhere on the monogame site, but the
easiest way to create a monogame project is to download a MonoDevelop
add in. You can get it off the the old monogame site here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://monogame.codeplex.com/downloads/get/632972"&gt;monogame add-in&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Simple download it, and install it from the 'Manage add-ins' page
(click the 'install from file' button)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-4-create-a-monogame-project"&gt;
&lt;h2&gt;Step 4: Create a Monogame Project&lt;/h2&gt;
&lt;p&gt;Once you have the add-in installed, building a new game is as simple
as creating a new Solution, and using the monogame template specific to your platform.&lt;/p&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="monogame"></category><category term="xamarin"></category></entry><entry><title>Pycon 2014: Day 2 Recap</title><link href="pycon-2014-day-2-recap.html" rel="alternate"></link><published>2014-04-12T00:00:00+02:00</published><updated>2014-04-12T00:00:00+02:00</updated><author><name>Yusuke Tsutsumi</name></author><id>tag:None,2014-04-12:pycon-2014-day-2-recap.html</id><summary type="html">&lt;p&gt;The second day of PyCon was just as amazing as the first. The day
started with a couple keynote speakers:&lt;/p&gt;
&lt;div class="section" id="keynote-jessica-mckellar"&gt;
&lt;h2&gt;Keynote: Jessica McKellar&lt;/h2&gt;
&lt;p&gt;Jessica McKellar gave a talking about the current state of the world
for programming classes in U.S. grade schools, and the numbers weren't
pretty. The number …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;The second day of PyCon was just as amazing as the first. The day
started with a couple keynote speakers:&lt;/p&gt;
&lt;div class="section" id="keynote-jessica-mckellar"&gt;
&lt;h2&gt;Keynote: Jessica McKellar&lt;/h2&gt;
&lt;p&gt;Jessica McKellar gave a talking about the current state of the world
for programming classes in U.S. grade schools, and the numbers weren't
pretty. The number of programming classes is thin as it is, and the
prospect for girls was even worse: female students made up less than a
third of the test takes, and two states didn't have any female
students take AP computer science &lt;a class="reference external" href="http://thinkprogress.org/education/2014/01/14/3160181/test-girls-race/"&gt;at all&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It's a bit dishearting to know that this is the state of
C.S. education in the U.S., but I think that it's not a hopeless
situation: a third of the attendees at PyCon this year were women,
which is phenomenal. In addition, there's a lot of people who discover
the joys of programming after high school (including myself).&lt;/p&gt;
&lt;p&gt;Ultimately though, the lesson of the talk was that we need more
professional programmers fighting against this wave. Unfortunately all
of my free time is spent on &lt;a class="reference external" href="https://github.com/toumorokoshi/greyhawk-language"&gt;several&lt;/a&gt; &lt;a class="reference external" href="https://github.com/toumorokoshi/sprinter"&gt;other&lt;/a&gt; &lt;a class="reference external" href="https://github.com/toumorokoshi/jenks"&gt;projects&lt;/a&gt;, but I'll definitely
remember that education needs some help when I have a spare second.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="keynote-fernando-perez"&gt;
&lt;h2&gt;Keynote: Fernando Pérez&lt;/h2&gt;
&lt;p&gt;Geez, iPython is amazing. It's so much more than just a fancier python
interpreter. The science community made it into more of a matlab
Frankenstein, complete with math, data analysis, and more.&lt;/p&gt;
&lt;p&gt;Fernando demoed the &lt;a class="reference external" href="http://ipython.org/notebook.html"&gt;iPython notebook&lt;/a&gt;, which is leagues ahead of
anything I've seen in the scientific note taking community. Rich ways
to express data, easily extensible (a lightning talk speaker today added d3
support, which only makes it look all that more amazing).&lt;/p&gt;
&lt;p&gt;my limited experience in the academic world makes me cringe with bad
programming practices: lack of version control, no good documentation
(and I was definitely a part of that) made life incredibly
difficult. I think Pérez and the rest of the iPython community members
are definitely turning this trend around, with a system that allows
live documentation and easily modifiable data, blowing past anything
we have on the private side. I'd love to take the concepts iPython is
pushing and see if I can't make something new and powerful out of it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="talk-designing-django-s-migrations"&gt;
&lt;h2&gt;Talk: Designing Django's Migrations&lt;/h2&gt;
&lt;p&gt;I can definitely tell Andrew Godwin is a smart guy. His extensive time
maintaining Django has really given him a good sense of what works and
what doesn't for a general web framework. His talk on designing
migrations was basically explaining how it works, but he did share
some of his insights from looking at the previous migration tool, south:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;simplify the logic and abstract it out to a python construct: this
allows for less hard-coded files in a Python file, which is what South does.&lt;/li&gt;
&lt;li&gt;load the whole migration path into memory to build a meaningful
context: with an idea of the whole upgrade path, it's easy to see
what sort of deltas exist. This will probably be ok for 90% of the common migrations, but
data re-formatting still needs a very human touch.&lt;/li&gt;
&lt;li&gt;keeping the layer that performs migrations functionally separate
from the database translation layer: effectively ensuring that the
migration layer only uses methods exposed by the ORM. Good idea in
my humble opinion: keeping the architecture separate blocks the
possibly that a database feature could someday have to be
implemented twice for both the model and the migration.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All in all, a good way to dive into an Open Source maintainer's head.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="talk-designing-poetic-apis"&gt;
&lt;h2&gt;Talk: Designing Poetic APIs&lt;/h2&gt;
&lt;p&gt;Wow. &lt;a class="reference external" href="https://twitter.com/ErikRose"&gt;Erik Rose&lt;/a&gt; really gets what
software should be. When people say that programming is like writing,
I have to say I was skeptical. I could see how being a good writer
helps from a documentation perspective, but I couldn't say it directly
affected one's programming ability. Well, this talk threw everything I
thought I knew out the window.&lt;/p&gt;
&lt;p&gt;Erik talks about seven principles that can help one design really
clean apis from a consumer perspective:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Don't predict the future: stop coding against what you think is
going to happen years from now. It rarely leads down a good path.&lt;/li&gt;
&lt;li&gt;Consistency: make sure that not only are all your methods performing
actions that are consistent with the behavior of other methods in
your library, but take it a step further and be consistent with all
of Python as well. The principle of least astonishment applies just as much to your internal library as it does to a web application.&lt;/li&gt;
&lt;li&gt;Brevity: your methods should return minimal data structures that
perform what you want, and should require as few arguments as
possible. Not doing so leads to incredibly complicated, possibly
untestable, most likely incomprehensible code.&lt;/li&gt;
&lt;li&gt;Composability: instead of having methods that do five things, try to
decompose it in a way that allows consumers to chain operations
together. Not only does this help with brevity, but it helps complex
work-flows become simpler as well.&lt;/li&gt;
&lt;li&gt;Plain Data: use built-in types when possible. Not only dict and
list, but also constructs built-in to the language, such as
ConfigParser. This allows an astounding level of compatibility
across all sort of code.&lt;/li&gt;
&lt;li&gt;Grooviness: I'm not sure what he means 100% by this, bud I think
grooviness has to do with how easily you can fall into a groove
while coding. Things like checking docs, or digging through deep
stack traces really hampers a good work-flow.&lt;/li&gt;
&lt;li&gt;Safety: states that are impossibly shouldn't be representable, and
throwing exceptions is better than a return value if the case is
truly an exception.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Seriously a mind-blowing talk. I've had feelings about a lot of these,
but to have someone qualify it with words really makes the point
clear. And this is where it all ties in to writing: poetry and coding
good apis require a very similar set of skills: having the ability to
express yourself in an eloquent, clear way. To be successful at either,
this ability is and absolute necessity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="talk-fast-python-slow-python"&gt;
&lt;h2&gt;Talk: Fast Python, Slow Python&lt;/h2&gt;
&lt;p&gt;I'm sure &lt;a class="reference external" href="https://twitter.com/alex_gaynor"&gt;Alex Gaynor&lt;/a&gt; is an
incredibly smart person, but maybe his talk went over my head a bit. I
originally thought this was going to be a talk about practices that
would allow me to optimize Python, but he made me remember that
CPython is not the only Python around. His talk was actually about
making implementation-agnostic Python faster. He gave a few tips on
how to do this, but of course he didn't really explain why it would be
faster. He gave using classes over dicts as an example of a performance
increase, arguing that dicts are object-object mappings and a class
provides a more explicit key.  I'm not 100% sure why that would be any
better, consider one could optimize a dictionary in a very similar
way if you know what all the keys and values are going to be.&lt;/p&gt;
&lt;p&gt;Not really a lot to be gleaned from this talk from my perspective,
unless you want to follow practices that would make you faster in PyPy
and possibly CPython (if you upgrade to the most recent version). Of
course that's still not an implementation-agnostic performance increase.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="talk-what-is-coming-in-python-packaging"&gt;
&lt;h2&gt;Talk: What is Coming in Python Packaging&lt;/h2&gt;
&lt;p&gt;Great state of the world talk from Noah Kantrowitz. A lot of big
changes coming in the Python packaging world, including:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;new PyPi, known as &lt;a class="reference external" href="https://github.com/pypa/warehouse"&gt;warehouse&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Wheels will take over at some point, but quite a few packages can't
use them due to their reliance on native dependencies and wheel
can't handle that for multiple platforms.&lt;/li&gt;
&lt;li&gt;virtualenv is now in Python as of 3.4 (pyvenv)&lt;/li&gt;
&lt;li&gt;twine is the defacto way to submit packages now, no longer using setup.py directly&lt;/li&gt;
&lt;li&gt;devpi is apparently a popular local proxy for hosting packages internally.&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;the Python Packaging Association (PyPa) is now responsible for all packaging technologies, including:&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;setuptools&lt;/li&gt;
&lt;li&gt;pip&lt;/li&gt;
&lt;li&gt;wheel&lt;/li&gt;
&lt;li&gt;warehouse&lt;/li&gt;
&lt;li&gt;virtualenv&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So definitely a good talk to check out if you want to know what's the way to go in today's Python world.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Another great day at PyCon. It's awesome being able to hear from the
horses mouth (so to speak) about the state of the world in
Python. Also an amazing set of lightning talks too. Learning a lot all
over the place really.&lt;/p&gt;
&lt;p&gt;Really excited for day 3, and the dev sprints to follow!&lt;/p&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="python"></category><category term="pycon"></category></entry><entry><title>Pycon 2014: Day 1 Recap</title><link href="pycon-2014-day-1-recap.html" rel="alternate"></link><published>2014-04-11T00:00:00+02:00</published><updated>2014-04-11T00:00:00+02:00</updated><author><name>Yusuke Tsutsumi</name></author><id>tag:None,2014-04-11:pycon-2014-day-1-recap.html</id><summary type="html">&lt;p&gt;Today was my first day at a PyCon conference, and the first day of
PyCon 2014. I wanted to talk about some of my favorite events:&lt;/p&gt;
&lt;div class="section" id="keynote-john-perry-barlow"&gt;
&lt;h2&gt;Keynote: John Perry Barlow&lt;/h2&gt;
&lt;p&gt;I didn't know that the lyricist for &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Grateful_Dead"&gt;The Grateful Dead&lt;/a&gt; also founded the
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Electronic_Frontier_Foundation"&gt;Electronic Frontier Foundation&lt;/a&gt;. I
think it shows …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Today was my first day at a PyCon conference, and the first day of
PyCon 2014. I wanted to talk about some of my favorite events:&lt;/p&gt;
&lt;div class="section" id="keynote-john-perry-barlow"&gt;
&lt;h2&gt;Keynote: John Perry Barlow&lt;/h2&gt;
&lt;p&gt;I didn't know that the lyricist for &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Grateful_Dead"&gt;The Grateful Dead&lt;/a&gt; also founded the
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Electronic_Frontier_Foundation"&gt;Electronic Frontier Foundation&lt;/a&gt;. I
think it shows you how technology merges paths of those from all walks
of life. An interesting talk about how exposing more information is
ultimately putting more power into the hands of the people: a lack of
information is how corporations are allowed to continue policies and
practices that are unfair and don't benefit society.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="talk-all-your-ducks-in-a-row-data-structures-in-the-standard-library-and-beyond"&gt;
&lt;h2&gt;Talk: All Your Ducks in A Row: Data Structures in the Standard Library and Beyond&lt;/h2&gt;
&lt;p&gt;Long title, but great talk from &lt;a class="reference external" href="https://twitter.com/brandon_rhodes"&gt;Brandon Rhodes&lt;/a&gt;. Coming from an embedded-ish
background, I've had curiosities about how Python's data structures
work internally. This talk discussed very interesting concepts like:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python.org/3.4/library/struct.html?highlight=struct"&gt;C Structs&lt;/a&gt; exists in Python&lt;/li&gt;
&lt;li&gt;how Python can build &lt;a class="reference external" href="https://docs.python.org/2/library/array.html"&gt;c-like arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;how Python's built-in arrays isn't very good because it requires
converting the data into a Python object (and hence only really good
for a compact storage mechanism), and one should use NumPy's arrays instead.&lt;/li&gt;
&lt;li&gt;Python's built-in &lt;a class="reference external" href="https://docs.python.org/2/library/bisect.html"&gt;binary search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Anything in &lt;a class="reference external" href="https://docs.python.org/3.4/library/queue.html"&gt;queue&lt;/a&gt; is thread-safe&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;He's done a lot of talks on Python's Data Structures before as well,
so I definitely have to catch up there.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="talk-twisted-mixing"&gt;
&lt;h2&gt;Talk: Twisted Mixing&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/lvh"&gt;Laurens Van Houtven&lt;/a&gt; gave a good talk on
how one can mix &lt;a class="reference external" href="https://twistedmatrix.com/trac/"&gt;Twisted Python&lt;/a&gt;
into a variety of things. It seems like libraries exist to mix
anything into Twisted and Twisted into anything:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pypi.python.org/pypi/crochet/1.1.0"&gt;crochet&lt;/a&gt; is a library
that creates a Twisted reactor that you can use whenever you
need. Basically a Twisted-on-demand type model.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/jyio/geventreactor"&gt;geventreactor&lt;/a&gt; to run Gevent and Twisted side-by-side.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So it just makes me think that a lot of people are pushing Twisted
forward. Definitely speaks in spades about a technology. Twisted very
well may be the future for async (for Python 2 at least)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="talk-real-time-predictive-analytics-using-scikit-learn-and-rabbitmq"&gt;
&lt;h2&gt;Talk: Real-time Predictive Analytics using Scikit-learn and RabbitMQ&lt;/h2&gt;
&lt;p&gt;Decided to diverge a bit and go to a machine learning talk from
&lt;a class="reference external" href="https://twitter.com/beckerfuffle"&gt;Michael Becker&lt;/a&gt;. Really awesome
stuff. The description for the talk talks about how he's going to make
a simple service that detects what language a block of text is written
in. He shows you how it's done, and it's crazy simple: Scikit-learn
for the machine learning, RabbitMQ to maintain the task queue, and a
worker to pull from the queue (and the client server).&lt;/p&gt;
&lt;p&gt;The crazy thing here was how powerful Scikit-learn really is. Complex
algorithms such as various implementations of K-nearest-neighbors. It
makes me realize that academia is an incredibly powerful ally: getting
buy in from a community which solves very hard complex problems ends
up with amazing technology at the tip of your fingertips.&lt;/p&gt;
&lt;p&gt;I'm definitely going to try something with Scikit-learn very soon.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="talk-castle-anthrax-dungeon-generation-techniques"&gt;
&lt;h2&gt;Talk: Castle Anthrax: Dungeon Generation Techniques&lt;/h2&gt;
&lt;p&gt;Listened in to a talk from James King about how to generate
dungeons. Like a lot of pieces in game programming, a heavy algorithm
is required to generate the best results. James discussed a ton of generations algorithms from:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;taking a square and cutting it a bunch of different ways randomly.&lt;/li&gt;
&lt;li&gt;generating random noise and then connecting with a minimal spanning tree.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;He discussed use methods such as Poisson Disks, Cellular Automation,
and Perlin Noise. I haven't had time to grok all of it just yet, but
Definitely going to investigate those next time (or really the first
time) I make a rogue-like game.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="talk-fan-in-fan-out"&gt;
&lt;h2&gt;Talk: Fan-In Fan-Out&lt;/h2&gt;
&lt;p&gt;Brett Slatkin discussion was mainly supposed to be about the
advantages of a map-reduce type architecture of delegating work to
multiple machines and retrieving and aggregating data, but it felt
more like a demo of how awesome asyncio (the new async library in
Python 3.4) really is.&lt;/p&gt;
&lt;p&gt;Regardless of what his goal was, it's really cool to see an Async
library in Python. I'm just reading into in now, and I see that it's
incredibly powerful: easily customizable, providing a lot of the
facilities that you see in some of the more traditionally concurrent
languages (such as the future idea). Definitely one huge reason to
move to Python3 if possible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dinner-pycon-dinner-with-brandon-rhodes"&gt;
&lt;h2&gt;Dinner: PyCon Dinner with Brandon Rhodes&lt;/h2&gt;
&lt;p&gt;I signed up for the dinner not really knowing who Brandon Rhodes is,
but my more community-literate Python colleagues tell me he's one of
the must-see/hears. The dinner with him was definitely enjoyable. I
ended up at a table with a lot of Pythonistas way more knowledgeable
than me, which was really important as the dinner involved a
three-round python trivia game. A lot of fun questions, and I learned
a lot about Python 3 and python in general.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusions"&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;My first day at PyCon (albeit a jet-lagged one less than five hours of
sleep), was awesome. Aside from all the great talks, the breakfasts
and lunches spent talking to other Python enthusiasts was an eye
opener. I definitely learned a lot, including:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;flask, django, and pyramids is definitely the current trend of web
frameworks that the Python community is using&lt;/li&gt;
&lt;li&gt;Python 3's addition of async (and the lack of it in Python 2) is a
strong reason to move to three, and it's only going te get stronger
as Python 2 continues to stagnate.&lt;/li&gt;
&lt;li&gt;Despite this, almost everyone is sticking to 2: it's really hard to
migrate your code to Python 3.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And that's it for Day 1. Next, day 2!&lt;/p&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="python"></category><category term="pycon"></category></entry><entry><title>Emacs From Scratch, Part 3: Extending Emacs with Elisp</title><link href="emacs-from-scratch-part-3-extending-emacs-with-elisp.html" rel="alternate"></link><published>2014-04-10T00:00:00+02:00</published><updated>2014-04-10T00:00:00+02:00</updated><author><name>Yusuke Tsutsumi</name></author><id>tag:None,2014-04-10:emacs-from-scratch-part-3-extending-emacs-with-elisp.html</id><summary type="html">&lt;p&gt;This is a series of tutorials geared around building up your own
customized environment, using emacs, from scratch.&lt;/p&gt;
&lt;p&gt;You can find &lt;a class="reference external" href="emacs-from-scratch-part-1-extending-emacs-basics.html"&gt;part 1 here&lt;/a&gt;
You can find &lt;a class="reference external" href="emacs-from-scratch-part-2-package-management.html"&gt;part 2 here&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="extending-emacs-with-elisp"&gt;
&lt;h2&gt;Extending Emacs with Elisp&lt;/h2&gt;
&lt;p&gt;If you've followed the previous tutorials, you're familiar with
loading configuration, and you now have a …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;This is a series of tutorials geared around building up your own
customized environment, using emacs, from scratch.&lt;/p&gt;
&lt;p&gt;You can find &lt;a class="reference external" href="emacs-from-scratch-part-1-extending-emacs-basics.html"&gt;part 1 here&lt;/a&gt;
You can find &lt;a class="reference external" href="emacs-from-scratch-part-2-package-management.html"&gt;part 2 here&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="extending-emacs-with-elisp"&gt;
&lt;h2&gt;Extending Emacs with Elisp&lt;/h2&gt;
&lt;p&gt;If you've followed the previous tutorials, you're familiar with
loading configuration, and you now have a system that can download
packages for you from the various Emacs package repositories. Now
let's dive into where Emacs get's really fun: extending Emacs
yourself.&lt;/p&gt;
&lt;p&gt;One of the things I love about modern programming is the idea of
feedback as quickly as possible: it's great to see the result of the
changes of your code instantly. So let's try writing a generic way to
do this. We'll write a function that adds a hook to an Emacs buffer,
so when it saves, a shell command will run. (e.g. 'python myscript.py' for a
python script, or running unit tests, etc)&lt;/p&gt;
&lt;p&gt;Create a file called my-methods.el, adding it to your .emacs.d/
directory. To write our command, we'll need to do the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a hash to store (buffer, command) pairs to run&lt;/li&gt;
&lt;li&gt;create a method to add a (buffer, command) pair to our hash&lt;/li&gt;
&lt;li&gt;look in our hash if a buffer is saved, and run the command if the buffer exists in the hash&lt;/li&gt;
&lt;li&gt;remove entries from our hash if the buffer is killed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So let's start by adding our hash:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;; my-methods.el&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;my-command-buffer-hooks&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;make-hash-table&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(setq &amp;lt;name&amp;gt; &amp;lt;value&amp;gt;) will set a variable &amp;lt;name&amp;gt; to a value
&amp;lt;value&amp;gt;. This is one way of instantiating a variable in elisp. There
are other ways, such as &lt;a class="reference external" href="http://www.gnu.org/software/emacs/manual/html_node/elisp/Defining-Variables.html"&gt;defvar&lt;/a&gt;,
but I chose setq because we are simply defining an internal variable
for usage. Other variations which define variables typically provide
some other purpose, such as a user-customizable value or a constant.&lt;/p&gt;
&lt;p&gt;Now that we have our hash table, let's start adding to it! We'll write
our first function to my-methods.el:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;; my-methods.el&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;my-command-on-save-buffer&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;Run a command &amp;lt;c&amp;gt; every time the buffer is saved &amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;interactive&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;sShell command: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;puthash&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;buffer-file-name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="nv"&gt;my-command-buffer-hooks&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This method takes in a variable 'c', takes the current buffer, and
adds pair of (buffer-name, command-as-a-string) to our hash. This is a
short function, but it's a dense amount of functionality, so it's
worth explaining a bit further.&lt;/p&gt;
&lt;div class="section" id="defun"&gt;
&lt;h3&gt;defun&lt;/h3&gt;
&lt;p&gt;Defun is the standard way to define a function. It uses the following syntax:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;&amp;lt;method_name&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;&amp;lt;var_a&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;&amp;lt;var_b&amp;gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nv"&gt;&amp;lt;docstring&amp;gt;&lt;/span&gt;
  &lt;span class="nv"&gt;&amp;lt;interactive?&amp;gt;&lt;/span&gt;
  &lt;span class="nv"&gt;&amp;lt;method_body&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here's a description of each:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;lt;method_name&amp;gt;: a symbol to populate with the method&lt;/li&gt;
&lt;li&gt;&amp;lt;var_a&amp;gt; &amp;lt;var_b&amp;gt;... : a list of symbols to populate with passed parameters&lt;/li&gt;
&lt;li&gt;&amp;lt;docstring&amp;gt;: a string explaining what your method does&lt;/li&gt;
&lt;li&gt;&amp;lt;interactive?&amp;gt;: options. we'll take about this more in a second&lt;/li&gt;
&lt;li&gt;&amp;lt;method_body&amp;gt;: a lisp expression which has access to &amp;lt;var_a&amp;gt; &amp;lt;var_b&amp;gt;... symbols described above.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So pretty standard for a method definition in any language, except for (interactive?).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="interactive"&gt;
&lt;h3&gt;interactive&lt;/h3&gt;
&lt;p&gt;So what is interactive? Well, it's an optional expression, which, if
passed in to defun, makes the method 'interactive'. Interactive
basically means it's one of the command that can be run by 'M-x': it
becomes a publicly exposed command that an Emacs user should be able
to run.&lt;/p&gt;
&lt;p&gt;(interactive) by itself results in a command that does not ask the
user for input. In other words, it's only useful for commands that
have no variables.&lt;/p&gt;
&lt;p&gt;If we want the user to be able to type some input, we need to add in a
string into interactive, like our example above:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
(interactive &amp;quot;sShell Command:&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;So this will take in a single string. So how do we know it always
takes a string and only a string? Well, it's the first 's' in the
&amp;quot;sShell Command&amp;quot;. The first character is called an 'interactive code':
it's a way to express what the expected input is. Specifying the
proper interactive code is important: codes such as 'D' (directory
name) or 'C' (emacs command) can provide auto-completion, making your
function all the more useful.&lt;/p&gt;
&lt;p&gt;Multiple arguments can be passed by delimiting with newlines:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
(interactive &amp;quot;sA String:\nDA Directory&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;A full list of interactive codes can be found here: &lt;a class="reference external" href="http://www.gnu.org/software/emacs/manual/html_node/elisp/Interactive-Codes.html#Interactive-Codes"&gt;interactive codes&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="puthash-gethash-remhash"&gt;
&lt;h3&gt;puthash/gethash/remhash&lt;/h3&gt;
&lt;p&gt;So the one thing that might be a little strange if you work in a
primarily OOP environment: (puthash &amp;lt;map&amp;gt; &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;) instead of
something like &amp;lt;map&amp;gt;.put(&amp;lt;key&amp;gt; &amp;lt;value&amp;gt;).&lt;/p&gt;
&lt;p&gt;elisp is a functional language, which means that everything is,
essentially, a function or data. There is no real concept of
object-oriented programming: if you want to modify an object, you call
a method with the object as the argument, not an object calling a method.&lt;/p&gt;
&lt;p&gt;To work with a hash, elisp provides puthash/gethash/remhash. You can
read more here: &lt;a class="reference external" href="http://www.gnu.org/software/emacs/manual/html_node/elisp/Hash-Access.html#Hash-Access"&gt;hash-access&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So at this point, you should have all the info you need to understand
the my-command-on-save-buffer option.&lt;/p&gt;
&lt;p&gt;Now let's add a couple more functions to complete our hook.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="my-command-on-buffer-run-hook"&gt;
&lt;h3&gt;my-command-on-buffer-run-hook&lt;/h3&gt;
&lt;p&gt;Add the following to you my-methods.el:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;; .emacs.d/my-methods.el&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;my-command-buffer-kill-hook&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;Remove a key from &amp;lt;command-buffer-hooks&amp;gt; if it exists&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;remhash&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;buffer-file-name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;my-command-buffer-hooks&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This function removes the current buffer from the hooks hash. Pretty
straightforward with what we know now.&lt;/p&gt;
&lt;p&gt;And this one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;; .emacs.d/my-methods.el&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;my-command-buffer-run-hook&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;Run a command if it exists in the hook&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;hook&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;gethash&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;buffer-file-name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;my-command-buffer-hooks&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="nv"&gt;hook&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;shell-command&lt;/span&gt; &lt;span class="nv"&gt;hook&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is the actual function that runs the hook. Note the extra check wrappend in a with.
(when is a shorthand for if with only one argument. It's more
lisp-esque to provide shorthands like this).&lt;/p&gt;
&lt;p&gt;Finally we need to add the hooks so that these function actually run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;; .emacs.d/my-methods.el&lt;/span&gt;

&lt;span class="c1"&gt;;; add hooks&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;kill-buffer-hook&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;my-command-buffer-kill-hook&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;after-save-hook&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;my-command-buffer-run-hook&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Emacs provides a nice hook implementation. pass in the hook name you
want to listen to, and the function name you want to call.&lt;/p&gt;
&lt;p&gt;And that's it! give it a shot. In fact, let's try it our Emacs
now. open up my-methods.el and type: M-x eval-buffer. Voila! you know
have your my-command-on-save-buffer. Emacs has the ability to evaluate
code with it's lisp interpreter, which allows modifying the global
state of the editor itself. By evaluating our code, we basically just
added the functions we writing to the actual emacs instance we've been working in!&lt;/p&gt;
&lt;p&gt;Now this is what I'm saying when I love modern programming. Getting
automated feedback faster is always better, and Emacs is great at
providing fast feedback on editor changes. You don't even have to
restart your process! You can modify the environment you're working
in, as you're working on it, and see the changes instantly!&lt;/p&gt;
&lt;p&gt;Anyway, let's try our new functions with a test file.&lt;/p&gt;
&lt;p&gt;Open a file /tmp/tmp.txt, save it (C-x C-s), and run: M-x
my-command-on-buffer-save. It'll ask you far a shell argument.&lt;/p&gt;
&lt;img alt="" src="images/emacs-from-scratch-part-3-myhook.png" /&gt;
&lt;p&gt;Type in the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now type something and save your file. boom! The output should be in
the mini-buffer (you can see the full output in the *Shell Command Output* buffer).&lt;/p&gt;
&lt;img alt="" src="images/emacs-from-scratch-part-3-echo.png" /&gt;
&lt;p&gt;Congrats! You've just written your first functional elisp function. And it's pretty useful too.&lt;/p&gt;
&lt;p&gt;If you want to learn more about developing elisp code, you can't go
wrong with the &lt;a class="reference external" href="http://www.gnu.org/software/emacs/manual/html_node/elisp/index.html#Top"&gt;elisp manual&lt;/a&gt;.
Like most languages, some things are not going to be the most
intuitive in the beginning. However, as you become more comfortable
elisp will start to feel like just another amazing feature of Emacs.&lt;/p&gt;
&lt;p&gt;The other way to learn a lot is by looking at other people's emacs
packages and files. Go to &lt;a class="reference external" href="http://melpa.milkbox.net/#/"&gt;melpa&lt;/a&gt;, find
a package you like, and click the 'source' link, and start reading!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;Here's what we learned:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;elisp is a functional languages: everything is done through functions&lt;/li&gt;
&lt;li&gt;defun is used te define methods, and can have docstrings and can be interactive&lt;/li&gt;
&lt;li&gt;elisp uses hashes, and uses puthash/gethash/remhash&lt;/li&gt;
&lt;li&gt;Emacs can evaluate code and modify it's interpreter on the fly&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="final-code"&gt;
&lt;h3&gt;Final Code&lt;/h3&gt;
&lt;p&gt;Note: this includes code from part one&lt;/p&gt;
&lt;p&gt;.emacs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;load&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;~/.emacs.d/my-loadpackages.el&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;load&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;~/.emacs.d/my-methods.el&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;after-init-hook&lt;/span&gt; &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;load&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;~/.emacs.d/my-noexternals.el&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;.emacs.d/my-methods:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;  ~/.emacs.d/my-methods.el&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;my-command-buffer-hooks&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;make-hash-table&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;my-command-on-save-buffer&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;Run a command &amp;lt;c&amp;gt; every time the buffer is saved &amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;interactive&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;sShell command: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;puthash&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;buffer-file-name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="nv"&gt;my-command-buffer-hooks&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;my-command-buffer-kill-hook&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;Remove a key from &amp;lt;command-buffer-hooks&amp;gt; if it exists&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;remhash&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;buffer-file-name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;my-command-buffer-hooks&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;my-command-buffer-run-hook&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;Run a command if it exists in the hook&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;hook&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;gethash&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;buffer-file-name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;my-command-buffer-hooks&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="nv"&gt;hook&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;shell-command&lt;/span&gt; &lt;span class="nv"&gt;hook&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

&lt;span class="c1"&gt;;; add hooks&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;kill-buffer-hook&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;my-command-buffer-kill-hook&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;after-save-hook&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;my-command-buffer-run-hook&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;.emacs.d/my-noexternals.el:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;; ~/.emacs.d/my-noexternals.el&lt;/span&gt;

&lt;span class="c1"&gt;;; Remove scrollbars, menu bars, and toolbars&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;fboundp&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;menu-bar-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;menu-bar-mode&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;fboundp&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;tool-bar-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;tool-bar-mode&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;fboundp&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;scroll-bar-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;scroll-bar-mode&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;;; Wind-move&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C-c C-j&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;windmove-left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C-c C-k&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;windmove-down&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C-c C-l&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;windmove-up&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C-c C-;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;windmove-right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;.emacs.d/my-packages.el:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;; ~/.emacs.d/my-packages.el&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;cl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;package-archives&lt;/span&gt;
             &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;melpa&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://melpa.milkbox.net/packages/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;package-archives&lt;/span&gt;
             &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;marmalade&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://marmalade-repo.org/packages/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;package-initialize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defvar&lt;/span&gt; &lt;span class="nv"&gt;required-packages&lt;/span&gt;
  &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nv"&gt;magit&lt;/span&gt;
    &lt;span class="nv"&gt;yasnippet&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;a list of packages to ensure are installed at launch.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;; method to check if all packages are installed&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;packages-installed-p&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;loop&lt;/span&gt; &lt;span class="nv"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;p&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;required-packages&lt;/span&gt;
        &lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;package-installed-p&lt;/span&gt; &lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="nb"&gt;do&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nv"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;return&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="c1"&gt;; if not all packages are installed, check one by one and install the missing ones.&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;packages-installed-p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;; check for new packages (package versions)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%s&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Emacs is now refreshing its package database...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;package-refresh-contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%s&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; done.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;; install the missing packages&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dolist&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;p&lt;/span&gt; &lt;span class="nv"&gt;required-packages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;package-installed-p&lt;/span&gt; &lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;package-install&lt;/span&gt; &lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;.emacs.d/my-loadpackages.el:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;; ~/.emacs.d/my-loadpackages.el&lt;/span&gt;
&lt;span class="c1"&gt;; loading package&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;load&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;~/.emacs.d/my-packages.el&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;magit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;define-key&lt;/span&gt; &lt;span class="nv"&gt;global-map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C-c m&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;magit-status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;yasnippet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;yas-global-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;yas-load-directory&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;~/.emacs.d/snippets&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;term-mode-hook&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;yas-dont-activate&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h4&gt;What's Next&lt;/h4&gt;
&lt;p&gt;That's it for now! You should now have the basic set of knowledge to
start hacking and trying things yourself:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;an automated way to install packages and define the ones you want&lt;/li&gt;
&lt;li&gt;a place to load the packages, and augment behaviour&lt;/li&gt;
&lt;li&gt;an introduction to coding new functions yourself&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If there's other things you want to me to cover or discuss, leave a
comment with your suggestions.&lt;/p&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="further-reading-references"&gt;
&lt;h4&gt;Further Reading / References&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.gnu.org/software/emacs/manual/html_node/elisp/index.html#Top"&gt;elisp manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.gnu.org/software/emacs/manual/html_node/elisp/Hash-Access.html#Hash-Access"&gt;hash-access&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.gnu.org/software/emacs/manual/html_node/elisp/Interactive-Codes.html#Interactive-Codes"&gt;interactive codes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="emacs"></category><category term="environment"></category></entry><entry><title>Adding Brew Apps to GUI Path in OSX Mavericks</title><link href="adding-brew-apps-to-gui-path-in-osx-mavericks.html" rel="alternate"></link><published>2014-03-31T00:00:00+02:00</published><updated>2014-03-31T00:00:00+02:00</updated><author><name>Yusuke Tsutsumi</name></author><id>tag:None,2014-03-31:adding-brew-apps-to-gui-path-in-osx-mavericks.html</id><summary type="html">&lt;p&gt;In case someone has trouble with this: A way to add brew apps to a path invokable by a gui is by exporting the environment variable path in /etc/launchd.conf:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# /etc/launchd.conf
setenv PATH /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Users/yusuket …&lt;/pre&gt;</summary><content type="html">&lt;p&gt;In case someone has trouble with this: A way to add brew apps to a path invokable by a gui is by exporting the environment variable path in /etc/launchd.conf:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# /etc/launchd.conf
setenv PATH /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Users/yusuket/bin
&lt;/pre&gt;
&lt;p&gt;You need to add the /usr/local/bin for brew's apps.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;THEN&lt;/cite&gt; make sure to restart you machine. Logging out and logging back in won't work.&lt;/p&gt;
&lt;p&gt;And you're done! Now you can run your brew executables from GUI apps in Mavericks.&lt;/p&gt;
</content><category term="ops"></category><category term="osx"></category><category term="mavericks"></category><category term="brew"></category></entry><entry><title>Seven Languages in Seven Weeks: Haskell Day 3</title><link href="seven-languages-in-seven-weeks-haskell-day-3.html" rel="alternate"></link><published>2014-03-28T00:00:00+01:00</published><updated>2014-03-28T00:00:00+01:00</updated><author><name>Yusuke Tsutsumi</name></author><id>tag:None,2014-03-28:seven-languages-in-seven-weeks-haskell-day-3.html</id><summary type="html">&lt;p&gt;A few months ago, I tried my hand at &lt;a class="reference external" href="http://pragprog.com/book/btlang/seven-languages-in-seven-weeks"&gt;Seven Languages in Seven Weeks&lt;/a&gt;,
and it was an incredibly enlightening experience.&lt;/p&gt;
&lt;p&gt;There was one excersize that kept me at odds for weeks though, so I
thought I'd share my experience.&lt;/p&gt;
&lt;div class="section" id="haskell-day-3-creating-and-writing-a-maze-solver"&gt;
&lt;h2&gt;Haskell Day 3: Creating and writing a Maze Solver&lt;/h2&gt;
&lt;p&gt;The …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;A few months ago, I tried my hand at &lt;a class="reference external" href="http://pragprog.com/book/btlang/seven-languages-in-seven-weeks"&gt;Seven Languages in Seven Weeks&lt;/a&gt;,
and it was an incredibly enlightening experience.&lt;/p&gt;
&lt;p&gt;There was one excersize that kept me at odds for weeks though, so I
thought I'd share my experience.&lt;/p&gt;
&lt;div class="section" id="haskell-day-3-creating-and-writing-a-maze-solver"&gt;
&lt;h2&gt;Haskell Day 3: Creating and writing a Maze Solver&lt;/h2&gt;
&lt;p&gt;The excersize calls for accomplishing two tasks:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Creating a data structure for storing a maze&lt;/li&gt;
&lt;li&gt;Write a method to solve it&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think there's a few ways to organize the data, but I chose a format that was fairly readable:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
data Exits = North | West | East | South deriving (Show, Eq)
data Node = NodePath (Int, Int) [Exits] | TerminalNode (Int, Int) deriving (Show, Eq)
type Maze = [[Node]]
testMaze :: Maze
testMaze = [
 [ (NodePath (0,0) [South]), (NodePath (1, 0) []), (NodePath (2, 0) []) ],
 [ (NodePath (0,1) [East]), (NodePath (1, 1) [East]), (NodePath (2, 1) [North, South]) ],
 [ (NodePath (0,2) []), (NodePath (1, 2) []), (TerminalNode (2, 2)) ]
       ]
&lt;/pre&gt;
&lt;p&gt;Basically, this creates a few types:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Exits, to deal with the directions from which one can move from the current position&lt;/li&gt;
&lt;li&gt;Node, which consists of nodes with paths (a NodePath), and a Final node (TerminalNode).&lt;/li&gt;
&lt;li&gt;Maze, which is simply a two-dimensional array of nodes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think there's liberties here as well, but I wanted to note my choice
a NodePath and TerminalNode type: it seemed like creating completely
different types altogether allowed me to rely on the strict type of
Haskell better to solve my problems, instead of emebedding logic. But YRMV.&lt;/p&gt;
&lt;p&gt;One big downside: putting data in structures like this made it hard to
get the data I want, and also rely on the typing. Ultimately I had to
create several utility methods to help me:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
-- getNode: Returns a node object given a maze and a position
    getNode :: Maze -&amp;gt; (Int, Int)-&amp;gt; Node
    getNode maze (x,y) = maze !! y !! x
-- getExits: return all the exits for a node
    getExits :: Node -&amp;gt; [Exits]
    getExits (NodePath _ exits) = exits
    getExits (TerminalNode _) = []
-- getPosition: return a (x,y) of the position of a node
    getPosition :: Node -&amp;gt; (Int, Int)
    getPosition (NodePath (x,y) _) = (x, y)
    getPosition (TerminalNode (x,y)) = (x, y)
&lt;/pre&gt;
&lt;p&gt;I definitely must be doing something wrong here. The rigid typing of
Haskell should allow me to take advantage of the inner data without
creating accessors like this. But I'm not a Haskell expert, so I made
do with what I understood.&lt;/p&gt;
&lt;p&gt;Finally, I have all the tools I need to write my solver. Here it is:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
-- getNextNode: given a node, maze, and an exit, return the next node from the maze
    getNextNode :: Node -&amp;gt; Maze -&amp;gt; Exits -&amp;gt; Node
    getNextNode node maze exit =
        let (x, y) = getPosition node
        in
          case exit of
            North -&amp;gt; getNode maze (x, y - 1)
            West -&amp;gt; getNode maze (x - 1, y)
            East -&amp;gt; getNode maze (x + 1, y)
            South -&amp;gt; getNode maze (x, y + 1)
-- If the element already exists in the path, we're at a dead end.
-- solveRoute: returns a list of the valid routes to the exit
    solveRoute :: Maze -&amp;gt; Node -&amp;gt; [Node] -&amp;gt; Exits -&amp;gt; Maybe [Node]
    solveRoute maze node path exit =
        let nextNode = getNextNode node maze exit
        in
          if (nextNode `elem` path)
          then
              Nothing
          else
              solveMaze maze nextNode (node:path)
-- solveMaze: solve the maze by taking solveRoute, filtering the successful results, and taking the first one.
    solveMaze :: Maze -&amp;gt; Node -&amp;gt; [Node] -&amp;gt; Maybe [Node]
    solveMaze maze node path =
        case node of
          TerminalNode _ -&amp;gt; Just (node:path)
          NodePath _ _-&amp;gt;
                   let nodes = (filter (\x -&amp;gt; x /= Nothing) (map (solveRoute maze node path) (getExits node)))
                   in
                     if (length nodes &amp;gt; 0)
                     then
                         head nodes
                     else
                        Nothing
&lt;/pre&gt;
&lt;p&gt;This code probably seems a bit contrived. Basically here's what solveMaze does:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;delegates the logic to solveRoute if the node isn't a terminalNode&lt;/li&gt;
&lt;li&gt;solveRoute gets the exits for the node. it loops through them, takes
the valid ones (the ones where the same position isn't in there
twice), and passes them back into solveMaze&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So solveMaze and solveRoute call each other until they find a valid
solution. I could have added them into the same method, but this
seemed like a logical split that made the code a little easier to understand.&lt;/p&gt;
&lt;p&gt;This works. Give it a try:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
mazeStart = getNode testMaze (0, 0)
mazeSolution = solveMaze testMaze mazeStart []
&lt;/pre&gt;
&lt;p&gt;One of the big issues I have with solution, however, is the fact that
it doesn't use a list monad in any way. And I'm still a bit confused
as to how it comes in handy here. From my understanding, a list monad
flattens a list of lists into a single list. So ultimately, my
solution might not be taking advantage of the real power of
Haskell. It is purely functional though, so maybe it is.&lt;/p&gt;
&lt;p&gt;Here's the code in full:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
module Day3 where
    import Data.List
    --    data Node = NodePath ((Int, Int), [Node]) | TerminalNode (Int, Int)
        data Exits = North | West | East | South deriving (Show, Eq)
        data Node = NodePath (Int, Int) [Exits] | TerminalNode (Int, Int) deriving (Show, Eq)
        type Maze = [[Node]]
        testMaze :: Maze
        testMaze = [
         [ (NodePath (0,0) [South]), (NodePath (1, 0) []), (NodePath (2, 0) []) ],
         [ (NodePath (0,1) [East]), (NodePath (1, 1) [East]), (NodePath (2, 1) [North, South]) ],
         [ (NodePath (0,2) []), (NodePath (1, 2) []), (TerminalNode (2, 2)) ]
               ]
    -- getNode
        getNode :: Maze -&amp;gt; (Int, Int)-&amp;gt; Node
        getNode maze (x,y) = maze !! y !! x
    -- getExists
        getExits :: Node -&amp;gt; [Exits]
        getExits (NodePath _ exits) = exits
        getExits (TerminalNode _) = []
    -- getPosition
        getPosition :: Node -&amp;gt; (Int, Int)
        getPosition (NodePath (x,y) _) = (x, y)
        getPosition (TerminalNode (x,y)) = (x, y)
    -- getNextNode
        getNextNode :: Node -&amp;gt; Maze -&amp;gt; Exits -&amp;gt; Node
        getNextNode node maze exit =
            let (x, y) = getPosition node
            in
              case exit of
                North -&amp;gt; getNode maze (x, y - 1)
                West -&amp;gt; getNode maze (x - 1, y)
                East -&amp;gt; getNode maze (x + 1, y)
                South -&amp;gt; getNode maze (x, y + 1)
    -- If the element already exists in the path, we're at a dead end.
        solveRoute :: Maze -&amp;gt; Node -&amp;gt; [Node] -&amp;gt; Exits -&amp;gt; Maybe [Node]
        solveRoute maze node path exit =
            let nextNode = getNextNode node maze exit
            in
              if (nextNode `elem` path)
              then
                  Nothing
              else
                  solveMaze maze nextNode (node:path)
    -- solveMaze 2
        solveMaze :: Maze -&amp;gt; Node -&amp;gt; [Node] -&amp;gt; Maybe [Node]
        solveMaze maze node path =
            case node of
              TerminalNode _ -&amp;gt; Just (node:path)
              NodePath _ _-&amp;gt;
                       let nodes = (filter (\x -&amp;gt; x /= Nothing) (map (solveRoute maze node path) (getExits node)))
                       in
                         if (length nodes &amp;gt; 0)
                         then
                             head nodes
                         else
                             Nothing
        mazeStart = getNode testMaze (0, 0)
        mazeSolution = solveMaze testMaze mazeStart []
&lt;/pre&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="haskell"></category><category term="seven_languages"></category></entry><entry><title>Data As Code</title><link href="data-as-code.html" rel="alternate"></link><published>2014-03-08T00:00:00+01:00</published><updated>2014-03-08T00:00:00+01:00</updated><author><name>Yusuke Tsutsumi</name></author><id>tag:None,2014-03-08:data-as-code.html</id><summary type="html">&lt;p&gt;I followed through the exercises of &lt;a class="reference external" href="http://pragprog.com/book/btlang/seven-languages-in-seven-weeks"&gt;Seven Languages in Seven Weeks&lt;/a&gt; a
while back, and there was a really interesting concept introduced by
clojure (which really extends it's idea from lisp): that code is data
and data is code. The idea that a programming language's syntax is
flexible enough where …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I followed through the exercises of &lt;a class="reference external" href="http://pragprog.com/book/btlang/seven-languages-in-seven-weeks"&gt;Seven Languages in Seven Weeks&lt;/a&gt; a
while back, and there was a really interesting concept introduced by
clojure (which really extends it's idea from lisp): that code is data
and data is code. The idea that a programming language's syntax is
flexible enough where a description of the data is actually code itself.&lt;/p&gt;
&lt;p&gt;A good example of where this sort of binding works well is with
configuration and data files: These files are almost always authored
in a intermediary markup format that is then parsed and interpreted by
a programming language of choice. For a language where code is data,
the data or configuration file is just another file with code, and it
just has to be loaded and parsed to be understood by a program.&lt;/p&gt;
&lt;p&gt;I didn't consider the strength in such an idea at first. In fact, I
dismissed it as a nice-to-have, a concept whose absence in a language
was a mild detriment, but not one that would really hamper a
developers ability to do what they need to.&lt;/p&gt;
&lt;p&gt;But the more I thought about it, the more my opinion changed. With
every new config file I faced, my opinion changed all the more.&lt;/p&gt;
&lt;p&gt;For an example, let's take the approach of data-as-code with a
language where the design wasn't designed that way. Java has a lot of strengths, but
It has it's weaknesses. Let's say I want to express a menu. In code directly, that looks like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
FileMenu menu = new FileMenu(
  new Tab[] {
    new Tab(&amp;quot;File&amp;quot;,
      new Command[] {
        new Command(&amp;quot;New&amp;quot;),
        new Command(&amp;quot;Open&amp;quot;),
        new Command(&amp;quot;Save&amp;quot;),
        new Command(&amp;quot;Save As...&amp;quot;)
      })
  }
);
&lt;/pre&gt;
&lt;p&gt;Now in lisp(-ish):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
(filemenu
  (tabs
    (tab &amp;quot;File&amp;quot; (
          (command &amp;quot;New&amp;quot;)
          (command &amp;quot;Open&amp;quot;)
          (command &amp;quot;Save&amp;quot;)
          (command &amp;quot;Save as...&amp;quot;)))))
&lt;/pre&gt;
&lt;p&gt;It's so clean! It actually looks like a config file at this point: a
data format such as json or yaml probably wouldn't make this any more
readable. Even Python, which is a bit more dynamic that Java, doesn't
look as clean:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
menu = FileMenu(
  tabs(
    tab(&amp;quot;File&amp;quot;, (
      command(&amp;quot;New&amp;quot;),
      command(&amp;quot;Open&amp;quot;),
      command(&amp;quot;Save&amp;quot;),
      command(&amp;quot;Save as...&amp;quot;)
    ))
  ))
)
&lt;/pre&gt;
&lt;p&gt;There's something about those parentheses. So for these languages
where the code-data bind is not as strong, separate data is
represented as a completely separate format, either something abstract
like a map or a separate data file. However, this creates a separation
of implementation and representation. This adds any of the additional
functional overheads:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a deserializer, turning data -&amp;gt; in programming language representation&lt;/li&gt;
&lt;li&gt;a validator, ensuring that the data is valid&lt;/li&gt;
&lt;li&gt;a serializer, turning programming language representation -&amp;gt; data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When your data is already represented as code, you remove these
additional layers of abstraction: your interpreter/compiler will
figure out validity for you! Not only that, but your code
representation is just as clean, so it's just like interacting with
your data directly. In fact, that's precisely what you're doing.&lt;/p&gt;
&lt;p&gt;The insane thing is, as your code becomes more powerful, your data
does as well. Parsing the code directly allows you to add complex
configuration with ease. For example, adding a conditional statement
in the filemenu in lisp above is:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
(filemenu
  (tabs
    (tab &amp;quot;File&amp;quot; (
          (command &amp;quot;New&amp;quot;)
          (command &amp;quot;Open&amp;quot;)
          (command &amp;quot;Save&amp;quot;)
          (if (isOSX)
            (command &amp;quot;Save to icloud&amp;quot;)
          )
          (command &amp;quot;Save as...&amp;quot;)))))
&lt;/pre&gt;
&lt;p&gt;Now imagine how you would implement a check like that in an xml or
json file. I was able to take advantage of a new method (isOSX)
immediately, as well as built-in methods like an if statement.
Because data is code, your representation is just as powerful as your
language. Now that is power at the touch of your fingertips.&lt;/p&gt;
&lt;p&gt;Lisp and it's cousins are definitely weird to get used to, but the true
power of the direct binding of code and data that is built in is a
concept worth really exploring and understanding. I'm just diving in
and already having a blast.&lt;/p&gt;
</content><category term="programming"></category><category term="data"></category><category term="code"></category></entry><entry><title>I No Longer Need StackOverflow</title><link href="i-no-longer-need-stackoverflow.html" rel="alternate"></link><published>2014-02-16T00:00:00+01:00</published><updated>2014-02-16T00:00:00+01:00</updated><author><name>Yusuke Tsutsumi</name></author><id>tag:None,2014-02-16:i-no-longer-need-stackoverflow.html</id><summary type="html">&lt;p&gt;So I guess &lt;a class="reference external" href="http://techcrunch.com/2014/02/16/stackoverflow-goes-down-programmers-around-the-world-panic-its-back-up-now/"&gt;StackOverflow was down today&lt;/a&gt;. It
was only for an hour, but if social media tells you anything, you
would believe
it &lt;a class="reference external" href="https://twitter.com/lexisla/status/435140222234279936"&gt;stopped&lt;/a&gt;
&lt;a class="reference external" href="https://twitter.com/jterrace/status/435136180393234432"&gt;the&lt;/a&gt;
&lt;a class="reference external" href="https://twitter.com/pauly4it/status/435130384838164480"&gt;whole&lt;/a&gt;
&lt;a class="reference external" href="https://twitter.com/y0urworldonfire/status/435129205668319232"&gt;programming&lt;/a&gt;
&lt;a class="reference external" href="https://twitter.com/Trollkemada/status/435128989904932864"&gt;world&lt;/a&gt;
&lt;a class="reference external" href="https://twitter.com/richeym/status/435127686189445120"&gt;cold&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Quite a few of these were probably made in jest, but it made me
realize something. I had just spent …&lt;/p&gt;</summary><content type="html">&lt;p&gt;So I guess &lt;a class="reference external" href="http://techcrunch.com/2014/02/16/stackoverflow-goes-down-programmers-around-the-world-panic-its-back-up-now/"&gt;StackOverflow was down today&lt;/a&gt;. It
was only for an hour, but if social media tells you anything, you
would believe
it &lt;a class="reference external" href="https://twitter.com/lexisla/status/435140222234279936"&gt;stopped&lt;/a&gt;
&lt;a class="reference external" href="https://twitter.com/jterrace/status/435136180393234432"&gt;the&lt;/a&gt;
&lt;a class="reference external" href="https://twitter.com/pauly4it/status/435130384838164480"&gt;whole&lt;/a&gt;
&lt;a class="reference external" href="https://twitter.com/y0urworldonfire/status/435129205668319232"&gt;programming&lt;/a&gt;
&lt;a class="reference external" href="https://twitter.com/Trollkemada/status/435128989904932864"&gt;world&lt;/a&gt;
&lt;a class="reference external" href="https://twitter.com/richeym/status/435127686189445120"&gt;cold&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Quite a few of these were probably made in jest, but it made me
realize something. I had just spent my day &lt;a class="reference external" href="https://github.com/toumorokoshi/murasaki-language/commit/0d0a7fdafbd8dcd55b18553b1cc96609801b3dbd"&gt;coding&lt;/a&gt;.
A few hours on some open projects, a few on a private one. I wrestled
with things like &lt;a class="reference external" href="http://llvm.org/"&gt;llvm&lt;/a&gt; and c++, technologies I'm honestly unfamiliar with,
and arguably difficult for someone who hasn't touched it before. And the whole day, &lt;strong&gt;I
didn't refer to StackOverflow once&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In fact, I haven't visited StackOverflow for answers to any of my llvm
questions, even as I've waded through it for the past couple
months. Or my c++ questions. Or my questions for the &lt;a class="reference external" href="https://code.google.com/p/playn/"&gt;playn&lt;/a&gt; framework, a lesser-know game
framework where a majority of the questions and answers are located on
&lt;a class="reference external" href="http://stackoverflow.com/questions/tagged/playn"&gt;StackOverflow&lt;/a&gt;. In
fact, I found I visit it maybe once every few months,
usually because it's referenced in an article or some code I was reading.&lt;/p&gt;
&lt;p&gt;Of course, it's not like I never used StackOverflow. I remember when I
started my professional programming career a couple of years ago, I
was on it daily, searching for answers to questions as
simple as &lt;a class="reference external" href="http://stackoverflow.com/questions/1919044/is-there-a-better-way-to-iterate-over-two-lists-getting-one-element-from-each-l"&gt;iterating over two lists in python&lt;/a&gt;
to something more obscure like &lt;a class="reference external" href="http://stackoverflow.com/questions/6783958/automatically-generate-python-egg-from-python-pastescript/7335347?noredirect=1#7335347"&gt;customizing the setup.py generated by
pastescript&lt;/a&gt;. But
as some point, &lt;strong&gt;something changed&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Whenever a library behaved in an unexpected way, I started digging
into the code to really understand what was going on.&lt;/p&gt;
&lt;p&gt;Instead of asking StackOverflow if an API exists or a library has a particular
feature, I read the docs instead.&lt;/p&gt;
&lt;p&gt;Instead of asking if my theory will work, I figure out a way to test it, and try it on my own machine.&lt;/p&gt;
&lt;p&gt;I found that doing things without StackOverflow and investigating on
my own, I learned a lot more around what I was having trouble with.
Instead of just learning the solution to the exact problem I was
having, I was learning more about the technologies I use, insights
that help me solve several similar problems I would have to go back to
StackOverflow to ask otherwise.&lt;/p&gt;
&lt;p&gt;Now, I'm not saying StackOverflow is bad. It's a great place to get
help from experienced developers who really understand their stuff. If
you have literally no idea where to go to get information, it's
amazing to have a resource that provides such clear and insightful
answers. But at some point, I found that I knew where to
find the answers myself. And I chose to go find it myself, because I
knew that the journey to finding the answer will leave me with a
better understanding of the problem, the solution, the
techniques used to derive the solution, and sometimes a better
understanding of programming in general.&lt;/p&gt;
&lt;p&gt;I'm one hundred percent sure I'm going to use StackOverflow again. But
it's nice to know that I no longer need it, and my programming life
doesn't freeze without it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;EDIT&lt;/strong&gt; Along with the Disqus below, there's also a lively discussion on &lt;a class="reference external" href="https://news.ycombinator.com/item?id=7251169"&gt;hackernews&lt;/a&gt;.&lt;/p&gt;
</content><category term="programming"></category><category term="stackoverflow"></category></entry><entry><title>Emacs From Scratch, Part 2: Package management</title><link href="emacs-from-scratch-part-2-package-management.html" rel="alternate"></link><published>2014-02-01T00:00:00+01:00</published><updated>2014-02-01T00:00:00+01:00</updated><author><name>Yusuke Tsutsumi</name></author><id>tag:None,2014-02-01:emacs-from-scratch-part-2-package-management.html</id><summary type="html">&lt;p&gt;This is a series of tutorials geared around building up your own
customized environment, using emacs, from scratch.
You can find &lt;a class="reference external" href="emacs-from-scratch-part-1-extending-emacs-basics.html"&gt;part 1 here&lt;/a&gt;
You can find &lt;a class="reference external" href="emacs-from-scratch-part-3-extending-emacs-with-elisp.html"&gt;part 3 here&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="installing-and-managing-packages"&gt;
&lt;h2&gt;Installing and Managing Packages&lt;/h2&gt;
&lt;div class="section" id="requirements"&gt;
&lt;h3&gt;Requirements&lt;/h3&gt;
&lt;p&gt;To follow along with this tutorial, all you need is an existing
installation of Emacs …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;This is a series of tutorials geared around building up your own
customized environment, using emacs, from scratch.
You can find &lt;a class="reference external" href="emacs-from-scratch-part-1-extending-emacs-basics.html"&gt;part 1 here&lt;/a&gt;
You can find &lt;a class="reference external" href="emacs-from-scratch-part-3-extending-emacs-with-elisp.html"&gt;part 3 here&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="installing-and-managing-packages"&gt;
&lt;h2&gt;Installing and Managing Packages&lt;/h2&gt;
&lt;div class="section" id="requirements"&gt;
&lt;h3&gt;Requirements&lt;/h3&gt;
&lt;p&gt;To follow along with this tutorial, all you need is an existing
installation of Emacs 24, or package.el. I note 24 specifically because if you have
Linux, your distribution might not have an Emacs package that is version 24 or higher.&lt;/p&gt;
&lt;p&gt;You can find out your emacs version with the 'M-x emacs-version' in
your Emacs. If you don't have 24, Bozhidar Batsov wrote a great guide
on &lt;a class="reference external" href="http://batsov.com/articles/2011/10/09/getting-started-with-emacs-24/"&gt;installing emacs 24&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Conversely, you can install &lt;a class="reference external" href="http://repo.or.cz/w/emacs.git/blob_plain/1a0a666f941c99882093d7bd08ced15033bc3f0c:/lisp/emacs-lisp/package.el"&gt;package.el&lt;/a&gt;.
Simple add it somewhere to your .emacs.d and load it as shown in part 1.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="background"&gt;
&lt;h3&gt;Background&lt;/h3&gt;
&lt;p&gt;Text editors tend to be limited in the initial functionality they
provide. Even Emacs, which provides a larger set of base functionality
and features than most, will probably not have everything you
want. Luckily, like most other editors these days, Emacs provides
methodology to extend your text editor by taking code others have written. Vim and Sublime call them
plugins, Emacs calls them &lt;em&gt;packages&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;As of Emacs 24, packages management is now included by default. This means you have a way to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;install packages: M-x package-install &amp;lt;package&amp;gt;&lt;/li&gt;
&lt;li&gt;list all existing packages: M-x list-packages&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But we have a couple steps to go until we reach package management nirvana.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-code"&gt;
&lt;h3&gt;The Code&lt;/h3&gt;
&lt;p&gt;For this tutorial, let's add two separate files into our ~/.emacs.d/ directory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;my-packages.el&lt;/li&gt;
&lt;li&gt;my-loadpackages.el&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And load .emacs.loadpackages files in your ~/.emacs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;load&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;~/.emacs.d/my-loadpackages.el&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We're going to split our code up into two parts: one file to define
what packages we want to install, and another to load and set up those
packages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="adding-packages-archives"&gt;
&lt;h3&gt;Adding packages archives&lt;/h3&gt;
&lt;p&gt;Emacs 24's packages manager allows the adding of additional package
archives, the places where package.el looks for packages to
install. In your my-packages.el, let's tell Emacs to add some more
package archives:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;; my-packages.el&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;package-archives&lt;/span&gt;
             &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;melpa&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://melpa.milkbox.net/packages/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;package-archives&lt;/span&gt;
             &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;marmalade&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://marmalade-repo.org/packages/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;package-initialize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So what are these package archives? Here's some info about them:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://melpa.milkbox.net/#/"&gt;melpa&lt;/a&gt; is a package archive managed
by Milkypostman. It's the easiest package archive to add packages
too, and is automatically updated when the package is. The go-to
source for up to date, and the vast majority of, packages. However
it's worth noting that with cutting-edge comes instability, so that
is a risk of stability one should be aware of. It's worth noting I've never been
broken for any package I've installed via melpa, however.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://marmalade-repo.org/"&gt;marmalade&lt;/a&gt; is another third-party
package manager. Marmalade tends to be more stable, due to the
requirement that developers explicitely upload new versions of their
packages.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I personally use both (and the built-in Emacs 24 package-archive), but
if you don't want to use one or the other, remove the offending
statements from above.&lt;/p&gt;
&lt;p&gt;The code above does the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;loads the package 'package' via the require keyword&lt;/li&gt;
&lt;li&gt;installs relevant package managers&lt;/li&gt;
&lt;li&gt;initializes the package system so definitions are loaded&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-and-loading-packages-on-startup"&gt;
&lt;h3&gt;Installing and Loading Packages on Startup&lt;/h3&gt;
&lt;p&gt;Now that we have the package repositories we like, it's time to
install some packages! First, choose a package you'd like to
install. I'm going to install &lt;a class="reference external" href="http://magit.github.io/documentation.html"&gt;magit&lt;/a&gt;, a very nice version
control major mode for git, and &lt;a class="reference external" href="http://capitaomorte.github.io/yasnippet/"&gt;yasnippet&lt;/a&gt;, a package to easily
parameterize and inject templates as needed (e.g. a java class template).
Remember, you can always find more package by using 'M-x list-packages'&lt;/p&gt;
&lt;p&gt;If you wanted to install these manually, all you would have to do is 'M-x
package-install &amp;lt;package&amp;gt;'. However, I believe in reproduceability, so I'm
going to explain a method that will automatically install desired
missing packages on startup.&lt;/p&gt;
&lt;p&gt;(To give proper attribution, I adapted this method from snippets in &lt;a class="reference external" href="https://github.com/bbatsov/prelude/blob/master/core/prelude-packages.el"&gt;this file&lt;/a&gt;
in emacs-prelude.)&lt;/p&gt;
&lt;p&gt;The first step is to define a list of packages you want installed on
startup. In your my-packages.el, after the package archives have been
initialized, let's create a list and store our desired packages in them:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;; my-packages.el&lt;/span&gt;
&lt;span class="c1"&gt;; defvar is the correct way to declare global variables&lt;/span&gt;
&lt;span class="c1"&gt;; you might see setq as well, but setq is supposed to be use just to set variables,&lt;/span&gt;
&lt;span class="c1"&gt;; not create them.&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defvar&lt;/span&gt; &lt;span class="nv"&gt;required-packages&lt;/span&gt;
  &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nv"&gt;magit&lt;/span&gt;
    &lt;span class="nv"&gt;yasnippet&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;a list of packages to ensure are installed at launch.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that required-packages is defined, we can use it to install some
packages! Let's add a few more lines to install these packages for us:&lt;/p&gt;
&lt;p&gt;Add the following to my-packages.el:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;; my-packages.el&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;cl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;; method to check if all packages are installed&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;packages-installed-p&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;loop&lt;/span&gt; &lt;span class="nv"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;p&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;required-packages&lt;/span&gt;
        &lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;package-installed-p&lt;/span&gt; &lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="nb"&gt;do&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nv"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;return&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="c1"&gt;; if not all packages are installed, check one by one and install the missing ones.&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;packages-installed-p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;; check for new packages (package versions)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%s&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Emacs is now refreshing its package database...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;package-refresh-contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%s&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; done.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;; install the missing packages&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dolist&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;p&lt;/span&gt; &lt;span class="nv"&gt;required-packages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;package-installed-p&lt;/span&gt; &lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;package-install&lt;/span&gt; &lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So what does this code do? Well:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;package-installed-p is from package.el and checks if a package is installed&lt;/li&gt;
&lt;li&gt;packages-installed-p checks if all desired packages are installed&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;the unless clause:&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;first checks if all packages are installed. If they are, no need to do extra work.&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;if not all packages are installed:&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;refresh the package indices&lt;/li&gt;
&lt;li&gt;install each non-installed package.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So whenever I want to install a package, I just add it to the list. If
you share your .emacs configuration across machines, or have to start
from scratch, this makes it very easy to build an environment. Even if
you completely blow away your existing packages.&lt;/p&gt;
&lt;p&gt;Give it a try! shut down your emacs now and start it back up, and you
should install the magit and yasnippet packages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="loading-and-configuring-packages"&gt;
&lt;h3&gt;Loading and Configuring Packages&lt;/h3&gt;
&lt;p&gt;So now we have packages installing automatically. How do we use them?&lt;/p&gt;
&lt;p&gt;Each package has it's own configuration, so it's best to read the
README or documentation. However, almost all packages require you to
require it first. Let's add a few lines to our .emacs.d/my-loadpackages.el:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;; my-loadpackages.el&lt;/span&gt;
&lt;span class="c1"&gt;; loading package&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;load&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;~/.emacs.d/my-packages.el&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;magit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;define-key&lt;/span&gt; &lt;span class="nv"&gt;global-map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C-c m&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;magit-status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;yasnippet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;yas-global-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;yas-load-directory&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;~/.emacs.d/snippets&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;term-mode-hook&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;yas-dont-activate&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So each package section starts with a &amp;quot;require&amp;quot;, which loads a
particular package into the existing emacs environment. This is
required before configuring anything related no that package. Notice
that I also use the require as a section header, defining what package
is related to what configuration.&lt;/p&gt;
&lt;p&gt;One thing to note here is that once a package is loaded via require,
it's methods are globally available EVERYWHERE. There's no concept of
importing just for the file in emacs lisp, you just add everything to
this global context. However, most packages use a prefix, (such as
'yas' for yasnippet commands) so it doesn't seem too cluttered.&lt;/p&gt;
&lt;p&gt;Here we also see another use of add-hook, but it's different this
time: this time we hook it to a particular major mode. This means that
this particular hook will activate when that major-mode is
activated. This is useful when you want to activate specific behaviour
for when you're editing a particular kind of text (e.g. binding a
shortcut to open up a python interpreter if you're in a python major mode)&lt;/p&gt;
&lt;p&gt;As an aside, here's the configuration I'm setting here:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;binding C-c m to magit-status: this is an example of a custom
shortcut for my environment. Wherever I am, I can hit C-c m and see
the status of the git repository I'm in (if I'm in one).&lt;/li&gt;
&lt;li&gt;yas-global-mode: this ensures that yasnippet is activated
globally. Since yasnippet doesn't typically interfere with anything,
and I've found that any sort of text I'm modifying benefits from
snippets, It's a good default to have.&lt;/li&gt;
&lt;li&gt;yas-load-directory: this allows me to load snippets from a specific
location. I have custom snippets I store in there.&lt;/li&gt;
&lt;li&gt;(add-hook 'term-mode-hook...): this is a little hack that needs to
exist. Otherwise, tab-complete doesn't work in Emacs' terminal
emulators such as ansi-mode.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;Here's what we learned:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;emacs has a built-in (as of Emacs 24) package management system.&lt;/li&gt;
&lt;li&gt;can install third-party repositories by adding entries to package-archives&lt;/li&gt;
&lt;li&gt;can install packages manually with M-x install-package&lt;/li&gt;
&lt;li&gt;packages can be loaded via (require '&amp;lt;package-name&amp;gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="final-code"&gt;
&lt;h3&gt;Final Code&lt;/h3&gt;
&lt;p&gt;Note: this includes code from part one&lt;/p&gt;
&lt;p&gt;.emacs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;load&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;~/.emacs.d/my-loadpackages.el&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;after-init-hook&lt;/span&gt; &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;load&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;~/.emacs.d/my-noexternals.el&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;.emacs.d/my-noexternals.el:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;; ~/.emacs.d/my-noexternals.el&lt;/span&gt;

&lt;span class="c1"&gt;;; Remove scrollbars, menu bars, and toolbars&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;fboundp&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;menu-bar-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;menu-bar-mode&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;fboundp&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;tool-bar-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;tool-bar-mode&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;fboundp&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;scroll-bar-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;scroll-bar-mode&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;;; Wind-move&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C-c C-j&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;windmove-left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C-c C-k&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;windmove-down&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C-c C-l&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;windmove-up&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C-c C-;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;windmove-right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;.emacs.d/my-packages.el:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;; ~/.emacs.d/my-packages.el&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;cl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;package-archives&lt;/span&gt;
             &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;melpa&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://melpa.milkbox.net/packages/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;package-archives&lt;/span&gt;
             &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;marmalade&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://marmalade-repo.org/packages/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;package-initialize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defvar&lt;/span&gt; &lt;span class="nv"&gt;required-packages&lt;/span&gt;
  &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nv"&gt;magit&lt;/span&gt;
    &lt;span class="nv"&gt;yasnippet&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;a list of packages to ensure are installed at launch.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;; method to check if all packages are installed&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;packages-installed-p&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;loop&lt;/span&gt; &lt;span class="nv"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;p&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;required-packages&lt;/span&gt;
        &lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;package-installed-p&lt;/span&gt; &lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="nb"&gt;do&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;return&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nv"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;return&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="c1"&gt;; if not all packages are installed, check one by one and install the missing ones.&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;packages-installed-p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;; check for new packages (package versions)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%s&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Emacs is now refreshing its package database...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;package-refresh-contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%s&amp;quot;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; done.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;; install the missing packages&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dolist&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;p&lt;/span&gt; &lt;span class="nv"&gt;required-packages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;package-installed-p&lt;/span&gt; &lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;package-install&lt;/span&gt; &lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;.emacs.d/my-loadpackages.el:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;; ~/.emacs.d/my-loadpackages.el&lt;/span&gt;
&lt;span class="c1"&gt;; loading package&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;load&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;~/.emacs.d/my-packages.el&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;magit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;define-key&lt;/span&gt; &lt;span class="nv"&gt;global-map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C-c m&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;magit-status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;yasnippet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;yas-global-mode&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;yas-load-directory&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;~/.emacs.d/snippets&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-hook&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;term-mode-hook&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;yas-dont-activate&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h4&gt;What's Next&lt;/h4&gt;
&lt;p&gt;Next tutorial, we'll talk about writing our own methods and modifying behaviour ourselves.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="further-reading-references"&gt;
&lt;h4&gt;Further Reading / References&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://repo.or.cz/w/emacs.git/blob_plain/1a0a666f941c99882093d7bd08ced15033bc3f0c:/lisp/emacs-lisp/package.el"&gt;package.el&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://melpa.milkbox.net/#/"&gt;melpa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://marmalade-repo.org/"&gt;marmalade&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://magit.github.io/documentation.html"&gt;magit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://capitaomorte.github.io/yasnippet/"&gt;yasnippet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="emacs"></category><category term="environment"></category></entry><entry><title>Emacs From Scratch, Part 1: Extending Emacs basics</title><link href="emacs-from-scratch-part-1-extending-emacs-basics.html" rel="alternate"></link><published>2014-01-22T00:00:00+01:00</published><updated>2014-01-22T00:00:00+01:00</updated><author><name>Yusuke Tsutsumi</name></author><id>tag:None,2014-01-22:emacs-from-scratch-part-1-extending-emacs-basics.html</id><summary type="html">&lt;p&gt;This is a series of tutorials geared around building up your own
customized environment, using emacs, from scratch.&lt;/p&gt;
&lt;p&gt;You can find &lt;a class="reference external" href="emacs-from-scratch-part-2-package-management.html"&gt;part 2 here&lt;/a&gt;
You can find &lt;a class="reference external" href="emacs-from-scratch-part-3-extending-emacs-with-elisp.html"&gt;part 3 here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This tutorial is geared toward those who are starting with extending
Emacs, and want to learn the pieces you need …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a series of tutorials geared around building up your own
customized environment, using emacs, from scratch.&lt;/p&gt;
&lt;p&gt;You can find &lt;a class="reference external" href="emacs-from-scratch-part-2-package-management.html"&gt;part 2 here&lt;/a&gt;
You can find &lt;a class="reference external" href="emacs-from-scratch-part-3-extending-emacs-with-elisp.html"&gt;part 3 here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This tutorial is geared toward those who are starting with extending
Emacs, and want to learn the pieces you need to know to really extend
and build your custom environment. If you want to just get started
with a rocking environment and don't care about understanding the
nitty-gritty, I'd suggest looking at &lt;a class="reference external" href="https://github.com/bbatsov/prelude"&gt;emacs-prelude&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We're going to go in-depth on discussing the following topics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;extending your base emacs with init-files, and some good practices there&lt;/li&gt;
&lt;li&gt;managing and installing packages, and doing so automatically&lt;/li&gt;
&lt;li&gt;binding command and keys to installed packages&lt;/li&gt;
&lt;li&gt;writing some custom code, and integrating it into your emacs environment&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you follow all these tutorials word for word, you'll end up with
the building blocks to set up your own personalized emacs environment. Here's mine:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.youtube.com/watch?v=8vdOrsywra0"&gt;My Emacs Setup&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;However, I would recommend picking and choosing the parts that best
suit your purposes. Please leave comments if I'm not going in-depth
enough to provide the tools to do so.&lt;/p&gt;
&lt;p&gt;So let's begin!&lt;/p&gt;
&lt;div class="section" id="the-tutorial"&gt;
&lt;h2&gt;The Tutorial&lt;/h2&gt;
&lt;div class="section" id="emacs-lisp"&gt;
&lt;h3&gt;Emacs Lisp&lt;/h3&gt;
&lt;p&gt;To follow these tutorials, you need to have a very rudimentary
understanding of emacs lisp. Basically just remeber this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
(method arg1 arg2 ...)
&lt;/pre&gt;
&lt;p&gt;Is how methods are called: the first element in a parentheses is the
method being called, and the subsequent elements are it's arguments.&lt;/p&gt;
&lt;p&gt;You can also nest calls into calls, like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
(foo (bar bar-argument) foo-argument)
&lt;/pre&gt;
&lt;p&gt;This nesting of statements is what starts the chain of parentheses
that lisp and lisp dialects are famous for.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="init-files"&gt;
&lt;h3&gt;Init-Files&lt;/h3&gt;
&lt;p&gt;init-files are the files that emacs loads on startup. This is similar
to the rc files that you often see with shells/terminals, vim, or a
variety of other tools.&lt;/p&gt;
&lt;p&gt;Emacs has a few standard places to add an init-file, but those are
already well documented in the &lt;a class="reference external" href="http://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html"&gt;manual&lt;/a&gt;.
If you want to know more, feel free to read there.&lt;/p&gt;
&lt;p&gt;For the most part, however, there are two main locations where
init-files lie: the .emacs file and the .emacs.d directory in the user
root.&lt;/p&gt;
&lt;p&gt;Unlike some other init files, Emacs's initialization is basically
evaluating the init-files with it's built-in elisp (Emacs Lisp)
interpreter. This is what provides Emacs users with real power: since
the great majority of Emacs is written directly in elisp, it is
possible to extend any of that code with your init-file, or even
evaluating code on the fly after the system starts up. This is a stark
contrast to other extensibile architectures, which only allow a
discrete set of configs or apis from which to modify application
behaviour. When you hear someone say Emacs is &amp;quot;infinitely extensible&amp;quot;,
this is what they mean: you can practically modify whatever you want
in Emacs!&lt;/p&gt;
&lt;p&gt;But before we get to this awesome power, it's first best to learn some
ways to organize your init-files. Emacs init-files can get huge, and
having good practices now will help you manage all the pieces in the long run.&lt;/p&gt;
&lt;p&gt;The .emacs.d directory is the de-facto place to store configuration
files beyond the .emacs file. Package managers add their packages
there, packages add their configuration there, so it's also a good
place to add our custom configuration.&lt;/p&gt;
&lt;p&gt;For our example, let's disable the menu, scroll and tool bars. This
removes all of the dropdown gui menus, so all we have are the buffers
left. You might think this is crippling at first, but learning your keybindings
will make you way more efficient in the long run.&lt;/p&gt;
&lt;p&gt;You can name your files whatever you want, but I've found it's easy to
find files if you prefix them. I prefix all of my init-files with
&amp;quot;my-&amp;quot;. This also has the advantage of signifying it's a personal
configuration.&lt;/p&gt;
&lt;p&gt;So let's make a file now called &amp;quot;my-noexternals&amp;quot;. This signifies to me
that these are configs for components that are native to Emacs (don't
depend on third-party packages, or &amp;quot;externals&amp;quot;). Let's disable the menu, tool, and
scroll bar now:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
; ~/.emacs.d/my-noexternals.el

;; Remove scrollbars, menu bars, and toolbars
; when is a special form of &amp;quot;if&amp;quot;, with no else clause, it reads:
; (when &amp;lt;condition&amp;gt; &amp;lt;code-to-execute-1&amp;gt; &amp;lt;code-to-execute2&amp;gt; ...)
(when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
&lt;/pre&gt;
&lt;p&gt;Now that we have that, we need to load our my-noexternals.el file in
our .emacs. Add the following line to ~/.emacs:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
; ~/.emacs
(load &amp;quot;~/.emacs.d/my-noexternals.el&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;And now when you start emacs, you'll have the bars disabled! Of
course, you're welcome to enable whatever you like, I was just using
this as an example.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rebinding-keys"&gt;
&lt;h3&gt;Rebinding Keys&lt;/h3&gt;
&lt;p&gt;Now let's say we want to re-bind keys. elisp has a command for that as
well, and it's called global-set-key. It works like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
(global-set-key &amp;lt;keychord&amp;gt; &amp;lt;function-name&amp;gt;)
&lt;/pre&gt;
&lt;p&gt;An easy way to declare the key chord you want to use is by using the
&amp;quot;kbd&amp;quot; command, which evaluates a keychord formatted in typical emacs
key-chord fashion, and evaluates it to something global-set-key can
understand. As an example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
(global-set-key (kbd &amp;quot;C-c C-j&amp;quot;) 'foo)
&lt;/pre&gt;
&lt;p&gt;Would make C-c C-j (&amp;lt;Ctrl + c&amp;gt; followed by &amp;lt;Ctrl + j&amp;gt;) run the &amp;quot;foo&amp;quot; function.&lt;/p&gt;
&lt;p&gt;As a personal preference, I like
navigating through my open windows with vim-like movement (hjkl). As a
compromise, I bind the following commands:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
; ~/my-noexternals.el

;; Wind-move

(global-set-key (kbd &amp;quot;C-c C-j&amp;quot;) 'windmove-left)
(global-set-key (kbd &amp;quot;C-c C-k&amp;quot;) 'windmove-down)
(global-set-key (kbd &amp;quot;C-c C-l&amp;quot;) 'windmove-up)
(global-set-key (kbd &amp;quot;C-c C-;&amp;quot;) 'windmove-right)
&lt;/pre&gt;
&lt;p&gt;windmove-&amp;lt;direction&amp;gt; is a command that moves your window focus to the
first window in the direction specified. I bind them to the chords C-c
C-(jkl;), because C-c C-h is a help command.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-hooks"&gt;
&lt;h3&gt;Using Hooks&lt;/h3&gt;
&lt;p&gt;However, the problem with some keybindings is that they get overridden
depending on the order global-set-key gets run. This is especially a
problem when using external packages, which can sometimes override
keys with their own configuration. This is not a common practice now,
but can still happend.&lt;/p&gt;
&lt;p&gt;To help ensure your commands run in a particular order, Emacs provides
hooks into it's startup (along with several other places, but we'll
get into that later). So let's modify our .emacs so my-noexternals.el
gets loaded at the very end, after everything else has run:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
; ~/.emacs

(add-hook 'after-init-hook '(lambda ()
  (load &amp;quot;~/.emacs.d/my-noexternals.el&amp;quot;)
))
&lt;/pre&gt;
&lt;p&gt;The &amp;quot;add-hook&amp;quot; command allows you to hook methods to run at a
particular time, and the &amp;quot;'after-init-hook&amp;quot; tells emacs to run the
method after everything else in the init-file loaded.&lt;/p&gt;
&lt;p&gt;Note that in this example, I used a lambda/anonymous method versus an
explicit function. It's typically the standard to do lambdas in hooks
over, say, defining a function and passing it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;So to recap, here's the useful things we learned:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;~/.emacs and ~/.emacs.d/ are the standard locations to add init-files&lt;/li&gt;
&lt;li&gt;splitting out ~/.emacs into several other files and loading those is a lot easier to manage&lt;/li&gt;
&lt;li&gt;(load &amp;lt;filename&amp;gt;) will evaluate a file&lt;/li&gt;
&lt;li&gt;(global-set-key &amp;lt;keychord&amp;gt; &amp;lt;function-name&amp;gt;) will set &amp;lt;keychord&amp;gt; to run &amp;lt;function-name&amp;gt;&lt;/li&gt;
&lt;li&gt;(add-hook &amp;lt;hook&amp;gt; &amp;lt;lambda&amp;gt;) to run lambda at a particular event&lt;/li&gt;
&lt;li&gt;the &amp;quot;'after-init-hook&amp;quot; event will run functions after the rest of the init-file has finished loading.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="final-code"&gt;
&lt;h3&gt;Final Code&lt;/h3&gt;
&lt;p&gt;.emacs:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
(add-hook 'after-init-hook '(lambda ()
  (load &amp;quot;~/.emacs.d/my-noexternals.el&amp;quot;)
))
&lt;/pre&gt;
&lt;p&gt;.emacs.d/my-noexternals.el:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
; ~/.emacs.d/my-noexternals.el

;; Remove scrollbars, menu bars, and toolbars
(when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

;; Wind-move
(global-set-key (kbd &amp;quot;C-c C-j&amp;quot;) 'windmove-left)
(global-set-key (kbd &amp;quot;C-c C-k&amp;quot;) 'windmove-down)
(global-set-key (kbd &amp;quot;C-c C-l&amp;quot;) 'windmove-up)
(global-set-key (kbd &amp;quot;C-c C-;&amp;quot;) 'windmove-right)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h3&gt;What's Next&lt;/h3&gt;
&lt;p&gt;Next tutorial, we'll talk about package management.
You can find part 2 &lt;a class="reference external" href="emacs-from-scratch-part-2-package-management.html"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="further-reading-references"&gt;
&lt;h3&gt;Further Reading / References&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html"&gt;init-file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.gnu.org/software/emacs/manual/html_node/emacs/Hooks.html"&gt;hooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Commands.html"&gt;keybindings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.emacswiki.org/emacs/WindMove"&gt;windmove&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="emacs"></category><category term="environment"></category></entry><entry><title>Introducing Sprinter: environment management made easy</title><link href="introducing-sprinter-environment-management-made-easy.html" rel="alternate"></link><published>2013-09-29T00:00:00+02:00</published><updated>2013-09-29T00:00:00+02:00</updated><author><name>Yusuke Tsutsumi</name></author><id>tag:None,2013-09-29:introducing-sprinter-environment-management-made-easy.html</id><summary type="html">&lt;p&gt;Today, I wanted to talk about one of the more annoying problems that pops from time to time: setting up
a new machine, and keeping existing machines in sync. Setting up new machines just the way you like them is
hard. The longer you've been developing, the more programs, tools …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today, I wanted to talk about one of the more annoying problems that pops from time to time: setting up
a new machine, and keeping existing machines in sync. Setting up new machines just the way you like them is
hard. The longer you've been developing, the more programs, tools, and
configuration you take with you. When you set up a new machine, you
have to remember everything you had set up on an old machine,
including:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;your .rc and shell config files (.vimrc, .emacs, .bashrc)&lt;/li&gt;
&lt;li&gt;all of the packages you've installed&lt;/li&gt;
&lt;li&gt;packages you've downloaded by hand and extracted&lt;/li&gt;
&lt;li&gt;little tweaks and workarounds you had to employ to get stuff working&lt;/li&gt;
&lt;li&gt;generating ssh keys and setting up ssh configs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At a company, things become even more difficult. In addition to the difficulties
mentioned above, you have to handle additional problems like
installing and updating internal tools, and you have more machines:
every developer needs to remain in sync!&lt;/p&gt;
&lt;p&gt;Another one of the big problems comes from developers who use their own machines
to work on company projects: there's times when you want to deactivate or remove
the company development environment, so you can continue work on your own, personal
projects, without having to take a lot of time switching back and forth.&lt;/p&gt;
&lt;div class="section" id="enter-sprinter"&gt;
&lt;h2&gt;Enter Sprinter&lt;/h2&gt;
&lt;p&gt;Sprinter is a development environment management tool, designed to easily create,
manage, and configure multiple development environments.&lt;/p&gt;
&lt;p&gt;So what does that look like? Well, the first step is to install
sprinter. Currently, installing sprinter involves downloading and
running a shell script. You can take advantage of these pre-crafted commands:&lt;/p&gt;
&lt;p&gt;Using curl (OSX):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
curl -s https://raw.github.com/toumorokoshi/sprinter/master/scripts/sandbox.sh &amp;gt; /tmp/sprinter; bash /tmp/sprinter
&lt;/pre&gt;
&lt;p&gt;Using wget (Debian/Ubuntu):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cd /tmp/; rm sandbox.sh; wget https://raw.github.com/toumorokoshi/sprinter/master/scripts/sandbox.sh -O sandbox.sh; bash sandbox.sh
&lt;/pre&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;em&gt;NOTE&lt;/em&gt;: You'll have to open a new shell every time you modify an&lt;/dt&gt;
&lt;dd&gt;environment. This is because resetting shells to scratch really
isn't possible. Currently the best solution is just to open a new one.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;This adds the 'sprinter' command in a sandboxed location, inside your user root
(~/.sprinter). In fact, when sprinter installs anything, it usually ends up in
there. This allows for sandboxing packages and executables to make changing
environments easier.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="defining-sprinter-environments"&gt;
&lt;h2&gt;Defining Sprinter Environments&lt;/h2&gt;
&lt;p&gt;Each definition of a sprinter environment is a config file. For
example, here's an example configuration for an environment which
generates an ssh key, installs node.js, and sets up some git
configuration:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[config]
namespace = developer

[git]
formula = sprinter.formula.package
apt-get = git-core
brew = git
rc =
  git config --global user.name &amp;quot;Dev Eloper&amp;quot;
  git config --global user.email &amp;quot;eloperdev&amp;#64;gmail.com&amp;quot;
  git config --global alias.c checkout
  git config --global alias.s status

[github]
formula = sprinter.formula.ssh
keyname = github.com
nopassphrase = true
type = rsa
host = github.com
user = git
hostname = github.com

[node]
formula = yt.formula.node:git+https://github.com/toumorokoshi/yt.formula.node.git
version = 0.10.16
packages =
  grunt-cli
&lt;/pre&gt;
&lt;p&gt;Installing an environment is as easy as pointing sprinter to the environment configuration file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sprinter install https://raw.github.com/toumorokoshi/yt.rc/master/toumorokoshi.cfg
sprinter install ~/downloads/myconf.cfg
&lt;/pre&gt;
&lt;p&gt;And the output looks like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sprinter install developer.cfg
Checking and setting global parameters...
Installing environment developer...
A standard global ssh key was detected! Would you like to use the global ssh key? (default no): no
installing node...
/home/tsutsumi/.sprinter/developer/features/node/bin/grunt -&amp;gt; /home/tsutsumi/.sprinter/developer/features/node/lib/node_modules/grunt-cli/bin/grunt
grunt-cli&amp;#64;0.1.9 /home/tsutsumi/.sprinter/developer/features/node/lib/node_modules/grunt-cli
├── resolve&amp;#64;0.3.1
├── nopt&amp;#64;1.0.10 (abbrev&amp;#64;1.0.4)
└── findup-sync&amp;#64;0.1.2 (lodash&amp;#64;1.0.1, glob&amp;#64;3.1.21)

installing git...
Installing git-core...
[sudo] password for tsutsumi:
Reading package lists... Done
Building dependency tree
Reading state information... Done
git-core is already the newest version.
The following packages were automatically installed and are no longer required:
  linux-headers-3.2.0-32 linux-headers-3.2.0-27 linux-headers-3.2.0-32-generic
  linux-headers-3.2.0-27-generic
Use 'apt-get autoremove' to remove them.
0 upgraded, 0 newly installed, 0 to remove and 129 not upgraded.
installing github...
Finalizing...
Injecting values into /home/tsutsumi/.profile...
Injecting values into /home/tsutsumi/.zprofile...
Injecting values into /home/tsutsumi/.zshrc...
Injecting values into /home/tsutsumi/.bash_profile...
Injecting values into /home/tsutsumi/.bashrc...
Injecting values into /home/tsutsumi/.bash_profile...
Injecting values into /home/tsutsumi/.zprofile...
&lt;/pre&gt;
&lt;p&gt;Once installed, sprinter remembers where the configuration was found,
and updating is a simple as re-installing the environment, or updating
the specific namespace (sprinter looks for the updated config where
you last installed the environment):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sprinter update developer
sprinter install https://raw.github.com/toumorokoshi/yt.rc/master/toumorokoshi.cfg
sprinter install ~/downloads/myconf.cfg
&lt;/pre&gt;
&lt;p&gt;This way, managing a cross-platform(ish) development environment and
distributing it is as simple as hosting a configuration file, or
storing one in a git repository. Simply modify your configuration
file, push it, and update it when you move machines!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="managing-environments"&gt;
&lt;h2&gt;Managing Environments&lt;/h2&gt;
&lt;p&gt;Turning environments on and off is easy! Just use the deactivate and activate commands:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# turn off the developer environment
sprinter deactivate developer
# turn on the developer environment
sprinter activate developer
&lt;/pre&gt;
&lt;p&gt;(When you deactivate and activate an environment, you have to open a new shell)&lt;/p&gt;
&lt;p&gt;And removing an environment completely? Well, that's just:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sprinter remove developer
&lt;/pre&gt;
&lt;p&gt;In fact, the installer above installs sprinter as an environment! So if you wanted to remove sprinter, you could:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sprinter remove sprinter
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="building-environments-for-companies"&gt;
&lt;h2&gt;Building environments for companies&lt;/h2&gt;
&lt;p&gt;Sprinter is a great way to manage one's own personal environment, but
it was designed to support company-wide environments as well. The only
problem that company set-up scripts have over personal ones is
customization: you need to be able to customize your install based on
the username, one's own file layout, whether they want to use their
own ssh keys, and more.&lt;/p&gt;
&lt;p&gt;Sprinter includes the ability to prompt for values (and remember them)
during setup. For example let's modify the configuration above to use
a username and password, and upload the ssh key to an instance of
Atlassian Stash:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[config]
namespace = mycompany
inputs = fullname
         username
         domainpassword?
message_success = Welcome to mycompany!
message_failure = Noo! Please email immrmanager&amp;#64;mycompany.com for help

[git]
formula = sprinter.formula.package
apt-get = git-core
brew = git
rc =
  git config --global user.name &amp;quot;%(config:fullname)s&amp;quot;
  git config --global user.email &amp;quot;%(config:username)s&amp;#64;mycompany.com&amp;quot;
  git config --global alias.c checkout
  git config --global alias.s status

[curl]
formula = sprinter.formula.package
apt-get = curl

[stash]
formula = sprinter.formula.ssh
depends = curl
keyname = stash.mycompany.local
nopassphrase = true
type = rsa
host = mycompany-stash
user = git
hostname = stash.mycompany.local
install_command = curl -k -u '%(config:username)s:%(config:domainpassword)s' -X POST -H &amp;quot;Accept: application/json&amp;quot; -H &amp;quot;Content-Type: application/json&amp;quot; https://stash.mycompany.local/rest/ssh/1.0/keys -d '{&amp;quot;text&amp;quot;:&amp;quot;{{ssh}}&amp;quot;}'
use_global_ssh = False

[node]
formula = yt.formula.node:git+https://github.com/toumorokoshi/yt.formula.node.git
version = 0.10.16
packages =
  grunt-cli
&lt;/pre&gt;
&lt;p&gt;Note that you can use the input variables in a variety of places (in
the example above, the username input is used in both the git formula,
and the ssh formula to upload the ssh key). Here's what inputting parameters look like to someone installing this environment:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sprinter install mycompany.cfg
Checking and setting global parameters...
Installing environment mycompany...
please enter your fullname:
please enter your username:
please enter your domainpassword:
&lt;/pre&gt;
&lt;p&gt;Note that you can even add success/failure messages (message_success
and message_failure in the config above), so you can add e-mails for
troubleshooting and instructions on what to do next.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-sprinter-why-not-boxen-chef-puppet-x"&gt;
&lt;h2&gt;Why Sprinter? Why not Boxen/Chef/Puppet/X?&lt;/h2&gt;
&lt;p&gt;Sprinter definitely isn't the first solution to try to manage an
environment. Many alternatives exist, with their own merits. There was
a few driving factors that motivated me to roll my own, the main
reason being that the problem of maintaining development environments
and development tools is quite a bit different from maintaining a
cluster of systems for running services in. Existing solutions tended
to be ops-driven (or based on ops-driven technologies), and didn't
make considerations like:&lt;/p&gt;
&lt;div class="section" id="configuration-based-on-user-input"&gt;
&lt;h3&gt;Configuration based on user input&lt;/h3&gt;
&lt;p&gt;A lot of the management systems out there were designed to push a
machine into a specific state (Chef/Puppet). This design is influenced
directly from an operator perspective, where a machine does not need
to consider any state that already exists on the user machine
(e.g. existing SSH configuration, .rc files). Sprinter and it's
formulas take a lot of caution to not override as much global state as
possible, so the only configuration sprinter overrides are the ones it
was specifically directed to do. (e.g. adding ssh or bashrc
configuration inline with existing ones, instead of overwriting a file
completely)&lt;/p&gt;
&lt;p&gt;In addition, I haven't seen any configuration management query for
user input on install. This makes things like automatically uploading
ssh keys (which typically requires passwords you don't want to store
in a repository) very tricky, unless you're willing to do a lot of
finagling with environment variables.&lt;/p&gt;
&lt;p&gt;Sprinter solves this problem by querying and storing user input in
it's configuration, so you only have to configure things once, and it
can be different for every user that installs it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sandboxing-environments"&gt;
&lt;h3&gt;Sandboxing Environments&lt;/h3&gt;
&lt;p&gt;All of the existing environment management tools don't really consider
sandboxing an environment. Once again this comes from the fact that
current tools are designed from the needs of an operator: why would
you ever want to sandbox state of a machine that's only going to be
one type it's whole life? For developers, the needs are different: you
might have to reconfigure yourself to a release box, or a test box (in
the very common case where differences exist), and switching between
them can mean removing everything and installing from scratch.&lt;/p&gt;
&lt;p&gt;Sprinter formulas are designed to be able to easily inject and remove
state from a system. For example, a sprinter deactivate assures that
anything added to an .rc file is removed, and removing items from the
PATH. This works well for personal machines, because working on
software for your company doesn't mean you have to completely
reconfigure your machine into an irreparable state.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt;: (unfortunately, package managers on most systems are global, so it's
not possible to sandbox those. Possible solutions to this problem are
still in the works.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="multiple-simultaneous-environments"&gt;
&lt;h3&gt;Multiple Simultaneous Environments&lt;/h3&gt;
&lt;p&gt;Tools like Chef or Boxen have the disadvantage that they only allow
the one state to exist. There's no special logic to handle things like
activating two different environments simultaneously.&lt;/p&gt;
&lt;p&gt;Sprinter provides that functionality. You can overlay as many
environments as you want on top of each other, and each piece is still
a modular component that can be installed or removed. (the most
recently activated/updated environment takes precedence).&lt;/p&gt;
&lt;p&gt;This works very well for the cases sprinter is designed for, like
having a personal environment distributed through sprinter while using
your company or organization's configuration as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="it-s-easy-to-setup-and-install"&gt;
&lt;h3&gt;It's easy to setup and install&lt;/h3&gt;
&lt;p&gt;Chef and Puppet both typically require running a service, and a bit of
configuration to get up and running. Sprinter configs and the update
process was designed so that anyone could easily add an environment
into their project that developers could use.&lt;/p&gt;
&lt;p&gt;Having a global environment that anyone can use is as simple as
publishing a file online through a webserver. In fact, github is a
great place to host this. To see an example, you can look at &lt;a class="reference external" href="https://github.com/toumorokoshi/yt.rc"&gt;my
environment repository&lt;/a&gt;, where I maintain
the development environment I use on my Linux and OSX machines (I
switch between three or four).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="so-in-conclusion"&gt;
&lt;h2&gt;So in conclusion...&lt;/h2&gt;
&lt;p&gt;Sprinter has been a fun project for me that I feel like has a lot
of potential. Please give it a try! Here's some ways to explore Sprinter:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Follow the more detailed and explanatory &lt;a class="reference external" href="http://sprinter.readthedocs.org/en/latest/tutorial.html"&gt;tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Read up on the &lt;a class="reference external" href="http://sprinter.readthedocs.org/en/latest/"&gt;docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Look at the &lt;a class="reference external" href="https://github.com/toumorokoshi/sprinter"&gt;code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ask some questions on the &lt;a class="reference external" href="https://groups.google.com/forum/#!forum/sprinter-dev"&gt;Google Group&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And of course feel free to leave a comment :)&lt;/p&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="python"></category><category term="environment"></category></entry><entry><title>Python Internals</title><link href="python-internals.html" rel="alternate"></link><published>2013-08-05T00:00:00+02:00</published><updated>2013-08-05T00:00:00+02:00</updated><author><name>Yusuke Tsutsumi</name></author><id>tag:None,2013-08-05:python-internals.html</id><summary type="html">&lt;p&gt;The internals of Python are actually pretty straightforward, but it's
still worth a dive. I recently gave a talk at Zillow about it, so I'd
thought I'd share some points here as well.&lt;/p&gt;
&lt;p&gt;Everything here prefixed with &amp;gt;&amp;gt;&amp;gt; can be typed into the python
interpreter (activated by typing 'python' in your …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The internals of Python are actually pretty straightforward, but it's
still worth a dive. I recently gave a talk at Zillow about it, so I'd
thought I'd share some points here as well.&lt;/p&gt;
&lt;p&gt;Everything here prefixed with &amp;gt;&amp;gt;&amp;gt; can be typed into the python
interpreter (activated by typing 'python' in your shell if you have
python installed). I strongly encourage playing and trying some of
this stuff out yourself!&lt;/p&gt;
&lt;div class="section" id="basics"&gt;
&lt;h2&gt;Basics&lt;/h2&gt;
&lt;p&gt;At the core, everything in python is an object. Each object has three properties:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a unique identifier of the object via 'id()'&lt;/li&gt;
&lt;li&gt;a type of the object via 'type()'&lt;/li&gt;
&lt;li&gt;and it's value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The base object is represented by the keyword 'object' in python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;object&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And you can always find the methods available on any object (i.e. anything) using 'dir':&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__class__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;__delattr__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;__doc__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;__format__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;__getattribute__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;__hash__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;__init__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;__new__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;__reduce__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;__reduce_ex__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;__repr__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;__setattr__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;__sizeof__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;__str__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;__subclasshook__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So let's talk a little bit about the more interesting ones:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;__class__ returns the type of an object. If the object is a type, it returns the type 'type'&lt;/li&gt;
&lt;li&gt;__doc__ is the docstring attached to a file. These are the triple quotes contained directly below a method or class declaration.&lt;/li&gt;
&lt;li&gt;__new__ is called whenever a new instance of an object is created. It almost always calls __init__&lt;/li&gt;
&lt;li&gt;__sizeof__ get the size of the object. One can also use sys.getsizeof. This isn't the most reliable because it doesn't get the size of referenced objects, just the size of the reference itself.&lt;/li&gt;
&lt;li&gt;__delattr__, __getattribute__, and __setattr__ are used to get the attributes regarding a particular object. However, you should use (set|get|has)attr methods instead of directly calling these.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="types"&gt;
&lt;h2&gt;Types&lt;/h2&gt;
&lt;p&gt;Types are special kind of object in Python, designed to be
constructors for classes. It's not possible to create a new object
(aside from built-in shorthand like {} for dictionaries and [] for
lists) without using a type object and instantiating something with it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x7f1e14eee080&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="exec-eval-and-compile"&gt;
&lt;h2&gt;exec, eval, and compile&lt;/h2&gt;
&lt;p&gt;exec, eval, and compile are also built-in functions in Python. They
compile and evaluate code.&lt;/p&gt;
&lt;p&gt;'exec' executes a particlular string of code&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;print &amp;#39;hello world&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;'eval' evaluates an expression. &lt;em&gt;Note&lt;/em&gt;: this can not be a statement. e.g. assigning a value.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;'compile' compiles an expression or statement into a 'code' objects,
which actually contained the byte-compiled executable code, and is
what gets ultimately executed by Python.&lt;/p&gt;
&lt;p&gt;Note that you have to choose to either 'eval' or 'exec' the string
passed.  Conversely, you can pass a file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./test.py&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;print &amp;quot;hello world&amp;quot;, &amp;#39;&amp;#39;, &amp;#39;&lt;/span&gt;&lt;span class="n"&gt;exec&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="functions"&gt;
&lt;h2&gt;Functions&lt;/h2&gt;
&lt;p&gt;Functions (or methods) consist of two objects:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a code object, containing the bytecode for a particular object&lt;/li&gt;
&lt;li&gt;a globals dictionary, containing the global variables necessary&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One can't instantiate functions directly, so we have to get the type of a function first:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ftype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ftype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;print test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;exec&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So what's actually going on here?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I get the type object of function. The easiest method to do this is
to get the type of a lambda method which returns None. Since the
type of the lambda is a 'function', it's the quickest way to get
what we need.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you wanted to modify a function directly, you can! There's a large
number of method available that you can play with.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;func&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;func_closure&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;func_code&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;func_defaults&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;func_dict&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;func_doc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;func_globals&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
 &lt;span class="s1"&gt;&amp;#39;func_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_name&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&amp;lt;module&amp;gt;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello_world&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;hello_world&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;print &amp;quot;not &amp;quot; + test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;exec&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;func_globals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;goodbye world&amp;quot;&lt;/span&gt;
&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;goodbye&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="classes"&gt;
&lt;h2&gt;Classes&lt;/h2&gt;
&lt;p&gt;Classes are just basically custom types. How can you tell? It's made by using the 'type' constructor!&lt;/p&gt;
&lt;p&gt;The 'type' method can not only return the type of an object, it can
create one for you too! Since 'type' is a type object, it can be used
to instantiate new types.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MyClassType&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;bound&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="n"&gt;MyClassType&lt;/span&gt;&lt;span class="o"&gt;.&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MyClassType&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x7f524b71e510&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The syntax is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attributes&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Name: the name of the new type&lt;/li&gt;
&lt;li&gt;Parents: references to the parent classes&lt;/li&gt;
&lt;li&gt;attributes + values: a list of tuples of the key and values of the attributes of the class.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Python's objects are incredibly maleable. You can actually modify class methods directly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;noooo!&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;noooo&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Although you can also override the method on the instance directly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;yes!&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;yes&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So how does this work? Well every python object who's type isn't a
built in (think str, int) contains a dictionary-like object with all
of it's attributes. This can be viewed by the &amp;quot;__dict__&amp;quot; attribute of an object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ABC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ABC&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ABC&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x19879e0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;
&lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So how does Python know which attribute to call? This is actually
dictated in a method! If you noticed, when I ran a dir() on the
object, there was an attribute '__getattribute__'. This method
defaults to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;if the attribute is in the object's own __dict__, then use that method.&lt;/li&gt;
&lt;li&gt;if not, the attribute call's it's parents __getattribute__ method,
which of course recurses to it's own parents on being unable to find it&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One of the things about __dict__ is it's not directly writable. If you
want to modify attributes on an object, python provides built-in
functions for this:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;hasattr(foo, 'bar') returns true if the object foo has the attribute 'bar'&lt;/li&gt;
&lt;li&gt;getattr(foo, 'bar') returns the attribute foo.bar&lt;/li&gt;
&lt;li&gt;setattr(foo, 'bar', val) is equivalent to foo.bar = val&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;back to classes/types, there's some interesting hidden features as well:&lt;/p&gt;
&lt;p&gt;You can find out all the superclasses of a 'type' with .__bases__:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__bases__&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And all subclasses:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__subclasses__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nc"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dstr&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So how could I find all the classes in my scope? Since everything is
an object, we just find all subclasses of it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__subclasses__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pop Quiz: Is object a subclass of type, or visa versa?&lt;/p&gt;
&lt;p&gt;Answer: both are subclasses of each other! Kind of.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kc"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kc"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;issubclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kc"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;issubclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kc"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="frames"&gt;
&lt;h2&gt;Frames&lt;/h2&gt;
&lt;p&gt;Want to look at the stack frames within python? That's possible too.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_getframe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Will get you an instance of the existing frame, with references to the variables in the inner scope, outer scope, and more!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;There's a lot of interesting stuff going on under the hood of Python,
way beyond the brief discussion I covered here. The interpretive
nature of python is one that promotes exploration, so don't hesitate!
Explore the wonderful world of python internals.&lt;/p&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="python"></category></entry><entry><title>DRY Principles through Python Decorators</title><link href="dry-principles-through-python-decorators.html" rel="alternate"></link><published>2013-05-24T00:00:00+02:00</published><updated>2013-05-24T00:00:00+02:00</updated><author><name>Yusuke Tsutsumi</name></author><id>tag:None,2013-05-24:dry-principles-through-python-decorators.html</id><summary type="html">&lt;p&gt;Python &lt;a class="reference external" href="http://docs.python.org/3/glossary.html#term-decorator"&gt;decorators&lt;/a&gt; are a
powerful tool to remove redundancy. Along with modularizing
functionality into appropriate bite-sized methods, it makes even the
most complex workflows into concise functionality.&lt;/p&gt;
&lt;p&gt;For example, let's look at the &lt;a class="reference external" href="https://www.djangoproject.com/"&gt;Django web framework&lt;/a&gt;, which handles
requests by methods which receive a method object and return a
response …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Python &lt;a class="reference external" href="http://docs.python.org/3/glossary.html#term-decorator"&gt;decorators&lt;/a&gt; are a
powerful tool to remove redundancy. Along with modularizing
functionality into appropriate bite-sized methods, it makes even the
most complex workflows into concise functionality.&lt;/p&gt;
&lt;p&gt;For example, let's look at the &lt;a class="reference external" href="https://www.djangoproject.com/"&gt;Django web framework&lt;/a&gt;, which handles
requests by methods which receive a method object and return a
response object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello, World&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A case I ran into recently was having to write several api methods
which must:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;return json responses&lt;/li&gt;
&lt;li&gt;some must return an error code if it's a GET request vs a POST&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As an example, for a register api endpoint, I would write something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
    &lt;span class="c1"&gt;# check for post only&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;this method only accepts posts!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                                            &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                                            &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="c1"&gt;# optional fields&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;first_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;last_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="nb"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;success&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;error&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, I'm going to need json responses and error returned in pretty
much every api method I create. This would result in a majority of
logic reproduced over and over again. Let's try implementing some DRY principles with decorators.&lt;/p&gt;
&lt;div class="section" id="decorator-introduction"&gt;
&lt;h2&gt;Decorator Introduction&lt;/h2&gt;
&lt;p&gt;If you're not familiar with decorators, they are effectively function
wrappers that are run when the python interpreter loads the function,
and can modify what the function receives and returns. For example, if
I wanted to always return an integer result of one larger than whatever was
returned, I could write my decorator as so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# a decorator receives the method it&amp;#39;s wrapping as a variable &amp;#39;f&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# we use arbitrary args and keywords to&lt;/span&gt;
    &lt;span class="c1"&gt;# ensure we grab all the input arguments.&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapped_f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# note we call f against the variables passed into the wrapper,&lt;/span&gt;
        &lt;span class="c1"&gt;# and cast the result to an int and increment .&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapped_f&lt;/span&gt;  &lt;span class="c1"&gt;# the wrapped function gets returned.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now we can use it to decorate another method using the '&amp;#64;' symbol:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@increment&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;plus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;

&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;We wrote our decorator wrong!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Decorators modify the existing function, and assign the variable to
whatever is returned by the decorator. In this case, 'plus' really
refers to the result of increment(plus)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="return-an-error-on-non-post-requests"&gt;
&lt;h2&gt;Return an error on non-post requests&lt;/h2&gt;
&lt;p&gt;Now let's apply decorators to something useful. Let's make a decorator
that returns an error response if the request received isn't a POST request in
django:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post_only&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Ensures a method is post only &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapped_f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;this method only accepts posts!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
            &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapped_f&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, we can apply this to our register api above:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@post_only&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                                        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                                        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="c1"&gt;# optional fields&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;first_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;last_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="nb"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;success&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;error&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now we have a repeatable decorator we can apply to every api method we have.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="send-the-response-as-json"&gt;
&lt;h2&gt;Send the response as json&lt;/h2&gt;
&lt;p&gt;To send the response as json (and also handle the 500 status code
while we're at it), we can just create another decorator:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;json_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Return the response as json, and return a 500 error code if an error exists &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;error&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can remove the json code from our methods, and add a decorator instead:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@post_only&lt;/span&gt;
&lt;span class="nd"&gt;@json_response&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                                        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                                        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="c1"&gt;# optional fields&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;first_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;last_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="nb"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;success&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;KeyError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, if I need to write a new method, I can just use these decorators
to re-do the redundant work. If I need to make a sign-in method, I
only have to write the real relevant code a second time:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@post_only&lt;/span&gt;
&lt;span class="nd"&gt;@json_response&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;User is already authenticated!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authenticate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_active&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;User is inactive&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;success&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;User does not exist with those credentials&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="bonus-parameterizing-your-request-method"&gt;
&lt;h2&gt;BONUS: parameterizing your request method&lt;/h2&gt;
&lt;p&gt;I've used the &lt;a class="reference external" href="http://turbogears.org/index.html"&gt;Turbogears&lt;/a&gt;
framework for python, and something I've fallen in love with is the
way query parameters are interpreted and passed directory into the
method. So how can I mimic this behaviour in Django? Well, a decorator
is one way!&lt;/p&gt;
&lt;p&gt;Here's one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parameterize_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,)):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Parameterize the request instead of parsing the request directly.&lt;/span&gt;
&lt;span class="sd"&gt;    Only the types specified will be added to the query parameters.&lt;/span&gt;

&lt;span class="sd"&gt;    e.g. convert a=test&amp;amp;b=cv in request.POST to&lt;/span&gt;
&lt;span class="sd"&gt;    f(a=test, b=cv)&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;kw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;GET&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GET&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                    &lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                    &lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapped&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that this is an example of a parameterized decorator. In this
case, the &lt;em&gt;result&lt;/em&gt; of the function is the actual decorator.&lt;/p&gt;
&lt;p&gt;Now, I can write my methods with parameterized arguments! I can even
choose whether to allow GET and POST, or just one type of
query parameter.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@post_only&lt;/span&gt;
&lt;span class="nd"&gt;@json_response&lt;/span&gt;
&lt;span class="nd"&gt;@parameterize_request&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;first_name&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;last_name&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;success&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, we have a succinct, and easily understandable api!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bonus-2-using-functools-wraps-to-preserve-docstrings-and-function-name"&gt;
&lt;h2&gt;BONUS #2: Using functools.wraps to preserve docstrings and function name&lt;/h2&gt;
&lt;p&gt;(Credit goes to Wes Turner to pointing this out)&lt;/p&gt;
&lt;p&gt;Unfortunately, one of the side effects of using decorators is that the
method's name (__name__) and docstring (__doc__) values are not
preserved:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Increment a function result &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;wrapped_f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapped_f&lt;/span&gt;

&lt;span class="nd"&gt;@increment&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;plus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Add two things together &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;

&lt;span class="n"&gt;plus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;  &lt;span class="c1"&gt;# this is now &amp;#39;wrapped_f&amp;#39; instead of &amp;#39;plus&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;plus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__doc__&lt;/span&gt;   &lt;span class="c1"&gt;# this now returns &amp;#39;Increment a function result&amp;#39; instead of &amp;#39;Add two things together&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This causes issues for applications which use reflection, like Sphinx,
a library to that automatically generates documentation for your
python code.&lt;/p&gt;
&lt;p&gt;To resolve this, you can use a 'wraps' decorator to attach the name and docstring:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;wraps&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Increment a function result &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="nd"&gt;@wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;wrapped_f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapped_f&lt;/span&gt;

&lt;span class="nd"&gt;@increment&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;plus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Add two things together &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;

&lt;span class="n"&gt;plus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;  &lt;span class="c1"&gt;# this returns &amp;#39;plus&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;plus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__doc__&lt;/span&gt;   &lt;span class="c1"&gt;# this returns &amp;#39;Add two things together&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="bonus-3-using-the-decorator-decorator"&gt;
&lt;h2&gt;BONUS #3: Using the 'decorator' decorator&lt;/h2&gt;
&lt;p&gt;(Credit goes to &lt;a class="reference external" href="http://www.reddit.com/user/LeszekSwirski"&gt;LeszekSwirski&lt;/a&gt; for
this awesome tip.)&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;** NOTE ** &lt;span class="classifier-delimiter"&gt;:&lt;/span&gt; &lt;span class="classifier"&gt;Elghinn mentions in the comments that there are caveats&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;to using this decorator.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;If you look at the way decorators above, there is a lost of repeating
going on there as well, in the declaring and returning of a wrapper.&lt;/p&gt;
&lt;p&gt;you can install the python egg 'decorator', which includes a 'decorator'
decorator that provides the decorator boilerplate for you!&lt;/p&gt;
&lt;p&gt;With easy_install:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ sudo easy_install decorator
&lt;/pre&gt;
&lt;p&gt;Or Pip:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ pip install decorator
&lt;/pre&gt;
&lt;p&gt;Then you can simply write:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;decorator&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;decorator&lt;/span&gt;

&lt;span class="nd"&gt;@decorator&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post_only&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; Ensures a method is post only &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;this method only accepts posts!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What's even more awesome about this decorator, is the fact that it
preserves the return values of __name__ and __doc__, so it wraps in
the functionality functools.wraps performs as well!&lt;/p&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="python"></category></entry><entry><title>The inevitable cons of overloading methods</title><link href="the-inevitable-cons-of-overloading-methods.html" rel="alternate"></link><published>2013-05-12T00:00:00+02:00</published><updated>2013-05-12T00:00:00+02:00</updated><author><name>Yusuke Tsutsumi</name></author><id>tag:None,2013-05-12:the-inevitable-cons-of-overloading-methods.html</id><summary type="html">&lt;div class="section" id="day-1"&gt;
&lt;h2&gt;Day 1&lt;/h2&gt;
&lt;p&gt;You see a simple method that draws a triangle. Currently, it takes in
a specific size:&lt;/p&gt;
&lt;blockquote&gt;
drawTriangle(float size);&lt;/blockquote&gt;
&lt;p&gt;You've been told that in the past, we only needed one kind of
triangle. Now we need to be able to choose the color. No biggie, we
have the …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="day-1"&gt;
&lt;h2&gt;Day 1&lt;/h2&gt;
&lt;p&gt;You see a simple method that draws a triangle. Currently, it takes in
a specific size:&lt;/p&gt;
&lt;blockquote&gt;
drawTriangle(float size);&lt;/blockquote&gt;
&lt;p&gt;You've been told that in the past, we only needed one kind of
triangle. Now we need to be able to choose the color. No biggie, we
have the power to overload methods in our language! We'll simply add
an extra parameter, and have the method overload:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;drawTriangle(float size) { drawTriangle(size, WHITE) }&lt;/p&gt;
&lt;p&gt;drawTriangle(float size, Color color);&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="day-14"&gt;
&lt;h2&gt;Day 14&lt;/h2&gt;
&lt;p&gt;Now we have a new problem. We need a triangle that changes from one
color to another, a gradient. You think to yourself: I can either
overload the method, or I can make a new method. Which is better?&lt;/p&gt;
&lt;p&gt;I can create a new method, but it seems like this still fits in the
'drawTriangle' category. It's fine. Let's add it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;drawTriangle(float size) { drawTriangle(size, WHITE) }&lt;/p&gt;
&lt;p&gt;drawTriangle(float size, Color color);&lt;/p&gt;
&lt;p&gt;drawTriangle(float size, Color firstColor, Color secondColor);&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Future developers will understand for sure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="day-35"&gt;
&lt;h2&gt;Day 35&lt;/h2&gt;
&lt;p&gt;So I've overridden this method a few more times. I've had to add
rotation speed, and a size increase rate. Sometimes I need both, so
I've added a few more methods to handle the combinations I need. I've
also added method to pass all the options just in case.&lt;/p&gt;
&lt;p&gt;Darn! The method signatures will collide if I add the size increase
rate, because it clashes with rotationSpeed. I guess I'll have to add
an extra method like color to keep the signatures different. I could
use the full method, but that's a lot of time.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;drawTriangle(float size);&lt;/p&gt;
&lt;p&gt;drawTriangle(float size, float rotationSpeed);&lt;/p&gt;
&lt;p&gt;drawTriangle(float size, Color color);&lt;/p&gt;
&lt;p&gt;drawTriangle(float size, Color color, float increaseRate);&lt;/p&gt;
&lt;p&gt;drawTriangle(float size, float rotationSpeed, float increaseRate);&lt;/p&gt;
&lt;p&gt;drawTriangle(float size, Color firstColor, Color secondColor);&lt;/p&gt;
&lt;p&gt;drawTriangle(float size, float rotationSpeed, Color firstColor, Color secondColor, float increaseRate);&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It's okay, I can keep track of these. It's tricker than I want, but nothing I can't handle.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="day-145"&gt;
&lt;h2&gt;Day 145&lt;/h2&gt;
&lt;p&gt;Okay... It's my first day on the job. The old developer who maintained
this left three months ago. I've been asked to creating a new triangle
drawing application. Luckily this library can already draw these
rectangles. Let me take a look...&lt;/p&gt;
&lt;p&gt;Woah. There's nine methods for drawing a triangle? Which should I use?
Which one is he using in this case? Does this mean every time I see
this method, I'm going to either already be familiar with the specific
overrided version of that method, or dig through the code until I
understand? This is going to be a long day...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Overriding methods works great for those cases where you can keep the
variations to a minimum. When you need arbitrary combinations of
various properties, you're better off either building a new method
that more accurately describes what you're trying to do, or use
getters and setters later on to configure your piece to what you want.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the gradient triangle should have had a separate method, to help alleviate any confusion as to what the second color does.&lt;/li&gt;
&lt;li&gt;rotationSpeed could have been set elsewhere as well. no need to add into the constructor unless every triangle should have it set explicitely.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="theory"></category></entry><entry><title>Increment-Decrement for Emacs</title><link href="increment-decrement-for-emacs.html" rel="alternate"></link><published>2013-04-17T00:00:00+02:00</published><updated>2013-04-17T00:00:00+02:00</updated><author><name>Yusuke Tsutsumi</name></author><id>tag:None,2013-04-17:increment-decrement-for-emacs.html</id><summary type="html">&lt;p&gt;Here's a small increment/decrement function I wrote, because I like how vim has one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; check if string is an integer&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;string-integer-p&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;string-match&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\\`[-+]?[0-9]+\\&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nv"&gt;t&lt;/span&gt;
    &lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;;; Decrement Int&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;decrement&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;Decrement the integer that the cursor is on.&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;x&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;thing-at-point&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;symbol&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;string-integer-p&lt;/span&gt; &lt;span class="nv"&gt;x …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Here's a small increment/decrement function I wrote, because I like how vim has one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; check if string is an integer&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;string-integer-p&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;string-match&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\\`[-+]?[0-9]+\\&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nv"&gt;t&lt;/span&gt;
    &lt;span class="nv"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;;; Decrement Int&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;decrement&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;Decrement the integer that the cursor is on.&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;x&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;thing-at-point&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;symbol&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;string-integer-p&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;x-int&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;string-to-number&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;bds&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;bounds-of-thing-at-point&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;symbol&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;progn&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;delete-region&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;car &lt;/span&gt;&lt;span class="nv"&gt;bds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cdr &lt;/span&gt;&lt;span class="nv"&gt;bds&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;insert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;number-to-string&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="nv"&gt;x-int&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;;; Increment Int&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;increment&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;Increment the integer that the cursor is on.&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;x&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;thing-at-point&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;symbol&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;string-integer-p&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;x-int&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;string-to-number&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;bds&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;bounds-of-thing-at-point&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;symbol&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;progn&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;delete-region&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;car &lt;/span&gt;&lt;span class="nv"&gt;bds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cdr &lt;/span&gt;&lt;span class="nv"&gt;bds&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;insert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;number-to-string&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="nv"&gt;x-int&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content><category term="programming"></category><category term="emacs"></category><category term="el-get"></category></entry><entry><title>Automatic Package Installation for Emacs 24 - Part 2</title><link href="automatic-package-installation-for-emacs-24-part-2.html" rel="alternate"></link><published>2013-03-24T00:00:00+01:00</published><updated>2013-03-24T00:00:00+01:00</updated><author><name>Yusuke Tsutsumi</name></author><id>tag:None,2013-03-24:automatic-package-installation-for-emacs-24-part-2.html</id><summary type="html">&lt;p&gt;&lt;em&gt;EDIT 07/01/2014&lt;/em&gt;: I don't recommend setting up packages like this anymore. I recommend reading
&lt;a class="reference external" href="emacs-from-scratch-part-2-package-management.html"&gt;this post instead&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About a year ago I wrote about &lt;a class="reference external" href="automatic-package-installation-using-elpa-in-emacs-24.html"&gt;installing packages on startup, automatically for Emacs 24&lt;/a&gt;. This used the native ELPA, looked for packages that weren't already installed, and used package-install to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;EDIT 07/01/2014&lt;/em&gt;: I don't recommend setting up packages like this anymore. I recommend reading
&lt;a class="reference external" href="emacs-from-scratch-part-2-package-management.html"&gt;this post instead&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About a year ago I wrote about &lt;a class="reference external" href="automatic-package-installation-using-elpa-in-emacs-24.html"&gt;installing packages on startup, automatically for Emacs 24&lt;/a&gt;. This used the native ELPA, looked for packages that weren't already installed, and used package-install to install them.&lt;/p&gt;
&lt;p&gt;Unfortunately, I realized that this method wasn't nearly as functional as I wanted it to be. I'll save my opinions for later. If you're just looking for a great way to install packages for Emacs, I'll just write it out here.&lt;/p&gt;
&lt;div class="section" id="what-i-do"&gt;
&lt;h2&gt;What I do&lt;/h2&gt;
&lt;p&gt;Here's a baseline example of how to manage your packages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="c1"&gt;;; Check for el-get, install if not exists&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;load-path&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;~/.emacs.d/el-get/el-get&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;el-get&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;url-retrieve&lt;/span&gt;
 &lt;span class="s"&gt;&amp;quot;https://raw.github.com/dimitri/el-get/master/el-get-install.el&amp;quot;&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;goto-char&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;point-max&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;eval-print-last-sexp&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

    &lt;span class="c1"&gt;;; Set up packages&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;el-get-sources&lt;/span&gt;
&lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;:name&lt;/span&gt; &lt;span class="nv"&gt;flymake&lt;/span&gt;
   &lt;span class="nv"&gt;:description&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Continuous syntax checking for Emacs.&amp;quot;&lt;/span&gt;
   &lt;span class="nv"&gt;:type&lt;/span&gt; &lt;span class="nv"&gt;github&lt;/span&gt;
   &lt;span class="nv"&gt;:pkgname&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;illusori/emacs-flymake&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;:name&lt;/span&gt; &lt;span class="nv"&gt;multiple-cursors&lt;/span&gt;
   &lt;span class="nv"&gt;:description&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;An experiment in adding multiple cursors to emacs&amp;quot;&lt;/span&gt;
   &lt;span class="nv"&gt;:type&lt;/span&gt; &lt;span class="nv"&gt;github&lt;/span&gt;
   &lt;span class="nv"&gt;:pkgname&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;magnars/multiple-cursors.el&amp;quot;&lt;/span&gt;
   &lt;span class="nv"&gt;:features&lt;/span&gt; &lt;span class="nv"&gt;multiple-cursors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;:name&lt;/span&gt; &lt;span class="nv"&gt;scala-mode&lt;/span&gt;
   &lt;span class="nv"&gt;:description&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Major mode for editing Scala code.&amp;quot;&lt;/span&gt;
   &lt;span class="nv"&gt;:type&lt;/span&gt; &lt;span class="nv"&gt;git&lt;/span&gt;
   &lt;span class="nv"&gt;:url&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://github.com/scala/scala-dist.git&amp;quot;&lt;/span&gt;
   &lt;span class="nv"&gt;:build&lt;/span&gt; &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;make -C tool-support/src/emacs&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;concat&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ELISP_COMMAND=&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;el-get-emacs&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
   &lt;span class="nv"&gt;:load-path&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tool-support/src/emacs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="nv"&gt;:features&lt;/span&gt; &lt;span class="nv"&gt;scala-mode-auto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;:name&lt;/span&gt; &lt;span class="nv"&gt;rainbow-mode&lt;/span&gt; &lt;span class="nv"&gt;:type&lt;/span&gt; &lt;span class="nv"&gt;elpa&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;:name&lt;/span&gt; &lt;span class="nv"&gt;js2-mode&lt;/span&gt;
   &lt;span class="nv"&gt;:website&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://github.com/mooz/js2-mode#readme&amp;quot;&lt;/span&gt;
   &lt;span class="nv"&gt;:description&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;An improved JavaScript editing mode&amp;quot;&lt;/span&gt;
   &lt;span class="nv"&gt;:type&lt;/span&gt; &lt;span class="nv"&gt;github&lt;/span&gt;
   &lt;span class="nv"&gt;:pkgname&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mooz/js2-mode&amp;quot;&lt;/span&gt;
   &lt;span class="nv"&gt;:prepare&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;autoload&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;js2-mode&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;js2-mode&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

    &lt;span class="c1"&gt;;; install any packages not installed yet&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;mapc&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;plist-get&lt;/span&gt; &lt;span class="nv"&gt;f&lt;/span&gt; &lt;span class="nv"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;not &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;require&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="nv"&gt;nil&lt;/span&gt; &lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;el-get-install&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
    &lt;span class="nv"&gt;el-get-sources&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What does this do? Well:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Checks for installation of el-get, my package manager of choice, and installs it if one doesn't exist&lt;/li&gt;
&lt;li&gt;Sets a list of package definitions into el-get-sources&lt;/li&gt;
&lt;li&gt;Looks through the whole list of el-get-sources, ad runs el-get-install if the package isn't installed (verified via the 'require' command)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If I find a new package I want, whether it's on github, elpa, or
otherwise, I first check if the package info already exists in
&lt;a class="reference external" href="https://github.com/dimitri/el-get/tree/master/recipes"&gt;el-get's huge list of recipes&lt;/a&gt;, or I write
it up myself. As an example, install an elpa package is as simple as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;:name&lt;/span&gt; &lt;span class="nv"&gt;rainbow-mode&lt;/span&gt; &lt;span class="nv"&gt;:type&lt;/span&gt; &lt;span class="nv"&gt;elpa&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;How about a git repository? In that case it's just:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;:name&lt;/span&gt; &lt;span class="nv"&gt;scala-mode&lt;/span&gt; &lt;span class="nv"&gt;:type&lt;/span&gt; &lt;span class="nv"&gt;git&lt;/span&gt; &lt;span class="nv"&gt;:url&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://github.com/scala/scala-dist.git&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or a shortened github version:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;:name&lt;/span&gt; &lt;span class="nv"&gt;scala-mode&lt;/span&gt; &lt;span class="nv"&gt;:type&lt;/span&gt; &lt;span class="nv"&gt;github&lt;/span&gt; &lt;span class="nv"&gt;:pkgname&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;scala/scala-dist.git&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Also in my system, I put my el-get-sources list into a different file and load it, it makes it way easier to manager than a huge chunk of data halfway through a bunch of code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;;; e.g. put the &amp;quot;el-get-sources&amp;quot; list in .emacs.elgetpackages&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;load &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;~/.emacs.d/.emacs.elgetpackages&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Try it out for yourself! Watch as all of your favorite packages get installed on startup. Note that the install order might be different, as the cloning and installing process is performed asynchronously.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-i-do-it-this-way"&gt;
&lt;h2&gt;Why I do it this way&lt;/h2&gt;
&lt;p&gt;So why do I el-get now instead of package.el and ELPA?&lt;/p&gt;
&lt;p&gt;When I started using ELPA. I was really satisfied. It was so easy to find and discover new packages, and installing them was a snap! However, with the rate at which emacs plugin development occurs, the packages are outdated quickly. In the world of github, and an incredibly active community, I found that my main issue was being able to install the most recent version of packages out there, and keeping them up to date.&lt;/p&gt;
&lt;p&gt;ELPA is only as up to date as the package developers make it, and depending on the library, that's not a lot. In addition, there are quite a lot of libraries out there which haven't made it yet into a package.el repository.&lt;/p&gt;
&lt;p&gt;So why wait? When adding a new package to your distributable emacs configuration is one line away, you don't have to.&lt;/p&gt;
&lt;p&gt;el-get provides basically everything I'm looking for:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a specific 'github' type for github repos. An absolute necessity, a lot of really good emacs extensions are on github.&lt;/li&gt;
&lt;li&gt;generic git cloning. Great for the other libraries stores elsewhere&lt;/li&gt;
&lt;li&gt;it even hooks into elpa for other packages!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although I rarely use package.el or ELPA anymore. If I can find the github equivalent, I'll use that instead. You'd be surprised how outdated existing libraries become.&lt;/p&gt;
&lt;p&gt;This also provides the flexibility of allowing me to use my own version of various libraries, if need be. I no longer have to wait for pull requests to enjoy my fixes: I can just use my own repository, and switch back when the main repository catches up.&lt;/p&gt;
&lt;p&gt;So if you want to stay on the cutting-edge, and not worry about the hassle of installing every single package you use on every machine you have, give this a shot.&lt;/p&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="emacs"></category><category term="el-get"></category></entry><entry><title>Some resources for XACT</title><link href="some-resources-for-xact.html" rel="alternate"></link><published>2013-02-06T06:16:00+01:00</published><updated>2013-02-06T06:16:00+01:00</updated><author><name>Toumorokoshi</name></author><id>tag:None,2013-02-06:some-resources-for-xact.html</id><summary type="html">&lt;p&gt;XACT is a audio application used to manage audio for games using the XNA
framework. Here are some resources to help you get started.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.microsoft.com/en-us/download/details.aspx?id=23714"&gt;Installing XNA 4.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;you may need Visual Studio 2010 express to use it:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.microsoft.com/visualstudio/eng/downloads#d-2010-express"&gt;Visual Studio 2010 install links&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Make sure to install the C# express …&lt;/p&gt;</summary><content type="html">&lt;p&gt;XACT is a audio application used to manage audio for games using the XNA
framework. Here are some resources to help you get started.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.microsoft.com/en-us/download/details.aspx?id=23714"&gt;Installing XNA 4.0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;you may need Visual Studio 2010 express to use it:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.microsoft.com/visualstudio/eng/downloads#d-2010-express"&gt;Visual Studio 2010 install links&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Make sure to install the C# express version.&lt;/p&gt;
&lt;p&gt;After that, try following &lt;a class="reference external" href="http://msdn.microsoft.com/en-us/library/bb203895(v=xnagamestudio.20).aspx"&gt;this tutorial&lt;/a&gt; to build XACT projects.&lt;/p&gt;
&lt;/p&gt;</content><category term="programming"></category><category term="Visual Studio"></category><category term="XACT"></category><category term="XNA"></category></entry><entry><title>Installing Paint.net 3.5 and testing sprite animations</title><link href="installing-paintnet-35-and-testing-sprite-animations.html" rel="alternate"></link><published>2013-01-25T08:16:00+01:00</published><updated>2013-01-25T08:16:00+01:00</updated><author><name>Toumorokoshi</name></author><id>tag:None,2013-01-25:installing-paintnet-35-and-testing-sprite-animations.html</id><summary type="html">&lt;p&gt;After doing some searching online, it looks like paint.net is a common
tool people use to create and animate sprites. Here's a small tutorial
on how to get some basic sprite sheet testing running.&lt;/p&gt;
&lt;div class="section" id="installing-paint-net"&gt;
&lt;h2&gt;Installing paint.net&lt;/h2&gt;
&lt;p&gt;To install it, simply go to&amp;nbsp;&lt;a class="reference external" href="http://www.getpaint.net/"&gt;http://www.getpaint.net/&lt;/a&gt;&amp;nbsp;(be careful …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;After doing some searching online, it looks like paint.net is a common
tool people use to create and animate sprites. Here's a small tutorial
on how to get some basic sprite sheet testing running.&lt;/p&gt;
&lt;div class="section" id="installing-paint-net"&gt;
&lt;h2&gt;Installing paint.net&lt;/h2&gt;
&lt;p&gt;To install it, simply go to&amp;nbsp;&lt;a class="reference external" href="http://www.getpaint.net/"&gt;http://www.getpaint.net/&lt;/a&gt;&amp;nbsp;(be careful about
others sites you go to, I end up at a couple of malware sites before I
arrived at the proper one).&lt;/p&gt;
&lt;p&gt;The direct download URL
is&amp;nbsp;&lt;a class="reference external" href="http://www.dotpdn.com/files/Paint.NET.3.5.10.Install.zip"&gt;http://www.dotpdn.com/files/Paint.NET.3.5.10.Install.zip&lt;/a&gt;. If that
doesn't exist, try to navigate to getpaint.net and click download, and
then &amp;quot;download paint.net 3.5&amp;quot;. Be careful! There's a lot of adword links
that look like download pages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="downloading-sprite-animation-plugins"&gt;
&lt;h2&gt;Downloading sprite animation plugins&lt;/h2&gt;
&lt;p&gt;Next, you need to download the plugin! There's a couple of sprite sheet
plugins out there. I chose the spritesheet animation plugin:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://forums.getpaint.net/index.php?/topic/14848-spritesheet-animation-plugin/"&gt;Spritesheet animation plugin&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Just download the &amp;quot;&lt;a class="reference external" href="http://forums.getpaint.net/index.php?app=core&amp;amp;module=attach&amp;amp;section=attach&amp;amp;attach_id=3006"&gt;PDNSpriteSheetAnimation.zip&lt;/a&gt;&amp;quot;, which will contain
a dll file. Drag and drop that into C:\Program
Files\Paint.Net\Effects. C: is of course,&amp;nbsp;interchangeable&amp;nbsp;with
whatever drive you installed paint.net on.&lt;/p&gt;
&lt;p&gt;After you've installed the plugin, restart paint.net. It is now
available via:&lt;/p&gt;
&lt;p&gt;Effects &amp;gt; Animations &amp;gt; SpriteSheetAnim :&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://toumorokoshi.files.wordpress.com/2013/01/animationexample.png"&gt;&lt;img alt="Image" src="http://toumorokoshi.files.wordpress.com/2013/01/animationexample.png?w=710" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And there you go! The plugin opens up and you can test various
animations with it.&lt;/p&gt;
&lt;p&gt;Credit for the sprite sheet in the picture goes to &lt;a class="reference external" href="http://10firstgames.wordpress.com/2012/02/25/hd-sprite-sheet/"&gt;10firstgame's
wordpress blog&lt;/a&gt;.&lt;/p&gt;
&lt;/p&gt;&lt;/div&gt;
</content><category term="general"></category><category term="animations"></category><category term="paint.net"></category><category term="sprites"></category></entry><entry><title>Removing Headers from YUI IO request</title><link href="removing-headers-from-yui-io-request.html" rel="alternate"></link><published>2012-11-26T22:28:00+01:00</published><updated>2012-11-26T22:28:00+01:00</updated><author><name>Toumorokoshi</name></author><id>tag:None,2012-11-26:removing-headers-from-yui-io-request.html</id><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://yuilibrary.com/projects/yui3/ticket/2529324"&gt;http://yuilibrary.com/projects/yui3/ticket/2529324&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You just add a &amp;quot;headers&amp;quot;: { &amp;quot;YOUR_PARAM&amp;quot;: &amp;quot;disabled&amp;quot;} in the request.&lt;/p&gt;
</content><category term="programming"></category><category term="YUI"></category></entry><entry><title>Adding JSONP to turbogears</title><link href="adding-jsonp-to-turbogears.html" rel="alternate"></link><published>2012-11-09T08:34:00+01:00</published><updated>2012-11-09T08:34:00+01:00</updated><author><name>Toumorokoshi</name></author><id>tag:None,2012-11-09:adding-jsonp-to-turbogears.html</id><summary type="html">&lt;p&gt;&lt;pre class="literal-block"&gt;
from tg import json_encode, responsefrom tg.render import _get_tg_varsdef render_jsonp(template_name, template_vars, **kwargs):callback = template_name or kwargs.pop('callback', None) or 'callback'for key in _get_tg_vars():del template_vars[key]response.headers['Content-Type'] = 'text/javascript'return '%s(%s)' % (template_name, json_encode(template_vars))from myapp.config.app_cfg import base_configbase_config.render_functions['jsonp'] = render_jsonpbase_config.mimetype_lookup = {'.jsonp': 'text …&lt;/pre&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;pre class="literal-block"&gt;
from tg import json_encode, responsefrom tg.render import _get_tg_varsdef render_jsonp(template_name, template_vars, **kwargs):callback = template_name or kwargs.pop('callback', None) or 'callback'for key in _get_tg_vars():del template_vars[key]response.headers['Content-Type'] = 'text/javascript'return '%s(%s)' % (template_name, json_encode(template_vars))from myapp.config.app_cfg import base_configbase_config.render_functions['jsonp'] = render_jsonpbase_config.mimetype_lookup = {'.jsonp': 'text/javascript'}
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;courtesy of Pederson:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/TurboGears/tg2/issues/2"&gt;https://github.com/TurboGears/tg2/issues/2&lt;/a&gt;&lt;/p&gt;
</content><category term="programming"></category></entry><entry><title>Move over bash: Python is my language for setup scripts now.</title><link href="move-over-bash-python-is-my-language-for-setup-scripts-now.html" rel="alternate"></link><published>2012-09-08T21:34:00+02:00</published><updated>2012-09-08T21:34:00+02:00</updated><author><name>Toumorokoshi</name></author><id>tag:None,2012-09-08:move-over-bash-python-is-my-language-for-setup-scripts-now.html</id><summary type="html">&lt;p&gt;I know when people discuss using programming languages, there's two main
schools of thought:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use the same language for as much of your stack as possible&lt;/li&gt;
&lt;li&gt;Use the language that's most appropriate for each part of the stack
as much of possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;p&gt;Clearly, there's very strong advantages to both. Using …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I know when people discuss using programming languages, there's two main
schools of thought:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use the same language for as much of your stack as possible&lt;/li&gt;
&lt;li&gt;Use the language that's most appropriate for each part of the stack
as much of possible.&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;p&gt;Clearly, there's very strong advantages to both. Using the same language
for everything provides you with a common language then anyone involved
in your project can work on, they can dive into other parts fairly
easily, and it's very easy to hire developers who have experience in one
language, as at the end of the day, I think all developer's end up using
one predominantly more than the rest.&lt;/p&gt;
&lt;p&gt;Using the proper language for each task, however, has it's merits as
well. These function-specific languages make these parts a lot easier to
write, and it's usually much faster too. A good example is trying to
write a key-value store that can communicate through the web: Doing so
in python gives you way too more function than you need. You need a
low-level language that can handle memory management, and do so quickly.
That's why &lt;a class="reference external" href="http://http://memcached.org/"&gt;memcached&lt;/a&gt;is written in c++.&lt;/p&gt;
&lt;p&gt;When it came to deployment and bootstrapping, I, like most unix-y
people, thought bash. Why would I think otherwise? after all, every
single bootstrap script I've ever seen was in bash, it has great
integration with the shell, and that's all you really need. And it truly
was all I ever needed... until I needed more.&lt;/p&gt;
&lt;p&gt;Now, I'm definitely no expert in bash, but every time I start to write a
bash script, I truly remember how painful working with bash really is.
Errors I've never seen before pop up at least a couple times every time
I touch it, strange syntax issues, the methodology in which arguments
are passed, the lack of libraries replaced by&amp;nbsp;executables&amp;nbsp;that may or
may not exist on the system. After a half an hour of work on the script,
I had an idea:&lt;/p&gt;
&lt;p&gt;Why not Python?&lt;/p&gt;
&lt;p&gt;And yes, why not Python? My whole team works with Python for pretty much
everything else. People outside my team would just consume my script and
would come to me if something was wrong anyway. So I started to write it
in Python. And I accomplished what I wanted to do (perform multiple
installations of Maven), within a half hour. Something I was only barely
able to touch with bash in an hour.&lt;/p&gt;
&lt;p&gt;Once again, I'm not a bash expert, so I'm sure that play's a huge part
in my opinion here. But I think it's interesting that once I broke out
of my boxed-in thinking of using bash for all bootstrapping and python
for only high-level services an tools, that the whole process became
that much easier.&lt;/p&gt;
&lt;p&gt;And indeed, Python is actually a great language for writing setup
scripts. Here's some examples:&lt;/p&gt;
&lt;div class="section" id="extracting-tar-gz-files-without-touching-the-file-system"&gt;
&lt;h2&gt;Extracting tar.gz files without touching the file system.&lt;/h2&gt;
&lt;/p&gt;&lt;p&gt;With python, you can download a file in memory, and extract it write
there. no more wasted I/O!&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
import gzip, tarfilefrom StringIO import StringIOurl = MY_TARextractpath = MY_EXTRACT_PATHgz = gzip.GzipFile(fileobj=StringIO(urllib.urlopen(url).read()))tf = tarfile.TarFile(fileobj=gz)tf.extractall(path=extractpath)
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;div class="section" id="symlinking-directory-management-and-more"&gt;
&lt;h2&gt;Symlinking, directory management, and more!&lt;/h2&gt;
&lt;/p&gt;&lt;p&gt;You can use os.symlink on unix environments, and manage directories with
the &amp;quot;sh&amp;quot; module. Moving directories from one place to another? then
symlinking the executable into bin? no problem!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="optparse-a-setup-scripter-s-best-friend"&gt;
&lt;h2&gt;Optparse: A setup scripter's best friend&lt;/h2&gt;
&lt;/p&gt;&lt;p&gt;&lt;a class="reference external" href="http://docs.python.org/library/optparse.html"&gt;http://docs.python.org/library/optparse.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Optparse provides you with the typical unix-like option parsing. Makes
your setup feel just like a bash script, and no one would ever know!&lt;/p&gt;
&lt;p&gt;These are on top of what python provides you: dicts for key-value stores
and representing complex metadata. Pretty much every Linux distribution
has Python 2.6 or higher built in. Mac OS X now has 2.7. It's pretty
much as ubiquitious as bash, and way less hassle!&lt;/p&gt;
&lt;p&gt;So, if you have some project and you're thinking about using bash. Just
think about it: would it be easier in Python?&lt;/p&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="Bash"></category><category term="python"></category></entry><entry><title>My Emacs Environment</title><link href="my-emacs-environment.html" rel="alternate"></link><published>2012-08-16T09:28:00+02:00</published><updated>2012-08-16T09:28:00+02:00</updated><author><name>Toumorokoshi</name></author><id>tag:None,2012-08-16:my-emacs-environment.html</id><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.youtube.com/watch?v=z0PET0Qq8CU&amp;amp;feature=plcp"&gt;http://www.youtube.com/watch?v=z0PET0Qq8CU&amp;amp;feature=plcp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here's a video of my Emacs environment, and some ways I use it with
Python.&lt;/p&gt;
&lt;/p&gt;</content><category term="programming"></category></entry><entry><title>fine, PyDev is better than Emacs for Python. I'm still using Emacs though.</title><link href="fine-pydev-is-better-than-emacs-for-python-im-still-using-emacs-though.html" rel="alternate"></link><published>2012-08-13T09:09:00+02:00</published><updated>2012-08-13T09:09:00+02:00</updated><author><name>Toumorokoshi</name></author><id>tag:None,2012-08-13:fine-pydev-is-better-than-emacs-for-python-im-still-using-emacs-though.html</id><summary type="html">&lt;p&gt;Being part of a company that uses Python, I have a friend who loves
PyDev, an eclipse plugin that basically adapts the functionality of the
eclipse IDE to Python. Even though I'm still an Emacs greenhorn, I swear
my devotion to the text editor wouldn't waver.&lt;/p&gt;
&lt;p&gt;Until I saw what …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Being part of a company that uses Python, I have a friend who loves
PyDev, an eclipse plugin that basically adapts the functionality of the
eclipse IDE to Python. Even though I'm still an Emacs greenhorn, I swear
my devotion to the text editor wouldn't waver.&lt;/p&gt;
&lt;p&gt;Until I saw what PyDev is capable of.&lt;/p&gt;
&lt;p&gt;It's actually quite amazing: PyDev basically provides practically every
useful eclipse feature for python. The list includes, but is not limited
to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;smart code completion with documentation&lt;/li&gt;
&lt;li&gt;refactoring&lt;/li&gt;
&lt;li&gt;code coverage&lt;/li&gt;
&lt;li&gt;unit testing&lt;/li&gt;
&lt;li&gt;automatic generation of methods and classes&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;p&gt;Seriously, cheers to the devs who make this plugin: It's fantastic. It's
definitely a tool that I would use completely if all I did was code
Python.&lt;/p&gt;
&lt;p&gt;But then I thought about why I was so vehement about switching from
Emacs, even when I was faced with a simple, easy to use tool that does
all the heavy lifting for me. And I realized it's because I don't just
code Python.&lt;/p&gt;
&lt;p&gt;In any given work day, here's my list of things I do:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;write services and tools in python&lt;/li&gt;
&lt;li&gt;manage configuration files in XML and YAML&lt;/li&gt;
&lt;li&gt;test deploys and verify using a bash shell or ssh&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;p&gt;So all in all, authoring python code is not the only thing I do. It's
arguably not the major thing I do with my days either. What I need is a
text editor that is complex enough to assist me with modifying files
with complex regular expressions and easy file navigation, but also
versatile enough to do quick file discovery, and run commands in a
shell. Emacs can do all that. And if something else pops up in the
future, maybe Emacs isn't the best solution, but I know it'll have
something that'll do the job.&amp;nbsp;The advantage of having a single set of
hotkeys, a single environment do all of my daily task from, outweighs
the advantage for me of using a specified IDE. And if some day I switch
languages, Emacs will most likely contain a suite of tools, that I can
just plug and play, or I can write my own with a fully-featured
programming language.&lt;/p&gt;
&lt;p&gt;And I think, ultimately, this is why anyone really uses Emacs. It's not
only the problems your facing now. It's knowing that you're investing
time into an environment that's flexible enough to face your diverse
challenges in the future.&lt;/p&gt;
</content><category term="programming"></category><category term="Eclipse"></category><category term="Emacs"></category><category term="PyDev"></category></entry><entry><title>Slimy: another html5 slideshow</title><link href="slimy-another-html5-slideshow.html" rel="alternate"></link><published>2012-05-08T20:45:00+02:00</published><updated>2012-05-08T20:45:00+02:00</updated><author><name>Toumorokoshi</name></author><id>tag:None,2012-05-08:slimy-another-html5-slideshow.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://code.google.com/p/slimy/"&gt;&lt;img alt="image0" src="https://toumorokoshi.files.wordpress.com/2012/05/slimy.png" /&gt;&lt;/a&gt;After seeing a coworker's presentation completely done using
html5 and javascript, I really realized how much of a platform that
html5 can be. Effectively, it's a ubiquitous platform by which any
operating system can run code, with very little prior setup necessary. I
really liked the concept of an html5 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://code.google.com/p/slimy/"&gt;&lt;img alt="image0" src="https://toumorokoshi.files.wordpress.com/2012/05/slimy.png" /&gt;&lt;/a&gt;After seeing a coworker's presentation completely done using
html5 and javascript, I really realized how much of a platform that
html5 can be. Effectively, it's a ubiquitous platform by which any
operating system can run code, with very little prior setup necessary. I
really liked the concept of an html5 slideshow, so I looked around for
one that suited my needs. There wasn't one, so I began to write my own.
I present Slimy:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://code.google.com/p/slimy/"&gt;http://code.google.com/p/slimy/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can see an example here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://slimy.googlecode.com/git/example.html"&gt;http://slimy.googlecode.com/git/example.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I explored html5 slideshows quite a bit, and I had two main issues that
got me interested in writing my own:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Every html5 slideshow I saw had online dependencies. I understand
that the web is everywhere, but I still didn't want to rule out
situations where internet access is not readily available. Simply
saving the slideshow locally with a browser was a viable option, but
I preferred to also clutter my&amp;nbsp;file system&amp;nbsp;as little as possible.&lt;/li&gt;
&lt;li&gt;The markup wasn't always straightforward. I was recommended both the
google html slideshow and rubyforge's &lt;a class="reference external" href="http://slideshow.rubyforge.org/"&gt;slideshow&lt;/a&gt;, but I didn't like
the idea of having to learn a different proprietary markup,
especially when html is about as simple as markup gets.&lt;/li&gt;
&lt;li&gt;The slideshows included little fixes to make up for css3 technologies
that weren't supported. I didn't like this. I was looking for
something that doesn't sacrifice simplicity to try to make the code
work for less standard-compliant or outdated browsers. My system
works for the newest browsers, and I don't imagine that changing.&lt;/li&gt;
&lt;/ol&gt;
&lt;/p&gt;&lt;p&gt;Slimy focus's on encapsulation of the slideshow, and also functionality.
My main goal is to make it as functional as&amp;nbsp;Google's html5&amp;nbsp;slideshow,
but much simpler and elegant. I aim to keep it that way by including as
few proprietary functionality as possible, instead relying on css3 and
javascript such as css transitions. I do require jquery, but I think it
makes the functional code significantly more elegant and readable.&lt;/p&gt;
&lt;p&gt;I would love to see some feedback, and I am willing to add more
functionality as requests come in. So please, give slimy a shot! I have
a feeling you'll rarely use Powerpoint or any other slideshow
application again.&lt;/p&gt;
</content><category term="programming"></category><category term="slimy html5"></category></entry><entry><title>Passing perforce batch files</title><link href="passing-perforce-batch-files.html" rel="alternate"></link><published>2012-03-08T01:17:00+01:00</published><updated>2012-03-08T01:17:00+01:00</updated><author><name>Toumorokoshi</name></author><id>tag:None,2012-03-08:passing-perforce-batch-files.html</id><content type="html">&lt;p&gt;My coworker showed this to me today: if you want to use a perforce
command from the command line, and pass it a batch of filenames from a
command (such as find or grep), simply use:&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
p4 COMMAND ${ENTER_COMMAND_HERE}
&lt;/pre&gt;
&lt;/p&gt;</content><category term="programming"></category></entry><entry><title>Automatic Package installation using ELPA in Emacs 24</title><link href="automatic-package-installation-using-elpa-in-emacs-24.html" rel="alternate"></link><published>2012-02-16T23:59:00+01:00</published><updated>2012-02-16T23:59:00+01:00</updated><author><name>Toumorokoshi</name></author><id>tag:None,2012-02-16:automatic-package-installation-using-elpa-in-emacs-24.html</id><summary type="html">&lt;p&gt;Emacs 24 includes many improvements over 23, but there is one particular
addition that makes me run around and go crazy with joy: a built-in
package management system, &lt;a class="reference external" href="http://tromey.com/elpa/"&gt;ELPA&lt;/a&gt; (Emacs 24 is still in development,
&lt;a class="reference external" href="http://batsov.com/articles/2011/10/09/getting-started-with-emacs-24/"&gt;Bozhidar Batsov&lt;/a&gt;&amp;nbsp;has a good guide on how to get it set up). I switched …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Emacs 24 includes many improvements over 23, but there is one particular
addition that makes me run around and go crazy with joy: a built-in
package management system, &lt;a class="reference external" href="http://tromey.com/elpa/"&gt;ELPA&lt;/a&gt; (Emacs 24 is still in development,
&lt;a class="reference external" href="http://batsov.com/articles/2011/10/09/getting-started-with-emacs-24/"&gt;Bozhidar Batsov&lt;/a&gt;&amp;nbsp;has a good guide on how to get it set up). I switched
over to Emacs almost a year ago, searching for something that would give
me an IDE with the following attributes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Functionality (context-based completion, on the fly syntax checking)&lt;/li&gt;
&lt;li&gt;Customization&amp;nbsp;(key bindings, easily extensible)&lt;/li&gt;
&lt;li&gt;Portability (minimal setup on new environments)&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;p&gt;There are a lot of nice extensions that do well for the first two.
However, Portability was always tricky. To get some of the more power
coding features in Emacs, one needed to install large packages, and
there was no way to move these around short of zipping the whole thing
up or finding and installing all these packages again.&lt;/p&gt;
&lt;p&gt;ELPA completes the trifecta I have been looking for. It was now easy to
have a list of packages to install. I have a GitHub repository to
contain all of my .emacs setup, so I can just clone a repository with
every new environment. To make the setup completely automatic, I needed
a method to automatically install packages that did not exist. After a
little research, I was able to figure it out:&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
;; Packages to install first (check if emacs is 24 or higher)(if (&amp;gt;= emacs-major-version 24)  (progn  ;; Add a larger package list    (setq package-archives '((&amp;quot;ELPA&amp;quot; . &amp;quot;http://tromey.com/elpa/&amp;quot;)      (&amp;quot;gnu&amp;quot; . &amp;quot;http://elpa.gnu.org/packages/&amp;quot;)      (&amp;quot;marmalade&amp;quot; . &amp;quot;http://marmalade-repo.org/packages/&amp;quot;)))       (package-refresh-contents)       ;; Install flymake mode if it doesn't exist, then configure       (when (not (require 'flymake nil t))         (package-install 'flymake))       (global-set-key (kbd &amp;quot;C-; C-f&amp;quot;) 'flymake-mode)       ;; flymake-cursor       (when (not (require 'flymake-cursor nil t))         (package-install 'flymake-cursor))       ;; Install rainbow mode if it doesn't exist, then configure       (when (not (require 'rainbow-mode nil t))         (package-install 'rainbow-mode))       (defun all-css-modes() (css-mode)         (rainbow-mode))       (add-to-list 'auto-mode-alist '(&amp;quot;\.css$&amp;quot; . all-css-modes))    ))
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;&lt;strong&gt;NOTE!!!&lt;/strong&gt; This must be run after ALL OTHER INITIALIZATIONS are run!
You can do this by placing it within a hook:&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
(add-hook 'after-init-hook '(lambda ()    (load &amp;quot;~/.emacs.loadpackages&amp;quot;))) ;; anything within the lambda will run after everything has initialized.
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;As you can see, I've put the above logic into a file called
&amp;quot;.emacs.loadpackages&amp;quot;. This is so I can remove it at easy if I want a
more bare environment.&lt;/p&gt;
&lt;p&gt;I'd like to talk about this a little bit in detail. The first line
ensures that emacs is version 24 or higher:&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
(if (&amp;gt;= emacs-major-version 24) PACKAGE_STUFF_HERE)
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;I then add more repositories to the package manager, gnu and Marmalade
(the base package is a bit limited, in my opinion)&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
(setq package-archives '(    (&amp;quot;ELPA&amp;quot; . &amp;quot;http://tromey.com/elpa/&amp;quot;)    (&amp;quot;gnu&amp;quot; . &amp;quot;http://elpa.gnu.org/packages/&amp;quot;)    (&amp;quot;marmalade&amp;quot; . &amp;quot;http://marmalade-repo.org/packages/&amp;quot;)))
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;This requires a refresh:&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
(package-refresh-contents)
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;And then onto the logic to see if a package exists! You can use require
to see if a package exists, nullifying the error message it usually
return by adding the true statement at the end. For example, this will
return true when the package fly-make cursor is not installed:&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
(not (require 'flymake-cursor nil t))
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;You can then add this to a complete clause:&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
(when (not (require 'flymake-cursor nil t))    (package-install 'flymake-cursor))
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;And you're done!&lt;/p&gt;
&lt;div class="section" id="issues"&gt;
&lt;h2&gt;Issues:&lt;/h2&gt;
&lt;/p&gt;&lt;p&gt;There a couple of things I'm still working on regarding this setup.
Although I haven't gotten any environment breaking errors so far,
there's not a lot of error checking, so I'm sure it can break if things
are not completely right. In addition, this does not work very well for
portable programmers, as Emacs will try to initialize ELPA, resulting in
an exception due to not being able to contact the server.&lt;/p&gt;
&lt;p&gt;Please leave comments and suggestions!&lt;/p&gt;
&lt;/div&gt;
</content><category term="programming"></category></entry><entry><title>Python Pet Peeves</title><link href="python-pet-peeves.html" rel="alternate"></link><published>2012-01-26T19:14:00+01:00</published><updated>2012-01-26T19:14:00+01:00</updated><author><name>Toumorokoshi</name></author><id>tag:None,2012-01-26:python-pet-peeves.html</id><summary type="html">&lt;p&gt;As of this posting, Python has been my main programming language for
over three years. Although I definitely feel that Python is not a good
fit for all programming projects, the speed and efficiency with which I
can code in it has made it my go-to language whenever possible.&lt;/p&gt;
&lt;p&gt;As …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As of this posting, Python has been my main programming language for
over three years. Although I definitely feel that Python is not a good
fit for all programming projects, the speed and efficiency with which I
can code in it has made it my go-to language whenever possible.&lt;/p&gt;
&lt;p&gt;As such, I've seen a lot of Python code, and have had ample time to
think about some of the more nuanced issues regarding coding standards.
Here's a few of my pet peeves, and opinions about them:&lt;/p&gt;
&lt;div class="section" id="from-module-import"&gt;
&lt;h2&gt;from module import *&lt;/h2&gt;
&lt;/p&gt;&lt;p&gt;When I first started python, I used this particular import for a lot of
things. I'm using so many methods from this module, why not just import
the whole thing? It was definitely a pain in the neck fixing those
include issues.&lt;/p&gt;
&lt;p&gt;Well, time in the industry has made me realize the error of my ways.
This isn't just python related, this is related to any programming
language. &lt;strong&gt;Includes/Import should always be as obvious as possible&lt;/strong&gt;.
The correct import methodology, is to do as such:&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
from module import w,x,y,z
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;or, if you want to be even nicer:&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
import modulemodule.x()
&lt;/pre&gt;
 &lt;/p&gt;


But what if we're using ten methods from that module?&lt;p&gt;still gotta do it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What about 20 methods? still gotta do it.&lt;/p&gt;
&lt;p&gt;What about 100 methods?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;don't know how there's 100 methods in a single module, but &lt;em&gt;you still gotta do it&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The reasoning is simple: you're providing a very helpful hint that
future coders can use to debug your code years from now. That hint is :
where the method is actually found.&lt;/p&gt;
&lt;p&gt;While you yourself don't save any time off of doing this, you're saving
hours of development time for future coders, giving them a roadmap to
exactly what your function's stack actually is. Although this can be
given by any IDE that has an understanding of the language and it's
dependencies, one shouldn't assume that this is so. In my experience,
when debugging, I have spent anywhere between a good ten to twenty
minutes looking for methods, especially in python files with twenty
lines of imports. To know exactly where a particular method or module
comes from goes a long way to making one's code maintainable.&lt;/p&gt;
&lt;p&gt;For example, suppose I was a programmer who had to debug, and was able
to pinpoint the bug to a method that had been previously written, called
a_func. The file calling it looks like:&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
from foo import *from bar import *def b_func():    ...    a_func()    ...    return
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;Now if I had no knowledge of the modules foo and bar, I would have to
look through BOTH foo and bar, and see if either of those had the
function a_func. This is only a minor inconvenience if your code only
has two of these imports, but the larger a script gets, and the more
includes it brings in over the years, could result in one having to look
through several files in various locations, to debug one call. Precious
time that could have been saved, had the original code just written:&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
from bar import a_func
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;div class="section" id="use-ternary-s-but-only-where-it-makes-sense"&gt;
&lt;h2&gt;Use ternary's, but only where it makes sense&lt;/h2&gt;
&lt;/p&gt;&lt;p&gt;If you're not familiar with tenary operators, I'd suggest acquainting
yourself now. After all, ternary operators only exist because the
problem they solve is so prevalent in coding everywhere. Specifically,
the strict point where you want a variable to be one of two things. In
Python, ternary operators are represented differently than other
programming languages (the typical ( condition ? do_this_if_true :
do_this_if_false ) operation). Python has:&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
do_this_if_true if condition else do_this_if_false
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;Ternary's in general have several uses. The big one is providing a
default value:&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
var = (value if value else default_value)
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;Basically, in any situation where you have:&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
if this:  just_one_procedure()else: just_one_other_procedure()
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;One should consider using a ternary. You can also nested ternarys,
although I wouldn't suggest doing so for more than one level deep. This
is especially useful when you have a variable assignment with four
different possible outcomes:&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
x = ( (1 if a else 0) if belse (2 if c else 3))
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;To do so with regular if else statements, one would need ten lines of
logic. Ternarys are a lesser known function within Python, and it
belongs in any programmer's set of tools.&lt;/p&gt;
&lt;/div&gt;
</content><category term="programming"></category></entry><entry><title>Search and replace multi-line expressions with SED</title><link href="search-and-replace-multi-line-expressions-with-sed.html" rel="alternate"></link><published>2011-10-26T23:55:00+02:00</published><updated>2011-10-26T23:55:00+02:00</updated><author><name>Toumorokoshi</name></author><id>tag:None,2011-10-26:search-and-replace-multi-line-expressions-with-sed.html</id><summary type="html">&lt;p&gt;Now here's an interesting problem:&lt;/p&gt;
&lt;p&gt;I wanted to do a recursive search and replace in unix, AND I wanted to
do an expression that spans multiple lines. Here's what I came up with:&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
find ./ -type f | xargs sed -E -i -n'1h;1!H;${;g;s/&amp;lt;\/fileSet&amp;gt;.*&amp;lt;fileSet&amp;gt;.*RevisionVersion.*&amp;lt;\/fileSet&amp;gt;.*&amp;lt;\/fileSets …&lt;/pre&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Now here's an interesting problem:&lt;/p&gt;
&lt;p&gt;I wanted to do a recursive search and replace in unix, AND I wanted to
do an expression that spans multiple lines. Here's what I came up with:&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
find ./ -type f | xargs sed -E -i -n'1h;1!H;${;g;s/&amp;lt;\/fileSet&amp;gt;.*&amp;lt;fileSet&amp;gt;.*RevisionVersion.*&amp;lt;\/fileSet&amp;gt;.*&amp;lt;\/fileSets&amp;gt;/&amp;lt;\/fileSet&amp;gt;\n&amp;lt;\/fileSets&amp;gt;/g;p}'
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;There a lot of examples showing you how to do this.&lt;/p&gt;
&lt;p&gt;The first argument lists all files recursively. These are the piped to
sed, which uses an inline search and replace (-i or --in-line), then
using the expression '{}' which is then modified for multi-line
expressions (1h;1!H;).&lt;/p&gt;
</content><category term="programming"></category><category term="sed"></category><category term="unix"></category></entry><entry><title>WebPageTest and IE9</title><link href="webpagetest-and-ie9.html" rel="alternate"></link><published>2011-10-25T00:25:00+02:00</published><updated>2011-10-25T00:25:00+02:00</updated><author><name>Toumorokoshi</name></author><id>tag:None,2011-10-25:webpagetest-and-ie9.html</id><summary type="html">&lt;p&gt;Recently, I tried updating the browser for a WebPageTest instance to
IE9. This proved to have some issues, specifically due to the pop-up
dialogues that IE9 has now to tell you when something suspicious occurs.&lt;/p&gt;
&lt;p&gt;Logging into WPT, I was greeted with an error on an IE9 browser opened
by …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently, I tried updating the browser for a WebPageTest instance to
IE9. This proved to have some issues, specifically due to the pop-up
dialogues that IE9 has now to tell you when something suspicious occurs.&lt;/p&gt;
&lt;p&gt;Logging into WPT, I was greeted with an error on an IE9 browser opened
by URLblast. Something along the lines of:&lt;/p&gt;
&lt;p&gt;&amp;quot;Are you sure you want to use this Non-Verified plugin?&amp;quot;&lt;/p&gt;
&lt;p&gt;Of course, the non-verified plugin was the WebPageTest hook. In order to
get that working, I modified the security settings on my browser to not
care about non-verified plugins:&lt;/p&gt;
&lt;p&gt;Internet Options (clicking on that gear icon in IE9) -&amp;gt; Security -&amp;gt;
Custom Level.&lt;/p&gt;
&lt;p&gt;I modified two settings:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;Download unsigned ActiveX controls&amp;quot; to Enable (not secure)&lt;/li&gt;
&lt;li&gt;&amp;quot;Initialize and script ActiveX controls not marked as safe for
scripting&amp;quot; to Enable (not secure)&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;p&gt;This then brought me to another error, with IE9 complaining about not
using secure settings. Something like:&lt;/p&gt;
&lt;p&gt;&amp;quot;Your current settings are insecure&amp;quot;&lt;/p&gt;
&lt;p&gt;Well, after some searching, there's apparently a policy that you can set
that disables this specific message:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://windowsconnected.com/forums/p/959/3087.aspx#3087"&gt;http://windowsconnected.com/forums/p/959/3087.aspx#3087&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Basically it says:&lt;/p&gt;
&lt;p&gt;Run gpedit.msc (if you type 'gpedit.msc' in the search bar it comes up)&lt;/p&gt;
&lt;p&gt;Then Navigate to Computer Configuration -&amp;gt; Administrative Templates -&amp;gt;
Windows Components -&amp;gt; Internet Exporer, and right click and enable the
&amp;quot;Turn off the Security Settings Check feature&amp;quot; policy.&lt;/p&gt;
&lt;p&gt;This gets rid of the error, but then WebPageTest just seems to freeze on
a run. After some more searching, there was one final step in the
solution. It seems that urlblast has to open the browser using the
user's account. By default, urlblast creates and uses a specific account
on which it opens a browser, not necessarily the user that is running
urlblast. Having the account opening the browser be an administrator did
the trick, and in my situation, I just had it be the same account
running urlblast. This can be done with a change in urlblast.ini:&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
Use Current Account=1
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;And that did it for me!&lt;/p&gt;
</content><category term="programming"></category></entry><entry><title>Getting Python2.5 to Build with sqlite3 and zlib on Ubuntu Natty 2.5</title><link href="getting-python25-to-build-with-sqlite3-and-zlib-on-ubuntu-natty-25.html" rel="alternate"></link><published>2011-09-19T19:21:00+02:00</published><updated>2011-09-19T19:21:00+02:00</updated><author><name>Toumorokoshi</name></author><id>tag:None,2011-09-19:getting-python25-to-build-with-sqlite3-and-zlib-on-ubuntu-natty-25.html</id><summary type="html">&lt;p&gt;I had a really hard time finding this, so I'm posting it here:&lt;/p&gt;
&lt;p&gt;First one must install all the proper packages on Natty (these are the
packages needed for zlib and sqlite in general, not just specifically
for Python):&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
sudo apt-get install zlibc zlib1g zlib1g-devsudo apt-get install sqlite3-dev
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;Then one …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I had a really hard time finding this, so I'm posting it here:&lt;/p&gt;
&lt;p&gt;First one must install all the proper packages on Natty (these are the
packages needed for zlib and sqlite in general, not just specifically
for Python):&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
sudo apt-get install zlibc zlib1g zlib1g-devsudo apt-get install sqlite3-dev
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;Then one must add an LDFlag to the new lib directories (apparently Natty
has a new directory for X86_64 lib files):&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
after the ./configure open your Makefile and find the line withLDFLAGS =edit to LDFLAGS = -L/usr/lib//x86_64-linux-gnuand make
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;Credit for the above snippet goes to Awin Abi and source is below:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://groups.google.com/group/google-appengine/browse_thread/thread/a8bd0a71270a3ce6"&gt;http://groups.google.com/group/google-appengine/browse_thread/thread/a8bd0a71270a3ce6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Basically, setting up Python2.5 ( and presumably any version of Python)
properly involves downloading the proper package libraries , then
building Python2.5 with those packages. In order to do this, the LDFlags
variable must have the new library location (the
/usr/lib/x86-64-linux-gnu) for Natty and 64-bit processors added.&lt;/p&gt;
&lt;p&gt;I have not tried this on a 32-bit machine. This may not be required
then, or you may need to point the flag to load the proper directory.&lt;/p&gt;
</content><category term="programming"></category><category term="Python2.5"></category><category term="sqlite3"></category><category term="Ubuntu"></category><category term="zlib"></category></entry><entry><title>My IDE in Emacs (mainly for Python)</title><link href="my-ide-in-emacs-mainly-for-python.html" rel="alternate"></link><published>2011-08-23T00:26:00+02:00</published><updated>2011-08-23T00:26:00+02:00</updated><author><name>Toumorokoshi</name></author><id>tag:None,2011-08-23:my-ide-in-emacs-mainly-for-python.html</id><summary type="html">&lt;p&gt;I'm writing this article up to mainly keep track of the current state of
my IDE in Emacs, how to set one up, and to keep my to-do list.&lt;/p&gt;
&lt;div class="section" id="implemented-features"&gt;
&lt;h2&gt;Implemented Features&lt;/h2&gt;
&lt;/p&gt;&lt;div class="section" id="default-emacs-library-includes"&gt;
&lt;h3&gt;Default Emacs Library Includes&lt;/h3&gt;
&lt;/p&gt;&lt;p&gt;I use the following from the library that comes with Emacs (as of
version 23 …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I'm writing this article up to mainly keep track of the current state of
my IDE in Emacs, how to set one up, and to keep my to-do list.&lt;/p&gt;
&lt;div class="section" id="implemented-features"&gt;
&lt;h2&gt;Implemented Features&lt;/h2&gt;
&lt;/p&gt;&lt;div class="section" id="default-emacs-library-includes"&gt;
&lt;h3&gt;Default Emacs Library Includes&lt;/h3&gt;
&lt;/p&gt;&lt;p&gt;I use the following from the library that comes with Emacs (as of
version 23)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Viper-mode (viper-mode 3, though I'm sure 5 would be good too)&lt;/li&gt;
&lt;li&gt;Windmove (through keybindings, for moving around windows easier)&lt;/li&gt;
&lt;li&gt;hideshow (for code folding)&lt;/li&gt;
&lt;li&gt;ibuffer (for listing on buffers when buffer switching)&lt;/li&gt;
&lt;li&gt;ido (for listing of file in a directory in the minibuffer&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;div&gt;&lt;/p&gt;&lt;p&gt;Code to instantiate:&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
(setq viper-mode t)(require 'viper)(load-library &amp;quot;hideshow&amp;quot;)(add-hook 'python-mode-hook 'hs-minor-mode)(require 'ido)(ido-mode 'both)
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;&lt;/div&gt;&lt;/p&gt;&lt;/div&gt;
&lt;div class="section" id="keybindings"&gt;
&lt;h3&gt;Keybindings&lt;/h3&gt;
&lt;/p&gt;&lt;p&gt;&lt;pre class="literal-block"&gt;
(global-set-key (kbd &amp;quot;C-x C-l&amp;quot;) 'windmove-right)(global-set-key (kbd &amp;quot;C-x C-h&amp;quot;) 'windmove-left)(global-set-key (kbd &amp;quot;C-x C-k&amp;quot;) 'windmove-up)(global-set-key (kbd &amp;quot;C-x C-j&amp;quot;) 'windmove-down)(global-set-key (kbd &amp;quot;C-x C-;&amp;quot;) 'hippie-expand)(global-set-key (kbd &amp;quot;C-x C-g&amp;quot;) 'find-name-dired)(global-set-key (kbd &amp;quot;C-c C-t&amp;quot;) 'ansi-term)
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;div class="section" id="viper-keybindings-in-viper"&gt;
&lt;h3&gt;Viper Keybindings (in .viper)&lt;/h3&gt;
&lt;/p&gt;&lt;p&gt;&lt;pre class="literal-block"&gt;
(setq viper-expert-level '3)(setq viper-inhibit-startup-message 't)(setq-default indent-tabs-mode nil) ; I think this makes tabs into spaces(setq viper-shift-width 4) ; don't touch or else...;; Makes searching w/ regex default(setq viper-re-search t) ; don't touch or else...;; The following is for hideshow to work ALMOST similar to vi folding;; (there were keybindings I didn't like)(define-key viper-vi-global-user-map &amp;quot;zt&amp;quot; 'hs-toggle-hiding)(define-key viper-vi-global-user-map &amp;quot;zM&amp;quot; 'hs-hide-all)(define-key viper-vi-global-user-map &amp;quot;zm&amp;quot; 'hs-hide-block)(define-key viper-vi-global-user-map &amp;quot;zR&amp;quot; 'hs-show-all)(define-key viper-vi-global-user-map &amp;quot;zr&amp;quot; 'hs-show-block)
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="features-implemented-using-external-files"&gt;
&lt;h2&gt;Features implemented using external files&lt;/h2&gt;
&lt;/p&gt;&lt;div class="section" id="yasnippet-for-bundling-and-snippets"&gt;
&lt;h3&gt;Yasnippet (for bundling and snippets)&lt;/h3&gt;
&lt;/p&gt;&lt;p&gt;Yasnippet provides me features along the lives of textmates bundling,
which I think definitely makes things faster in the long run. After all,
who wants to write boilerplate code?&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://manual.macromates.com/en/bundles"&gt;http://manual.macromates.com/en/bundles&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Yasnippet site:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://code.google.com/p/yasnippet/"&gt;http://code.google.com/p/yasnippet/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lusty-explorer-el-for-a-great-tab-completion-file-navigator"&gt;
&lt;h3&gt;lusty-explorer.el (for a great tab completion file navigator)&lt;/h3&gt;
&lt;/p&gt;&lt;p&gt;Followed this emacs-fu guide:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://emacs-fu.blogspot.com/2010/07/navigating-through-files-and-buffers.html"&gt;http://emacs-fu.blogspot.com/2010/07/navigating-through-files-and-buffers.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And downloaded the .el here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.emacswiki.org/emacs/LustyExplorer"&gt;http://www.emacswiki.org/emacs/LustyExplorer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Specifically I have the following in my .emacs:&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
(when (require 'lusty-explorer nil 'noerror)  ;; overrride the normal file-opening, buffer switching  (global-set-key (kbd &amp;quot;C-x C-f&amp;quot;) 'lusty-file-explorer)  (global-set-key (kbd &amp;quot;C-x b&amp;quot;)   'lusty-buffer-explorer))
&lt;/pre&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="desired-features"&gt;
&lt;h2&gt;Desired features&lt;/h2&gt;
&lt;/p&gt;&lt;p&gt;I have yet to implement this, but I would like:&lt;/p&gt;
&lt;ul&gt;&lt;/p&gt;&lt;p&gt;&lt;li&gt;&lt;p&gt;Better file search (the ones I could find don't do what I'm looking for)&lt;/p&gt;
&lt;/li&gt;&lt;/p&gt;&lt;ul class="simple"&gt;
&lt;li&gt;Specifically, looking for a smart find that allow autocompletion&lt;/li&gt;
&lt;li&gt;Looking for something along the lines of eclipse&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;p&gt;&lt;/ul&gt;&lt;/p&gt;&lt;/div&gt;
</content><category term="programming"></category><category term="Emacs"></category><category term="IDE"></category><category term="python"></category></entry><entry><title>ax_check_mysql introduction and example</title><link href="ax_check_mysql-introduction-and-example.html" rel="alternate"></link><published>2011-08-20T18:30:00+02:00</published><updated>2011-08-20T18:30:00+02:00</updated><author><name>Toumorokoshi</name></author><id>tag:None,2011-08-20:ax_check_mysql-introduction-and-example.html</id><summary type="html">&lt;p&gt;I previously mentioned&amp;nbsp;&lt;a class="reference external" href="http://www.gnu.org/software/autoconf-archive/ax_check_mysql.html"&gt;ax_check_mysql.m4&lt;/a&gt;&amp;nbsp;in one of my posts, an
m4 macro written for autoconf. So here's a bit more information about
it, and some examples on how to use it.&lt;/p&gt;
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;/p&gt;&lt;p&gt;So ax_check_mysql is essentially an m4 macro for autoconf that was
written with MySQL plugin developers in …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I previously mentioned&amp;nbsp;&lt;a class="reference external" href="http://www.gnu.org/software/autoconf-archive/ax_check_mysql.html"&gt;ax_check_mysql.m4&lt;/a&gt;&amp;nbsp;in one of my posts, an
m4 macro written for autoconf. So here's a bit more information about
it, and some examples on how to use it.&lt;/p&gt;
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;/p&gt;&lt;p&gt;So ax_check_mysql is essentially an m4 macro for autoconf that was
written with MySQL plugin developers in mind. When one runs the macro, a
detected MySQL installation will give you the following information:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The path to the directory containing the MySQL&amp;nbsp;executables&lt;/li&gt;
&lt;li&gt;The path to the directory containing MySQL includes (if they exist)&lt;/li&gt;
&lt;li&gt;The path to the directory where MySQL plugins go&lt;/li&gt;
&lt;li&gt;The version of MySQL&lt;/li&gt;
&lt;li&gt;Whether MySQL is 32 or 64 bit&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;div&gt;&lt;p&gt;Basically providing most of the information, MySQL-wise, needed to
install the plugin.&lt;/p&gt;
&lt;/div&gt;&lt;/p&gt;&lt;p&gt;In the situation where an installation can not be detected or an
incomplete one is found, arguments can also be entered manually with:&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
--with-mysql
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;(where the root directory of the MySQL installation is passed (such as
/usr/local/mysql or some other custom directory) &amp;nbsp;and&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
--with-mysql-command, --with-mysql-plugin, --with-mysql-include
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;Which would just passing all the directories directly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="examples"&gt;
&lt;h2&gt;Examples&lt;/h2&gt;
&lt;/p&gt;&lt;p&gt;One can include the macro in the same fashion as any other macro in the
configure.ac file:&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
AC_INIT(ax_check_mysql_example,version-1.0)m4_include([m4_ax_check_mysql.m4])AX_CHECK_MYSQL([no],[yes],[5.0],[no])AC_MSG_NOTICE($MYSQL)AC_MSG_NOTICE($MYSQL_COMMANDS)
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;Now if I run this script on a computer with MySQL installed, you should
something along the lines of:&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
$ autoconf &amp;amp;&amp;amp; ./configurechecking for gcc... gccchecking whether the C compiler works... yeschecking for C compiler default output file name... a.outchecking for suffix of executables...checking whether we are cross compiling... nochecking for suffix of object files... ochecking whether we are using the GNU C compiler... yeschecking whether gcc accepts -g... yeschecking for gcc option to accept ISO C89... none neededchecking how to run the C preprocessor... gcc -Echecking for grep that handles long lines and -e... /bin/grepchecking for egrep... /bin/grep -Echecking for ANSI C header files... yeschecking for sys/types.h... yeschecking for sys/stat.h... yeschecking for stdlib.h... yeschecking for string.h... yeschecking for memory.h... yeschecking for strings.h... yeschecking for inttypes.h... yeschecking for stdint.h... yeschecking for unistd.h... yesTesting if MySQL was installed to common source/binary directorychecking for mysql... noTesting if MySQL was installed to common package manager directorychecking for mysql... yeschecking /usr/include/mysql/mysql_version.h/mysql_version.h usability... nochecking /usr/include/mysql/mysql_version.h/mysql_version.h presence...nochecking for /usr/include/mysql/mysql_version.h/mysql_version.h... nochecking /usr/include/mysql_version.h/mysql_version.h usability... nochecking /usr/include/mysql_version.h/mysql_version.h presence... nochecking for /usr/include/mysql_version.h/mysql_version.h... nochecking if /usr/lib/mysql/plugin/ exists...... yeschecking for mysql... /usr/bin/configure: WARNING: A package install was detected, but the include directory could not be found! MySQL development library may not be installed. If development library is installed please use --with-mysql-include --with-mysql-plugin --with-mysql-command to manually assign directory locationschecking MySQL Architecture... 32checking MySQL Version... 5.1.41checking if MySQL install supports Plugins... yeschecking if MySQL version is equal or greater than 5.0... yesconfigure: yesconfigure: /usr/bin/
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;Note that the last two lines of output were echoing the MYSQL and
MYSQL_COMMAND variables respectively, and that I do not have the
development library installed. A full list of variables available are
listed in the documentation.&lt;/p&gt;
&lt;p&gt;One can pass four arguments when running the macro:&lt;/p&gt;
&lt;p&gt;MYSQL-PLUGIN-NEEDED: if the MySQL version doesn't support plugins (&amp;lt;
5.1), this will cause failure.&lt;/p&gt;
&lt;p&gt;MYSQL-REQUIRED: say if MySQL is required or not.&lt;/p&gt;
&lt;p&gt;MINIMUM-VERSION: minimum version required for MySQL (i.e. 5.0 or 5.5)&lt;/p&gt;
&lt;p&gt;INCLUDES-REQUIRED: whether the MySQL includes are required (will fail if
includes are not found)&lt;/p&gt;
&lt;p&gt;For example, If I wanted MySQL 5.5 or higher, I could enter:&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
AC_INIT(ax_check_mysql_example,version-1.0)m4_include([m4_ax_check_mysql.m4])AX_CHECK_MYSQL([no],[yes],[5.5],[no])
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;And as my MySQL installation is 5.1.41, ./configure will fail:&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
checking MySQL Architecture... 32checking MySQL Version... 5.1.41checking if MySQL install supports Plugins... yeschecking if MySQL version is equal or greater than 5.5... noconfigure: error: installed MySQL version is not above 5.5.&amp;nbsp;Please upgrade your version of MySQL
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;Entering nothing in the version field will allow any version.&lt;/p&gt;
&lt;p&gt;Warnings will be outputted instead of errors if components aren't
required (such as includes or MySQL itself).&lt;/p&gt;
&lt;p&gt;And there's a brief example! Feel free to comment or contact me
(&lt;a class="reference external" href="mailto:tsutsumi.yusuke&amp;#64;gmail.com"&gt;tsutsumi.yusuke&amp;#64;gmail.com&lt;/a&gt;) if there are any questions/ comments.&lt;/p&gt;
&lt;p&gt;The script is maintained by myself on github:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/Toumorokoshi/ax_check_mysql"&gt;https://github.com/Toumorokoshi/ax_check_mysql&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="autoconf"></category><category term="ax_check_mysql"></category></entry><entry><title>Code folding in Emacs Viper-Mode</title><link href="code-folding-in-emacs-viper-mode.html" rel="alternate"></link><published>2011-08-17T23:06:00+02:00</published><updated>2011-08-17T23:06:00+02:00</updated><author><name>Toumorokoshi</name></author><id>tag:None,2011-08-17:code-folding-in-emacs-viper-mode.html</id><summary type="html">&lt;p&gt;Code folding is a feature I've never really used, and for the most part
seem to have done find without. I generally use search to navigate from
place to place in my code, but I realize this isn't always the most
efficient way to go, and code folding is very …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Code folding is a feature I've never really used, and for the most part
seem to have done find without. I generally use search to navigate from
place to place in my code, but I realize this isn't always the most
efficient way to go, and code folding is very useful in a couple
aspects:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It helps focus me on what particular method or class I'm working on
(way harder to tell when you've got several bunches of code in front
of you at once)&lt;/li&gt;
&lt;li&gt;Getting a good idea of the structure of the code (with everything
folded, it's much easier to see)&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;p&gt;So I decided to play around with folding with my current development
environment. I use Emacs as my base, but &lt;a class="reference external" href="http://www.emacswiki.org/emacs/ViperMode"&gt;viper-mode&lt;/a&gt; for the actual
text editing.&lt;/p&gt;
&lt;p&gt;Emacs has some pretty good folding tools built-in. Namely, these are
&lt;a class="reference external" href="http://www.emacswiki.org/emacs/FoldingMode"&gt;FoldingMode&lt;/a&gt; and &lt;a class="reference external" href="http://www.emacswiki.org/emacs/HideShow"&gt;HideShow&lt;/a&gt;. I admit I didn't play around with
FoldingMode a lot, as using it seems to involve manually adding the
folding points, something which I think is unnecessary 90% of the time.
Ideally, I'm looking for a folding extension that automatically
determines folding points, and leaves things as hands-off for me as
possible. One should be able to open a file, fold it up, and then open
and fold as necessary. I'm not looking to waste time adding commented
blocks of folding everywhere.&lt;/p&gt;
&lt;p&gt;Thats where HideShow comes in. Armed with rules for an array of
programming languages, HideShow automatically looks for these patterns
and sets folding points appropriately. Exactly what I'm looking for.
Simply loading hideshow using .emacs:&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
(load-library &amp;quot;hideshow&amp;quot;)
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;And activate the hideshow minor mode whenever you load the major mode of
your choice (for me it's Python):&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
(add-hook 'python-mode-hook 'hs-minor-mode)
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;Now you have all the access to the wonderful world of dynamic folding!
Unfortunately, I didn't really like the cumbersome keystrokes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;C-c &amp;#64; M-C-s to unfold all&lt;/li&gt;
&lt;li&gt;C-c &amp;#64; C-h to fold&lt;/li&gt;
&lt;li&gt;C-c &amp;#64; C-s to unfold&lt;/li&gt;
&lt;li&gt;C-c &amp;#64; M-C-h to fold all&lt;/li&gt;
&lt;li&gt;C-c &amp;#64; C-c to toggle folding&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;p&gt;Yeah, a six key-stroke succession is too much for me. So I assigned
these bindings to almost the same folding commands as VIM:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;zm to unfold&lt;/li&gt;
&lt;li&gt;zr to fold&lt;/li&gt;
&lt;li&gt;zM to unfold all&lt;/li&gt;
&lt;li&gt;zR to fold all&lt;/li&gt;
&lt;li&gt;zt to toggle&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;p&gt;To do this, I added configuration into the .viper file:&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
(define-key viper-vi-global-user-map &amp;quot;zt&amp;quot; 'hs-toggle-hiding)(define-key viper-vi-global-user-map &amp;quot;zM&amp;quot; 'hs-hide-all)(define-key viper-vi-global-user-map &amp;quot;zm&amp;quot; 'hs-hide-block)(define-key viper-vi-global-user-map &amp;quot;zR&amp;quot; 'hs-show-all)(define-key viper-vi-global-user-map &amp;quot;zr&amp;quot; 'hs-show-block)
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;(viper-vi-global-user-map tell viper it's for any buffer in any state
with viper as a major mode). So far, this is working like a charm for
me. Here's a screenshot with it at work:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://toumorokoshi.files.wordpress.com/2011/08/foldingexample.png"&gt;&lt;img alt="image0" src="http://toumorokoshi.files.wordpress.com/2011/08/foldingexample.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Feel free to comment if you have ideas/improvements!&lt;/p&gt;
</content><category term="programming"></category><category term="Emacs"></category><category term="folding"></category><category term="viper-mode"></category></entry><entry><title>Autoconf: ax_check_mysql</title><link href="autoconf-ax_check_mysql.html" rel="alternate"></link><published>2011-06-27T16:19:00+02:00</published><updated>2011-06-27T16:19:00+02:00</updated><author><name>Toumorokoshi</name></author><id>tag:None,2011-06-27:autoconf-ax_check_mysql.html</id><summary type="html">&lt;p&gt;Just mentioning a little m4 script I wrote a little while ago.
ax_check_mysql is used to find a valid MySQL installation, and gives
you the binary, include, and plugin directories.&lt;/p&gt;
&lt;p&gt;If you have an autoconf project, and you need MySQL, definitely consider
it!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.gnu.org/software/autoconf-archive/ax_check_mysql.html#ax_check_mysql"&gt;http://www.gnu.org/software/autoconf-archive/ax_check_mysql …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Just mentioning a little m4 script I wrote a little while ago.
ax_check_mysql is used to find a valid MySQL installation, and gives
you the binary, include, and plugin directories.&lt;/p&gt;
&lt;p&gt;If you have an autoconf project, and you need MySQL, definitely consider
it!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.gnu.org/software/autoconf-archive/ax_check_mysql.html#ax_check_mysql"&gt;http://www.gnu.org/software/autoconf-archive/ax_check_mysql.html#ax_check_mysql&lt;/a&gt;&lt;/p&gt;
</content><category term="programming"></category><category term="autoconf"></category><category term="ax_check_mysql"></category><category term="mysql"></category></entry><entry><title>Configuring HttpArchive + Webpagetest (Part 3: HttpArchive)</title><link href="configuring-httparchive-webpagetest-part-3-httparchive.html" rel="alternate"></link><published>2011-06-24T19:43:00+02:00</published><updated>2011-06-24T19:43:00+02:00</updated><author><name>Toumorokoshi</name></author><id>tag:None,2011-06-24:configuring-httparchive-webpagetest-part-3-httparchive.html</id><summary type="html">&lt;p&gt;It's time to install HttpArchive! So just as with Webpagetest, there's
some requirements for HttpArchive as well.&lt;/p&gt;
&lt;p&gt;HttpArchive must run on a unix-based machine, as HttpArchive uses pcntl,
a threading function in PHP currently available only on unix-based
machines. For this guide I will be using Ubuntu.&lt;/p&gt;
&lt;p&gt;The following will …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's time to install HttpArchive! So just as with Webpagetest, there's
some requirements for HttpArchive as well.&lt;/p&gt;
&lt;p&gt;HttpArchive must run on a unix-based machine, as HttpArchive uses pcntl,
a threading function in PHP currently available only on unix-based
machines. For this guide I will be using Ubuntu.&lt;/p&gt;
&lt;p&gt;The following will be needed on your machine:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Apache2+&lt;/li&gt;
&lt;li&gt;PHP5 or above&lt;/li&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;li&gt;Subversion&lt;/li&gt;
&lt;li&gt;pcntl (PHP)&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;p&gt;Most of these can be installed with a package manager. However with
pnctl, one must manually download the source, and either configure PHP
with the pcntl argument, or compile and install the pcntl extension
manually. I found an Ubuntu forum post from skout23 that explains a very
easy way to install pcntl for Ubuntu users. However I'm sure aside from
the package manager, BSD based Linux users can do the exact same thing:
&lt;a class="reference external" href="http://ubuntuforums.org/showthread.php?t=549953"&gt;http://ubuntuforums.org/showthread.php?t=549953&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here's the relevant code for Ubuntu users:&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
mkdir phpcd phpapt-get source php5cd php5-(WHATEVER_RELEASE)/ext/pcntlphpize./configuremake
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;And don't forget to restart Apache afterward!&lt;/p&gt;
&lt;p&gt;Once everything is configured properly, you can checkout the HttpArchive
source from the googlecode repository:`` ``&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://httparchive.googlecode.com/svn/trunk/"&gt;http://httparchive.googlecode.com/svn/trunk/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In addition, unless you want to download the downloads folder (which
contains over 1GB of data from the sites that HttpArchive tracks), it
would be best to checkout non-recursively, then check out all other
folders:&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
$svn co -N http://httparchive.googlecode.com/svn/trunk/ .$cd trunk$svn up images$svn up bulktest
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;Next, we will modify the settings.inc folder with the following
information:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;$gMysqlServer = &amp;quot;YOUR_SERVER&amp;quot;&lt;/li&gt;
&lt;li&gt;$gMysqlDb = &amp;quot;YOUR_DATABASE&amp;quot;&lt;/li&gt;
&lt;li&gt;$gMysqlUsername = &amp;quot;ACCOUNT_USERNAME&amp;quot;&lt;/li&gt;
&lt;li&gt;$gMysqlPassword = &amp;quot;ACCOUNT_PASSWORD&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;p&gt;Finally, Apache needs to interpret the .js files with PHP before being
served to the user. There exists a directive inside the .htaccess file
in the root of the repository that already accounts for this. However, I
had issues with this particular part, so I had to add the directive into
the php.conf file under /etc/apache2/mods-enabled (you will need root
permissions to modify this file):&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
&amp;lt;Filesmatch &amp;quot;(filmstrip|harviewer|interesting|interesting-images).js&amp;quot;&amp;gt;SetHandler application/x-httpd-php&amp;lt;/FilesMatch&amp;gt;
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;And you've configured HttpArchive! Unfortunately it won't really work
without any data, but we'll talk about the final steps in part 4:
Configuring the two to work with each other!&lt;/p&gt;
</content><category term="programming"></category><category term="HttpArchive"></category><category term="Webpagetest"></category></entry><entry><title>Configuring HttpArchive + Webpagetest (Part 2: Webpagetest)</title><link href="configuring-httparchive-webpagetest-part-2-webpagetest.html" rel="alternate"></link><published>2011-06-24T19:03:00+02:00</published><updated>2011-06-24T19:03:00+02:00</updated><author><name>Toumorokoshi</name></author><id>tag:None,2011-06-24:configuring-httparchive-webpagetest-part-2-webpagetest.html</id><summary type="html">&lt;p&gt;Welcome to part 2! This post discusses installing Webpagetest.org. In
order to do so, we will need:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A windows machine (XP or Windows 7 have been tested with this method)&lt;/li&gt;
&lt;li&gt;Apache2.2 or higher&lt;/li&gt;
&lt;li&gt;PHP5 or higher&lt;/li&gt;
&lt;li&gt;IE of some sort (IE8 or 9 would be best)&lt;/li&gt;
&lt;li&gt;ffmpeg&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;p&gt;It …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Welcome to part 2! This post discusses installing Webpagetest.org. In
order to do so, we will need:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A windows machine (XP or Windows 7 have been tested with this method)&lt;/li&gt;
&lt;li&gt;Apache2.2 or higher&lt;/li&gt;
&lt;li&gt;PHP5 or higher&lt;/li&gt;
&lt;li&gt;IE of some sort (IE8 or 9 would be best)&lt;/li&gt;
&lt;li&gt;ffmpeg&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;p&gt;It is possible to split up the web server and the testing server, but I
put them both on the same machine for ease of use. In addition I found
installing and configuring Apache and PHP together on windows was
surprisingly difficult, so I suggest installing &lt;a class="reference external" href="http://www.apachefriends.org/en/xampp-windows.html"&gt;Xampp&lt;/a&gt;. It's a
single-install program that includes many of the tools used for serving
web pages and web development, such as Apache, PHP5, MySQL, and
Filezilla. Windows 7 machines have IE 8 installed by default, but
upgrading is straightforward for XP machines.&lt;/p&gt;
&lt;p&gt;Once you have your machine set up properly, it's time to install
Webpagetest! You can download the source here: &lt;a class="reference external" href="http://code.google.com/p/webpagetest/downloads/list"&gt;Webpagetest.org
source&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are also installation instructions on the webpagetest.org google
site. I would recommend following these fora a complete guide, but what
I have written is a shorter version and will attain the same result.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://sites.google.com/a/webpagetest.org/docs/private-instances"&gt;https://sites.google.com/a/webpagetest.org/docs/private-instances&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Configure Apache to point to the www directory of your source, or move
the contents of the folder to the &amp;quot;htdocs&amp;quot; folder under Xampp (I found
that the Virtualhost directive in Apache was having issues, so I just
threw everything into the htdocs folder, where Xampp is initially
configured to point to). I found that on the windows machine, giving
read/write permissions to the directories needed was not an issue.&lt;/p&gt;
&lt;p&gt;You will then have to configure everything properly. This involves
basically copying and pasting everything in the settings folder to it's
non-sample equivalent. I was able to do this because I wanted a basic
instance, but keep in mind you may need to do more if you want more
complex options.&lt;/p&gt;
&lt;p&gt;Configuring the system to run the tests is best explained, verbatim from
the private-instance setup site linked above:&lt;/p&gt;
&lt;ol&gt;&lt;/p&gt;&lt;p&gt;&lt;li&gt;&lt;p&gt;Configure the test system to automatically log-on to an administrator
account. Running &amp;quot;control userpasswords2&amp;quot; from the start menu is one way
to configure it.&lt;/p&gt;
&lt;/li&gt;&lt;/p&gt;&lt;p&gt;&lt;li&gt;&lt;p&gt;Disable any screen savers (the desktop needs to remain visible for the
video capture to work)&lt;/p&gt;
&lt;/li&gt;&lt;/p&gt;&lt;p&gt;&lt;li&gt;&lt;p&gt;Disable UAC (Vista or later - slide to &amp;quot;never notify&amp;quot;)&lt;/p&gt;
&lt;/li&gt;&lt;/p&gt;&lt;p&gt;&lt;li&gt;&lt;p&gt;Uninstall IE Enhanced-Security Mode (Windows Server)&lt;/p&gt;
&lt;/li&gt;&lt;/p&gt;&lt;p&gt;&lt;li&gt;&lt;p&gt;Copy the test software from the &lt;strong&gt;agent&lt;/strong&gt; folder to the system (to
&amp;quot;c:\webpagetest&amp;quot; for this example)&lt;/p&gt;
&lt;/li&gt;&lt;/p&gt;&lt;p&gt;&lt;li&gt;&lt;p&gt;Install the DUMMYNET ipfw driver&lt;/p&gt;
&lt;/p&gt;&lt;ul class="simple"&gt;
&lt;li&gt;Pull up the properties for the Network Adapter that is used to access
the Internet&lt;/li&gt;
&lt;li&gt;Click &amp;quot;Install&amp;quot;&lt;/li&gt;
&lt;li&gt;Select &amp;quot;Service&amp;quot; and click &amp;quot;Add&amp;quot;&lt;/li&gt;
&lt;li&gt;Click &amp;quot;Have Disk&amp;quot; and navigate to c:\webpagetest\dummynet&lt;/li&gt;
&lt;li&gt;Select the ipfw+dummynet service (and click through any warnings
about the driver being unsigned)&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;p&gt;&lt;/li&gt;&lt;/p&gt;&lt;p&gt;&lt;li&gt;&lt;p&gt;Create a shortcut to c:\webpagetest\dummynet\ipfw.cmd in the startup
folder&lt;/p&gt;
&lt;/li&gt;&lt;/p&gt;&lt;p&gt;&lt;li&gt;&lt;p&gt;Create a shortcut to c:\webpagetest\urlblast.exe in the startup folder&lt;/p&gt;
&lt;/li&gt;&lt;/p&gt;&lt;p&gt;&lt;li&gt;&lt;p&gt;Make a copy of the settings file (urlblast.ini) based on the sample&lt;/p&gt;
&lt;/li&gt;&lt;/p&gt;&lt;ul class="simple"&gt;
&lt;li&gt;Give it the path to the server (default configuration points to a
server on the local machine)&lt;/li&gt;
&lt;li&gt;Configure the location to match the location defined on the server in
locations.ini (if modified)&lt;/li&gt;
&lt;li&gt;Configure the location key to match the server in locations.ini (if
modified)&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;&lt;p&gt;&lt;li&gt;&lt;p&gt;Reboot to make sure everything starts up correctly&lt;/p&gt;
&lt;/li&gt;&lt;/p&gt;&lt;p&gt;&lt;/ol&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;On windows 7, ipfw will not properly install (it will not
show up under installable services). If you want to use windows 7, you
must add a &amp;quot;Location = LAN&amp;quot; directive under test in settings.inc in
settings:&lt;/p&gt;
&lt;p&gt;&lt;pre class="literal-block"&gt;
[Test]Location = LAN
&lt;/pre&gt;
&lt;/p&gt;&lt;p&gt;After that, your instance should be set up! Now that wasn't so bad, was
it?&lt;/p&gt;
&lt;p&gt;Next time we'll talk about installing HttpArchive!&lt;/p&gt;
</content><category term="programming"></category><category term="HttpArchive"></category><category term="Webpagetest"></category></entry><entry><title>Configuring HttpArchive + Webpagetest (Part 1: Introduction)</title><link href="configuring-httparchive-webpagetest-part-1-introduction.html" rel="alternate"></link><published>2011-06-23T22:40:00+02:00</published><updated>2011-06-23T22:40:00+02:00</updated><author><name>Toumorokoshi</name></author><id>tag:None,2011-06-23:configuring-httparchive-webpagetest-part-1-introduction.html</id><summary type="html">&lt;p&gt;Testing is an integral part of developing code, and this is usually a
lesson that is learned the hard way. I can't name all the times that
I've made a trivial mistake that goes unnoticed until the code has
ballooned to the point where rooting around and figuring it out …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Testing is an integral part of developing code, and this is usually a
lesson that is learned the hard way. I can't name all the times that
I've made a trivial mistake that goes unnoticed until the code has
ballooned to the point where rooting around and figuring it out is an
impossibility. For even the best tester, it's a rare occurrence that
every single possible exception is captured the first time around. On
top of this, certain kinds of tests are also less frequently even
considered. Among these are performance tests for web developers.
Figuring out how quickly each part of a website responds is not an easy
task, and is not a concern for must until it goes wrong. Luckily, there
exists a pair of tools that provide a great look at these performance
issues: &lt;a class="reference external" href="http://httparchive.org"&gt;HttpArchive&lt;/a&gt; and &lt;a class="reference external" href="http://webpagetest.org"&gt;Webpagetest&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="webpagetest"&gt;
&lt;h2&gt;Webpagetest&lt;/h2&gt;
&lt;/p&gt;&lt;p&gt;Webpagetest is a tool for testing website performance. Originally a
piece of in-house AOL software, the site is now available as both a
public &lt;a class="reference external" href="http://www.webpagetest.org/"&gt;website&lt;/a&gt;, and &lt;a class="reference external" href="http://code.google.com/p/webpagetest/source/checkout"&gt;open-source&lt;/a&gt; for users to download. It is an
amazing tool that provides various tools that measure website
performance, from a waterfall chart (of both resources accessed and
connections):&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://toumorokoshi.files.wordpress.com/2011/06/waterfall1.png"&gt;&lt;img alt="image0" src="http://toumorokoshi.files.wordpress.com/2011/06/waterfall1.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;to Google's Pagespeed app (gives a rating out of 100 for page
performance):&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://toumorokoshi.files.wordpress.com/2011/06/pagespeed.png"&gt;&lt;img alt="image1" src="http://toumorokoshi.files.wordpress.com/2011/06/pagespeed.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;to actual screenshots of the page:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://toumorokoshi.files.wordpress.com/2011/06/snapshot.png"&gt;&lt;img alt="image2" src="http://toumorokoshi.files.wordpress.com/2011/06/snapshot.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I would give it a shot on your own site to see how amazing of a product
it really is. It is a comprehensive at look at a site, and a timeline
for the time it takes to load, start to finish. Webpagetest by itself is
a great tool for debugging a slow site, but there is another level with
which one can examine the performance of a site: over time. If one could
take the information from Webpagetest, store it in a database of some
kind, and analyze the results, there would be another dimension through
which one can analyze where the site was, how it is now, and predict the
direction, performance wise, it is heading.&lt;/p&gt;
&lt;p&gt;Well, that is exactly what HttpArchive is built to do!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="httparchive"&gt;
&lt;h2&gt;HttpArchive&lt;/h2&gt;
&lt;/p&gt;&lt;p&gt;HttpArchive is another open-source project, meant to be similar to
&lt;a class="reference external" href="http://www.archive.org"&gt;archive.org&lt;/a&gt;, which snapshots various sites on the internet, providing
a look back into the past. HttpArchive archives the performance of
various websites, providing a different look back: at site
performance.Using Webpagetest as a backbone, HttpArchive saves snapshots
of information from webpagetest.org, and analyzes trends in various
websites. For example, take a look at it's analysis of wordpress.com:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://httparchive.org/viewsite.php?pageid=268424"&gt;http://httparchive.org/viewsite.php?pageid=268424&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The site is able to give insight that is interesting to both developers
and users alike!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;/p&gt;&lt;p&gt;The goal of this tutorial is to go over how to implement a private
instance of Webpagetest and HttpArchive, and how to link the pair
together. This will create a powerful and useful performance testing
suite.&lt;/p&gt;
&lt;p&gt;Stay tuned for part 2, where we'll go over installing and configuring
Webpagetest!&lt;/p&gt;
&lt;p&gt;Part3:&amp;nbsp; going over installing HttpArchive.&lt;/p&gt;
&lt;p&gt;Part4: putting them together and conclusion.&lt;/p&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="HttpArchive"></category><category term="Webpagetest"></category></entry><entry><title>Port Forwarding To a VirtualBox VM</title><link href="port-forwarding-to-a-virtualbox-vm.html" rel="alternate"></link><published>2011-06-22T22:59:00+02:00</published><updated>2011-06-22T22:59:00+02:00</updated><author><name>Yusuke Tsutsumi</name></author><id>tag:None,2011-06-22:port-forwarding-to-a-virtualbox-vm.html</id><summary type="html">&lt;p&gt;Posting this little tidbit for myself. Turns out VirtualBox has a lot of
interesting NAT options:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.virtualbox.org/manual/ch06.html#natforward"&gt;Nat Forwarding - VirtualBox&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To forward a port from a host machine to a VM, all you need to do is
find VBoxManager (.exe at the end for windows) and type:&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;VBoxManage modifyvm &amp;quot;VM name …&lt;/tt&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Posting this little tidbit for myself. Turns out VirtualBox has a lot of
interesting NAT options:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.virtualbox.org/manual/ch06.html#natforward"&gt;Nat Forwarding - VirtualBox&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To forward a port from a host machine to a VM, all you need to do is
find VBoxManager (.exe at the end for windows) and type:&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;VBoxManage modifyvm &amp;quot;VM name&amp;quot; &lt;span class="pre"&gt;--natpf1&lt;/span&gt; &lt;span class="pre"&gt;&amp;quot;guestssh,tcp,,2222,,22&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;And now you have forwarded port 2222 of your host machine to 22 of your
VM.&lt;/p&gt;
&lt;p&gt;Would love to know how to delete these rules though.&lt;/p&gt;
&lt;p&gt;EDIT: just found it, awesome: &lt;a class="reference external" href="http://www.virtualbox.org/manual/ch08.html#vboxmanage-modifyvm"&gt;VBoxManage Command Reference&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--natpf&amp;lt;1-N&amp;gt;&lt;/span&gt; delete &amp;lt;name&amp;gt;&lt;/tt&gt;&lt;/p&gt;
</content><category term="general"></category><category term="VirtualBox"></category></entry></feed>